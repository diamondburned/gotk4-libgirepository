// Code generated by girgen. DO NOT EDIT.

package gsk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeBlendNode                   = coreglib.Type(girepository.MustFind("Gsk", "BlendNode").RegisteredGType())
	GTypeBlurNode                    = coreglib.Type(girepository.MustFind("Gsk", "BlurNode").RegisteredGType())
	GTypeBorderNode                  = coreglib.Type(girepository.MustFind("Gsk", "BorderNode").RegisteredGType())
	GTypeCairoNode                   = coreglib.Type(girepository.MustFind("Gsk", "CairoNode").RegisteredGType())
	GTypeClipNode                    = coreglib.Type(girepository.MustFind("Gsk", "ClipNode").RegisteredGType())
	GTypeColorMatrixNode             = coreglib.Type(girepository.MustFind("Gsk", "ColorMatrixNode").RegisteredGType())
	GTypeColorNode                   = coreglib.Type(girepository.MustFind("Gsk", "ColorNode").RegisteredGType())
	GTypeConicGradientNode           = coreglib.Type(girepository.MustFind("Gsk", "ConicGradientNode").RegisteredGType())
	GTypeContainerNode               = coreglib.Type(girepository.MustFind("Gsk", "ContainerNode").RegisteredGType())
	GTypeCrossFadeNode               = coreglib.Type(girepository.MustFind("Gsk", "CrossFadeNode").RegisteredGType())
	GTypeDebugNode                   = coreglib.Type(girepository.MustFind("Gsk", "DebugNode").RegisteredGType())
	GTypeGLShaderNode                = coreglib.Type(girepository.MustFind("Gsk", "GLShaderNode").RegisteredGType())
	GTypeInsetShadowNode             = coreglib.Type(girepository.MustFind("Gsk", "InsetShadowNode").RegisteredGType())
	GTypeLinearGradientNode          = coreglib.Type(girepository.MustFind("Gsk", "LinearGradientNode").RegisteredGType())
	GTypeOpacityNode                 = coreglib.Type(girepository.MustFind("Gsk", "OpacityNode").RegisteredGType())
	GTypeOutsetShadowNode            = coreglib.Type(girepository.MustFind("Gsk", "OutsetShadowNode").RegisteredGType())
	GTypeRadialGradientNode          = coreglib.Type(girepository.MustFind("Gsk", "RadialGradientNode").RegisteredGType())
	GTypeRepeatNode                  = coreglib.Type(girepository.MustFind("Gsk", "RepeatNode").RegisteredGType())
	GTypeRepeatingLinearGradientNode = coreglib.Type(girepository.MustFind("Gsk", "RepeatingLinearGradientNode").RegisteredGType())
	GTypeRepeatingRadialGradientNode = coreglib.Type(girepository.MustFind("Gsk", "RepeatingRadialGradientNode").RegisteredGType())
	GTypeRoundedClipNode             = coreglib.Type(girepository.MustFind("Gsk", "RoundedClipNode").RegisteredGType())
	GTypeShadowNode                  = coreglib.Type(girepository.MustFind("Gsk", "ShadowNode").RegisteredGType())
	GTypeTextNode                    = coreglib.Type(girepository.MustFind("Gsk", "TextNode").RegisteredGType())
	GTypeTextureNode                 = coreglib.Type(girepository.MustFind("Gsk", "TextureNode").RegisteredGType())
	GTypeTransformNode               = coreglib.Type(girepository.MustFind("Gsk", "TransformNode").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeBlendNode, F: marshalBlendNode},
		coreglib.TypeMarshaler{T: GTypeBlurNode, F: marshalBlurNode},
		coreglib.TypeMarshaler{T: GTypeBorderNode, F: marshalBorderNode},
		coreglib.TypeMarshaler{T: GTypeCairoNode, F: marshalCairoNode},
		coreglib.TypeMarshaler{T: GTypeClipNode, F: marshalClipNode},
		coreglib.TypeMarshaler{T: GTypeColorMatrixNode, F: marshalColorMatrixNode},
		coreglib.TypeMarshaler{T: GTypeColorNode, F: marshalColorNode},
		coreglib.TypeMarshaler{T: GTypeConicGradientNode, F: marshalConicGradientNode},
		coreglib.TypeMarshaler{T: GTypeContainerNode, F: marshalContainerNode},
		coreglib.TypeMarshaler{T: GTypeCrossFadeNode, F: marshalCrossFadeNode},
		coreglib.TypeMarshaler{T: GTypeDebugNode, F: marshalDebugNode},
		coreglib.TypeMarshaler{T: GTypeGLShaderNode, F: marshalGLShaderNode},
		coreglib.TypeMarshaler{T: GTypeInsetShadowNode, F: marshalInsetShadowNode},
		coreglib.TypeMarshaler{T: GTypeLinearGradientNode, F: marshalLinearGradientNode},
		coreglib.TypeMarshaler{T: GTypeOpacityNode, F: marshalOpacityNode},
		coreglib.TypeMarshaler{T: GTypeOutsetShadowNode, F: marshalOutsetShadowNode},
		coreglib.TypeMarshaler{T: GTypeRadialGradientNode, F: marshalRadialGradientNode},
		coreglib.TypeMarshaler{T: GTypeRepeatNode, F: marshalRepeatNode},
		coreglib.TypeMarshaler{T: GTypeRepeatingLinearGradientNode, F: marshalRepeatingLinearGradientNode},
		coreglib.TypeMarshaler{T: GTypeRepeatingRadialGradientNode, F: marshalRepeatingRadialGradientNode},
		coreglib.TypeMarshaler{T: GTypeRoundedClipNode, F: marshalRoundedClipNode},
		coreglib.TypeMarshaler{T: GTypeShadowNode, F: marshalShadowNode},
		coreglib.TypeMarshaler{T: GTypeTextNode, F: marshalTextNode},
		coreglib.TypeMarshaler{T: GTypeTextureNode, F: marshalTextureNode},
		coreglib.TypeMarshaler{T: GTypeTransformNode, F: marshalTransformNode},
	})
}

// BlendNode: render node applying a blending function between its two child
// nodes.
type BlendNode struct {
	_ [0]func() // equal guard
	RenderNode
}

var (
	_ RenderNoder = (*BlendNode)(nil)
)

func wrapBlendNode(obj *coreglib.Object) *BlendNode {
	return &BlendNode{
		RenderNode: RenderNode{
			Object: obj,
		},
	}
}

func marshalBlendNode(p uintptr) (interface{}, error) {
	return wrapBlendNode(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// BlurNode: render node applying a blur effect to its single child.
type BlurNode struct {
	_ [0]func() // equal guard
	RenderNode
}

var (
	_ RenderNoder = (*BlurNode)(nil)
)

func wrapBlurNode(obj *coreglib.Object) *BlurNode {
	return &BlurNode{
		RenderNode: RenderNode{
			Object: obj,
		},
	}
}

func marshalBlurNode(p uintptr) (interface{}, error) {
	return wrapBlurNode(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// BorderNode: render node for a border.
type BorderNode struct {
	_ [0]func() // equal guard
	RenderNode
}

var (
	_ RenderNoder = (*BorderNode)(nil)
)

func wrapBorderNode(obj *coreglib.Object) *BorderNode {
	return &BorderNode{
		RenderNode: RenderNode{
			Object: obj,
		},
	}
}

func marshalBorderNode(p uintptr) (interface{}, error) {
	return wrapBorderNode(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// CairoNode: render node for a Cairo surface.
type CairoNode struct {
	_ [0]func() // equal guard
	RenderNode
}

var (
	_ RenderNoder = (*CairoNode)(nil)
)

func wrapCairoNode(obj *coreglib.Object) *CairoNode {
	return &CairoNode{
		RenderNode: RenderNode{
			Object: obj,
		},
	}
}

func marshalCairoNode(p uintptr) (interface{}, error) {
	return wrapCairoNode(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ClipNode: render node applying a rectangular clip to its single child node.
type ClipNode struct {
	_ [0]func() // equal guard
	RenderNode
}

var (
	_ RenderNoder = (*ClipNode)(nil)
)

func wrapClipNode(obj *coreglib.Object) *ClipNode {
	return &ClipNode{
		RenderNode: RenderNode{
			Object: obj,
		},
	}
}

func marshalClipNode(p uintptr) (interface{}, error) {
	return wrapClipNode(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ColorMatrixNode: render node controlling the color matrix of its single child
// node.
type ColorMatrixNode struct {
	_ [0]func() // equal guard
	RenderNode
}

var (
	_ RenderNoder = (*ColorMatrixNode)(nil)
)

func wrapColorMatrixNode(obj *coreglib.Object) *ColorMatrixNode {
	return &ColorMatrixNode{
		RenderNode: RenderNode{
			Object: obj,
		},
	}
}

func marshalColorMatrixNode(p uintptr) (interface{}, error) {
	return wrapColorMatrixNode(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ColorNode: render node for a solid color.
type ColorNode struct {
	_ [0]func() // equal guard
	RenderNode
}

var (
	_ RenderNoder = (*ColorNode)(nil)
)

func wrapColorNode(obj *coreglib.Object) *ColorNode {
	return &ColorNode{
		RenderNode: RenderNode{
			Object: obj,
		},
	}
}

func marshalColorNode(p uintptr) (interface{}, error) {
	return wrapColorNode(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConicGradientNode: render node for a conic gradient.
type ConicGradientNode struct {
	_ [0]func() // equal guard
	RenderNode
}

var (
	_ RenderNoder = (*ConicGradientNode)(nil)
)

func wrapConicGradientNode(obj *coreglib.Object) *ConicGradientNode {
	return &ConicGradientNode{
		RenderNode: RenderNode{
			Object: obj,
		},
	}
}

func marshalConicGradientNode(p uintptr) (interface{}, error) {
	return wrapConicGradientNode(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ContainerNode: render node that can contain other render nodes.
type ContainerNode struct {
	_ [0]func() // equal guard
	RenderNode
}

var (
	_ RenderNoder = (*ContainerNode)(nil)
)

func wrapContainerNode(obj *coreglib.Object) *ContainerNode {
	return &ContainerNode{
		RenderNode: RenderNode{
			Object: obj,
		},
	}
}

func marshalContainerNode(p uintptr) (interface{}, error) {
	return wrapContainerNode(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// CrossFadeNode: render node cross fading between two child nodes.
type CrossFadeNode struct {
	_ [0]func() // equal guard
	RenderNode
}

var (
	_ RenderNoder = (*CrossFadeNode)(nil)
)

func wrapCrossFadeNode(obj *coreglib.Object) *CrossFadeNode {
	return &CrossFadeNode{
		RenderNode: RenderNode{
			Object: obj,
		},
	}
}

func marshalCrossFadeNode(p uintptr) (interface{}, error) {
	return wrapCrossFadeNode(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// DebugNode: render node that emits a debugging message when drawing its child
// node.
type DebugNode struct {
	_ [0]func() // equal guard
	RenderNode
}

var (
	_ RenderNoder = (*DebugNode)(nil)
)

func wrapDebugNode(obj *coreglib.Object) *DebugNode {
	return &DebugNode{
		RenderNode: RenderNode{
			Object: obj,
		},
	}
}

func marshalDebugNode(p uintptr) (interface{}, error) {
	return wrapDebugNode(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// GLShaderNode: render node using a GL shader when drawing its children nodes.
type GLShaderNode struct {
	_ [0]func() // equal guard
	RenderNode
}

var (
	_ RenderNoder = (*GLShaderNode)(nil)
)

func wrapGLShaderNode(obj *coreglib.Object) *GLShaderNode {
	return &GLShaderNode{
		RenderNode: RenderNode{
			Object: obj,
		},
	}
}

func marshalGLShaderNode(p uintptr) (interface{}, error) {
	return wrapGLShaderNode(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// InsetShadowNode: render node for an inset shadow.
type InsetShadowNode struct {
	_ [0]func() // equal guard
	RenderNode
}

var (
	_ RenderNoder = (*InsetShadowNode)(nil)
)

func wrapInsetShadowNode(obj *coreglib.Object) *InsetShadowNode {
	return &InsetShadowNode{
		RenderNode: RenderNode{
			Object: obj,
		},
	}
}

func marshalInsetShadowNode(p uintptr) (interface{}, error) {
	return wrapInsetShadowNode(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// LinearGradientNode: render node for a linear gradient.
type LinearGradientNode struct {
	_ [0]func() // equal guard
	RenderNode
}

var (
	_ RenderNoder = (*LinearGradientNode)(nil)
)

func wrapLinearGradientNode(obj *coreglib.Object) *LinearGradientNode {
	return &LinearGradientNode{
		RenderNode: RenderNode{
			Object: obj,
		},
	}
}

func marshalLinearGradientNode(p uintptr) (interface{}, error) {
	return wrapLinearGradientNode(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// OpacityNode: render node controlling the opacity of its single child node.
type OpacityNode struct {
	_ [0]func() // equal guard
	RenderNode
}

var (
	_ RenderNoder = (*OpacityNode)(nil)
)

func wrapOpacityNode(obj *coreglib.Object) *OpacityNode {
	return &OpacityNode{
		RenderNode: RenderNode{
			Object: obj,
		},
	}
}

func marshalOpacityNode(p uintptr) (interface{}, error) {
	return wrapOpacityNode(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// OutsetShadowNode: render node for an outset shadow.
type OutsetShadowNode struct {
	_ [0]func() // equal guard
	RenderNode
}

var (
	_ RenderNoder = (*OutsetShadowNode)(nil)
)

func wrapOutsetShadowNode(obj *coreglib.Object) *OutsetShadowNode {
	return &OutsetShadowNode{
		RenderNode: RenderNode{
			Object: obj,
		},
	}
}

func marshalOutsetShadowNode(p uintptr) (interface{}, error) {
	return wrapOutsetShadowNode(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// RadialGradientNode: render node for a radial gradient.
type RadialGradientNode struct {
	_ [0]func() // equal guard
	RenderNode
}

var (
	_ RenderNoder = (*RadialGradientNode)(nil)
)

func wrapRadialGradientNode(obj *coreglib.Object) *RadialGradientNode {
	return &RadialGradientNode{
		RenderNode: RenderNode{
			Object: obj,
		},
	}
}

func marshalRadialGradientNode(p uintptr) (interface{}, error) {
	return wrapRadialGradientNode(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// RepeatNode: render node repeating its single child node.
type RepeatNode struct {
	_ [0]func() // equal guard
	RenderNode
}

var (
	_ RenderNoder = (*RepeatNode)(nil)
)

func wrapRepeatNode(obj *coreglib.Object) *RepeatNode {
	return &RepeatNode{
		RenderNode: RenderNode{
			Object: obj,
		},
	}
}

func marshalRepeatNode(p uintptr) (interface{}, error) {
	return wrapRepeatNode(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// RepeatingLinearGradientNode: render node for a repeating linear gradient.
type RepeatingLinearGradientNode struct {
	_ [0]func() // equal guard
	RenderNode
}

var (
	_ RenderNoder = (*RepeatingLinearGradientNode)(nil)
)

func wrapRepeatingLinearGradientNode(obj *coreglib.Object) *RepeatingLinearGradientNode {
	return &RepeatingLinearGradientNode{
		RenderNode: RenderNode{
			Object: obj,
		},
	}
}

func marshalRepeatingLinearGradientNode(p uintptr) (interface{}, error) {
	return wrapRepeatingLinearGradientNode(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// RepeatingRadialGradientNode: render node for a repeating radial gradient.
type RepeatingRadialGradientNode struct {
	_ [0]func() // equal guard
	RenderNode
}

var (
	_ RenderNoder = (*RepeatingRadialGradientNode)(nil)
)

func wrapRepeatingRadialGradientNode(obj *coreglib.Object) *RepeatingRadialGradientNode {
	return &RepeatingRadialGradientNode{
		RenderNode: RenderNode{
			Object: obj,
		},
	}
}

func marshalRepeatingRadialGradientNode(p uintptr) (interface{}, error) {
	return wrapRepeatingRadialGradientNode(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// RoundedClipNode: render node applying a rounded rectangle clip to its single
// child.
type RoundedClipNode struct {
	_ [0]func() // equal guard
	RenderNode
}

var (
	_ RenderNoder = (*RoundedClipNode)(nil)
)

func wrapRoundedClipNode(obj *coreglib.Object) *RoundedClipNode {
	return &RoundedClipNode{
		RenderNode: RenderNode{
			Object: obj,
		},
	}
}

func marshalRoundedClipNode(p uintptr) (interface{}, error) {
	return wrapRoundedClipNode(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ShadowNode: render node drawing one or more shadows behind its single child
// node.
type ShadowNode struct {
	_ [0]func() // equal guard
	RenderNode
}

var (
	_ RenderNoder = (*ShadowNode)(nil)
)

func wrapShadowNode(obj *coreglib.Object) *ShadowNode {
	return &ShadowNode{
		RenderNode: RenderNode{
			Object: obj,
		},
	}
}

func marshalShadowNode(p uintptr) (interface{}, error) {
	return wrapShadowNode(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// TextNode: render node drawing a set of glyphs.
type TextNode struct {
	_ [0]func() // equal guard
	RenderNode
}

var (
	_ RenderNoder = (*TextNode)(nil)
)

func wrapTextNode(obj *coreglib.Object) *TextNode {
	return &TextNode{
		RenderNode: RenderNode{
			Object: obj,
		},
	}
}

func marshalTextNode(p uintptr) (interface{}, error) {
	return wrapTextNode(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// TextureNode: render node for a Texture.
type TextureNode struct {
	_ [0]func() // equal guard
	RenderNode
}

var (
	_ RenderNoder = (*TextureNode)(nil)
)

func wrapTextureNode(obj *coreglib.Object) *TextureNode {
	return &TextureNode{
		RenderNode: RenderNode{
			Object: obj,
		},
	}
}

func marshalTextureNode(p uintptr) (interface{}, error) {
	return wrapTextureNode(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// TransformNode: render node applying a GskTransform to its single child node.
type TransformNode struct {
	_ [0]func() // equal guard
	RenderNode
}

var (
	_ RenderNoder = (*TransformNode)(nil)
)

func wrapTransformNode(obj *coreglib.Object) *TransformNode {
	return &TransformNode{
		RenderNode: RenderNode{
			Object: obj,
		},
	}
}

func marshalTransformNode(p uintptr) (interface{}, error) {
	return wrapTransformNode(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
