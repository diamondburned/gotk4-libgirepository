// Code generated by girgen. DO NOT EDIT.

package gdkx11

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gdkx114_X11Screen_ConnectWindowManagerChanged(gpointer, guintptr);
import "C"

// GType values.
var (
	GTypeX11Screen = coreglib.Type(girepository.MustFind("GdkX11", "X11Screen").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeX11Screen, F: marshalX11Screen},
	})
}

type X11Screen struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*X11Screen)(nil)
)

func wrapX11Screen(obj *coreglib.Object) *X11Screen {
	return &X11Screen{
		Object: obj,
	}
}

func marshalX11Screen(p uintptr) (interface{}, error) {
	return wrapX11Screen(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *X11Screen) ConnectWindowManagerChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "window-manager-changed", false, unsafe.Pointer(C._gotk4_gdkx114_X11Screen_ConnectWindowManagerChanged), f)
}
