// Code generated by girgen. DO NOT EDIT.

package gdkx11

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern gboolean _gotk4_gdkx114_X11Display_ConnectXevent(gpointer, gpointer, guintptr);
import "C"

// GType values.
var (
	GTypeX11Display = coreglib.Type(girepository.MustFind("GdkX11", "X11Display").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeX11Display, F: marshalX11Display},
	})
}

type X11Display struct {
	_ [0]func() // equal guard
	gdk.Display
}

var (
	_ coreglib.Objector = (*X11Display)(nil)
)

func wrapX11Display(obj *coreglib.Object) *X11Display {
	return &X11Display{
		Display: gdk.Display{
			Object: obj,
		},
	}
}

func marshalX11Display(p uintptr) (interface{}, error) {
	return wrapX11Display(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectXevent signal is a low level signal that is emitted whenever an XEvent
// has been received.
//
// When handlers to this signal return TRUE, no other handlers will be invoked.
// In particular, the default handler for this function is GDK's own event
// handling mechanism, so by returning TRUE for an event that GDK expects to
// translate, you may break GDK and/or GTK+ in interesting ways. You have been
// warned.
//
// If you want this signal handler to queue a Event, you can use
// gdk_display_put_event().
//
// If you are interested in X GenericEvents, bear in mind that XGetEventData()
// has been already called on the event, and XFreeEventData() will be called
// afterwards.
func (v *X11Display) ConnectXevent(f func(xevent unsafe.Pointer) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "xevent", false, unsafe.Pointer(C._gotk4_gdkx114_X11Display_ConnectXevent), f)
}
