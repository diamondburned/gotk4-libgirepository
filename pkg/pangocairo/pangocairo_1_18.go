// Code generated by girgen. DO NOT EDIT.

package pangocairo

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/pango"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeFont = coreglib.Type(girepository.MustFind("PangoCairo", "Font").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeFont, F: marshalFont},
	})
}

// Font: PangoCairoFont is an interface exported by fonts for use with Cairo.
//
// The actual type of the font will depend on the particular font technology
// Cairo was compiled to use.
//
// Font wraps an interface. This means the user can get the
// underlying type by calling Cast().
type Font struct {
	_ [0]func() // equal guard
	pango.Font
}

var (
	_ pango.Fonter = (*Font)(nil)
)

// Fonter describes Font's interface methods.
type Fonter interface {
	coreglib.Objector

	baseFont() *Font
}

var _ Fonter = (*Font)(nil)

func wrapFont(obj *coreglib.Object) *Font {
	return &Font{
		Font: pango.Font{
			Object: obj,
		},
	}
}

func marshalFont(p uintptr) (interface{}, error) {
	return wrapFont(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *Font) baseFont() *Font {
	return v
}

// BaseFont returns the underlying base object.
func BaseFont(obj Fonter) *Font {
	return obj.baseFont()
}
