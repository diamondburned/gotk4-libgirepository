// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeNetworkService = coreglib.Type(girepository.MustFind("Gio", "NetworkService").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeNetworkService, F: marshalNetworkService},
	})
}

// NetworkServiceOverrides contains methods that are overridable.
type NetworkServiceOverrides struct {
}

func defaultNetworkServiceOverrides(v *NetworkService) NetworkServiceOverrides {
	return NetworkServiceOverrides{}
}

// NetworkService: like Address does with hostnames, Service provides an easy
// way to resolve a SRV record, and then attempt to connect to one of the hosts
// that implements that service, handling service priority/weighting, multiple
// IP addresses, and multiple address families.
//
// See Target for more information about SRV records, and see Connectable for an
// example of using the connectable interface.
type NetworkService struct {
	_ [0]func() // equal guard
	*coreglib.Object

	SocketConnectable
}

var (
	_ coreglib.Objector = (*NetworkService)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*NetworkService, *NetworkServiceClass, NetworkServiceOverrides](
		GTypeNetworkService,
		initNetworkServiceClass,
		wrapNetworkService,
		defaultNetworkServiceOverrides,
	)
}

func initNetworkServiceClass(gclass unsafe.Pointer, overrides NetworkServiceOverrides, classInitFunc func(*NetworkServiceClass)) {
	if classInitFunc != nil {
		class := (*NetworkServiceClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapNetworkService(obj *coreglib.Object) *NetworkService {
	return &NetworkService{
		Object: obj,
		SocketConnectable: SocketConnectable{
			Object: obj,
		},
	}
}

func marshalNetworkService(p uintptr) (interface{}, error) {
	return wrapNetworkService(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NetworkServiceClass: instance of this type is always passed by reference.
type NetworkServiceClass struct {
	*networkServiceClass
}

// networkServiceClass is the struct that's finalized.
type networkServiceClass struct {
	native unsafe.Pointer
}

var GIRInfoNetworkServiceClass = girepository.MustFind("Gio", "NetworkServiceClass")
