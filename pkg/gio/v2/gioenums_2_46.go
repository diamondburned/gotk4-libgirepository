// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"fmt"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeSocketListenerEvent = coreglib.Type(girepository.MustFind("Gio", "SocketListenerEvent").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeSocketListenerEvent, F: marshalSocketListenerEvent},
	})
}

// SocketListenerEvent describes an event occurring on a Listener. See the
// Listener::event signal for more details.
//
// Additional values may be added to this type in the future.
type SocketListenerEvent C.gint

const (
	// SocketListenerBinding: listener is about to bind a socket.
	SocketListenerBinding SocketListenerEvent = iota
	// SocketListenerBound: listener has bound a socket.
	SocketListenerBound
	// SocketListenerListening: listener is about to start listening on this
	// socket.
	SocketListenerListening
	// SocketListenerListened: listener is now listening on this socket.
	SocketListenerListened
)

func marshalSocketListenerEvent(p uintptr) (interface{}, error) {
	return SocketListenerEvent(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for SocketListenerEvent.
func (s SocketListenerEvent) String() string {
	switch s {
	case SocketListenerBinding:
		return "Binding"
	case SocketListenerBound:
		return "Bound"
	case SocketListenerListening:
		return "Listening"
	case SocketListenerListened:
		return "Listened"
	default:
		return fmt.Sprintf("SocketListenerEvent(%d)", s)
	}
}
