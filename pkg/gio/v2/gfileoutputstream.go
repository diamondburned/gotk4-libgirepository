// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeFileOutputStream = coreglib.Type(girepository.MustFind("Gio", "FileOutputStream").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeFileOutputStream, F: marshalFileOutputStream},
	})
}

// FileOutputStreamOverrides contains methods that are overridable.
type FileOutputStreamOverrides struct {
}

func defaultFileOutputStreamOverrides(v *FileOutputStream) FileOutputStreamOverrides {
	return FileOutputStreamOverrides{}
}

// FileOutputStream provides output streams that write their content to a file.
//
// GFileOutputStream implements #GSeekable, which allows the output stream to
// jump to arbitrary positions in the file and to truncate the file, provided
// the filesystem of the file supports these operations.
//
// To find the position of a file output stream, use g_seekable_tell(). To find
// out if a file output stream supports seeking, use g_seekable_can_seek().To
// position a file output stream, use g_seekable_seek(). To find out if a file
// output stream supports truncating, use g_seekable_can_truncate(). To truncate
// a file output stream, use g_seekable_truncate().
type FileOutputStream struct {
	_ [0]func() // equal guard
	OutputStream

	*coreglib.Object
	Seekable
}

var (
	_ OutputStreamer    = (*FileOutputStream)(nil)
	_ coreglib.Objector = (*FileOutputStream)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*FileOutputStream, *FileOutputStreamClass, FileOutputStreamOverrides](
		GTypeFileOutputStream,
		initFileOutputStreamClass,
		wrapFileOutputStream,
		defaultFileOutputStreamOverrides,
	)
}

func initFileOutputStreamClass(gclass unsafe.Pointer, overrides FileOutputStreamOverrides, classInitFunc func(*FileOutputStreamClass)) {
	if classInitFunc != nil {
		class := (*FileOutputStreamClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapFileOutputStream(obj *coreglib.Object) *FileOutputStream {
	return &FileOutputStream{
		OutputStream: OutputStream{
			Object: obj,
		},
		Object: obj,
		Seekable: Seekable{
			Object: obj,
		},
	}
}

func marshalFileOutputStream(p uintptr) (interface{}, error) {
	return wrapFileOutputStream(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// FileOutputStreamClass: instance of this type is always passed by reference.
type FileOutputStreamClass struct {
	*fileOutputStreamClass
}

// fileOutputStreamClass is the struct that's finalized.
type fileOutputStreamClass struct {
	native unsafe.Pointer
}

var GIRInfoFileOutputStreamClass = girepository.MustFind("Gio", "FileOutputStreamClass")
