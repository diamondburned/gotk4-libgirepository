// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gio2_NetworkMonitor_ConnectNetworkChanged(gpointer, gboolean, guintptr);
import "C"

// GType values.
var (
	GTypeNetworkMonitor = coreglib.Type(girepository.MustFind("Gio", "NetworkMonitor").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeNetworkMonitor, F: marshalNetworkMonitor},
	})
}

// NetworkMonitorOverrider contains methods that are overridable.
type NetworkMonitorOverrider interface {
}

// NetworkMonitor provides an easy-to-use cross-platform API for monitoring
// network connectivity. On Linux, the available implementations are based on
// the kernel's netlink interface and on NetworkManager.
//
// There is also an implementation for use inside Flatpak sandboxes.
//
// NetworkMonitor wraps an interface. This means the user can get the
// underlying type by calling Cast().
type NetworkMonitor struct {
	_ [0]func() // equal guard
	Initable
}

var ()

// NetworkMonitorrer describes NetworkMonitor's interface methods.
type NetworkMonitorrer interface {
	coreglib.Objector

	baseNetworkMonitor() *NetworkMonitor
}

var _ NetworkMonitorrer = (*NetworkMonitor)(nil)

func ifaceInitNetworkMonitorrer(gifacePtr, data C.gpointer) {
}

func wrapNetworkMonitor(obj *coreglib.Object) *NetworkMonitor {
	return &NetworkMonitor{
		Initable: Initable{
			Object: obj,
		},
	}
}

func marshalNetworkMonitor(p uintptr) (interface{}, error) {
	return wrapNetworkMonitor(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *NetworkMonitor) baseNetworkMonitor() *NetworkMonitor {
	return v
}

// BaseNetworkMonitor returns the underlying base object.
func BaseNetworkMonitor(obj NetworkMonitorrer) *NetworkMonitor {
	return obj.baseNetworkMonitor()
}

// ConnectNetworkChanged is emitted when the network configuration changes.
func (v *NetworkMonitor) ConnectNetworkChanged(f func(networkAvailable bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "network-changed", false, unsafe.Pointer(C._gotk4_gio2_NetworkMonitor_ConnectNetworkChanged), f)
}

// NetworkMonitorInterface: virtual function table for Monitor.
//
// An instance of this type is always passed by reference.
type NetworkMonitorInterface struct {
	*networkMonitorInterface
}

// networkMonitorInterface is the struct that's finalized.
type networkMonitorInterface struct {
	native unsafe.Pointer
}

var GIRInfoNetworkMonitorInterface = girepository.MustFind("Gio", "NetworkMonitorInterface")
