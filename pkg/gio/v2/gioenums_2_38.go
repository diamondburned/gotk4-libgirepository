// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"fmt"
	"strings"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeFileMeasureFlags = coreglib.Type(girepository.MustFind("Gio", "FileMeasureFlags").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeFileMeasureFlags, F: marshalFileMeasureFlags},
	})
}

// FileMeasureFlags flags that can be used with g_file_measure_disk_usage().
type FileMeasureFlags C.guint

const (
	// FileMeasureNone: no flags set.
	FileMeasureNone FileMeasureFlags = 0b0
	// FileMeasureReportAnyError: report any error encountered while traversing
	// the directory tree. Normally errors are only reported for the toplevel
	// file.
	FileMeasureReportAnyError FileMeasureFlags = 0b10
	// FileMeasureApparentSize: tally usage based on apparent file sizes.
	// Normally, the block-size is used, if available, as this is a more
	// accurate representation of disk space used. Compare with du
	// --apparent-size.
	FileMeasureApparentSize FileMeasureFlags = 0b100
	// FileMeasureNoXdev: do not cross mount point boundaries. Compare with du
	// -x.
	FileMeasureNoXdev FileMeasureFlags = 0b1000
)

func marshalFileMeasureFlags(p uintptr) (interface{}, error) {
	return FileMeasureFlags(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for FileMeasureFlags.
func (f FileMeasureFlags) String() string {
	if f == 0 {
		return "FileMeasureFlags(0)"
	}

	var builder strings.Builder
	builder.Grow(83)

	for f != 0 {
		next := f & (f - 1)
		bit := f - next

		switch bit {
		case FileMeasureNone:
			builder.WriteString("None|")
		case FileMeasureReportAnyError:
			builder.WriteString("ReportAnyError|")
		case FileMeasureApparentSize:
			builder.WriteString("ApparentSize|")
		case FileMeasureNoXdev:
			builder.WriteString("NoXdev|")
		default:
			builder.WriteString(fmt.Sprintf("FileMeasureFlags(0b%b)|", bit))
		}

		f = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if f contains other.
func (f FileMeasureFlags) Has(other FileMeasureFlags) bool {
	return (f & other) == other
}
