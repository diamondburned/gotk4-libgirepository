// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeProxyResolver = coreglib.Type(girepository.MustFind("Gio", "ProxyResolver").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeProxyResolver, F: marshalProxyResolver},
	})
}

// ProxyResolverOverrider contains methods that are overridable.
type ProxyResolverOverrider interface {
}

// ProxyResolver provides synchronous and asynchronous network proxy resolution.
// Resolver is used within Client through the method
// g_socket_connectable_proxy_enumerate().
//
// Implementations of Resolver based on libproxy and GNOME settings can be found
// in glib-networking. GIO comes with an implementation for use inside Flatpak
// portals.
//
// ProxyResolver wraps an interface. This means the user can get the
// underlying type by calling Cast().
type ProxyResolver struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*ProxyResolver)(nil)
)

// ProxyResolverer describes ProxyResolver's interface methods.
type ProxyResolverer interface {
	coreglib.Objector

	baseProxyResolver() *ProxyResolver
}

var _ ProxyResolverer = (*ProxyResolver)(nil)

func ifaceInitProxyResolverer(gifacePtr, data C.gpointer) {
}

func wrapProxyResolver(obj *coreglib.Object) *ProxyResolver {
	return &ProxyResolver{
		Object: obj,
	}
}

func marshalProxyResolver(p uintptr) (interface{}, error) {
	return wrapProxyResolver(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *ProxyResolver) baseProxyResolver() *ProxyResolver {
	return v
}

// BaseProxyResolver returns the underlying base object.
func BaseProxyResolver(obj ProxyResolverer) *ProxyResolver {
	return obj.baseProxyResolver()
}
