// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gio2_Resolver_ConnectReload(gpointer, guintptr);
import "C"

// GType values.
var (
	GTypeResolver = coreglib.Type(girepository.MustFind("Gio", "Resolver").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeResolver, F: marshalResolver},
	})
}

// ResolverOverrides contains methods that are overridable.
type ResolverOverrides struct {
}

func defaultResolverOverrides(v *Resolver) ResolverOverrides {
	return ResolverOverrides{}
}

// Resolver provides cancellable synchronous and asynchronous DNS resolution,
// for hostnames (g_resolver_lookup_by_address(), g_resolver_lookup_by_name()
// and their async variants) and SRV (service) records
// (g_resolver_lookup_service()).
//
// Address and Service provide wrappers around #GResolver functionality that
// also implement Connectable, making it easy to connect to a remote
// host/service.
type Resolver struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Resolver)(nil)
)

// Resolverer describes types inherited from class Resolver.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type Resolverer interface {
	coreglib.Objector
	baseResolver() *Resolver
}

var _ Resolverer = (*Resolver)(nil)

func init() {
	coreglib.RegisterClassInfo[*Resolver, *ResolverClass, ResolverOverrides](
		GTypeResolver,
		initResolverClass,
		wrapResolver,
		defaultResolverOverrides,
	)
}

func initResolverClass(gclass unsafe.Pointer, overrides ResolverOverrides, classInitFunc func(*ResolverClass)) {
	if classInitFunc != nil {
		class := (*ResolverClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapResolver(obj *coreglib.Object) *Resolver {
	return &Resolver{
		Object: obj,
	}
}

func marshalResolver(p uintptr) (interface{}, error) {
	return wrapResolver(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *Resolver) baseResolver() *Resolver {
	return v
}

// BaseResolver returns the underlying base object.
func BaseResolver(obj Resolverer) *Resolver {
	return obj.baseResolver()
}

// ConnectReload is emitted when the resolver notices that the system resolver
// configuration has changed.
func (v *Resolver) ConnectReload(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "reload", false, unsafe.Pointer(C._gotk4_gio2_Resolver_ConnectReload), f)
}

// ResolverClass: instance of this type is always passed by reference.
type ResolverClass struct {
	*resolverClass
}

// resolverClass is the struct that's finalized.
type resolverClass struct {
	native unsafe.Pointer
}

var GIRInfoResolverClass = girepository.MustFind("Gio", "ResolverClass")
