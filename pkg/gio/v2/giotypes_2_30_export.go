// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

//export _gotk4_gio2_DBusProxyTypeFunc
func _gotk4_gio2_DBusProxyTypeFunc(arg1 *C.void, arg2 *C.gchar, arg3 *C.gchar, arg4 C.gpointer) (cret C.GType) {
	var fn DBusProxyTypeFunc
	{
		v := gbox.Get(uintptr(arg4))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(DBusProxyTypeFunc)
	}

	var _manager *DBusObjectManagerClient // out
	var _objectPath string                // out
	var _interfaceName string             // out

	_manager = wrapDBusObjectManagerClient(coreglib.Take(unsafe.Pointer(arg1)))
	_objectPath = C.GoString((*C.gchar)(unsafe.Pointer(arg2)))
	if arg3 != nil {
		_interfaceName = C.GoString((*C.gchar)(unsafe.Pointer(arg3)))
	}

	gType := fn(_manager, _objectPath, _interfaceName)

	var _ coreglib.Type

	cret = C.GType(gType)

	return cret
}
