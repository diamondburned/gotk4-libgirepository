// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeInitable = coreglib.Type(girepository.MustFind("Gio", "Initable").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeInitable, F: marshalInitable},
	})
}

// InitableOverrider contains methods that are overridable.
type InitableOverrider interface {
}

// Initable is implemented by objects that can fail during initialization. If an
// object implements this interface then it must be initialized as the first
// thing after construction, either via g_initable_init() or
// g_async_initable_init_async() (the latter is only available if it also
// implements Initable).
//
// If the object is not initialized, or initialization returns with an error,
// then all operations on the object except g_object_ref() and g_object_unref()
// are considered to be invalid, and have undefined behaviour. They will often
// fail with g_critical() or g_warning(), but this must not be relied on.
//
// Users of objects implementing this are not intended to use the interface
// method directly, instead it will be used automatically in various ways. For C
// applications you generally just call g_initable_new() directly, or indirectly
// via a foo_thing_new() wrapper. This will call g_initable_init() under the
// cover, returning NULL and setting a #GError on failure (at which point the
// instance is unreferenced).
//
// For bindings in languages where the native constructor supports exceptions
// the binding could check for objects implementing GInitable during normal
// construction and automatically initialize them, throwing an exception on
// failure.
//
// Initable wraps an interface. This means the user can get the
// underlying type by calling Cast().
type Initable struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Initable)(nil)
)

// Initabler describes Initable's interface methods.
type Initabler interface {
	coreglib.Objector

	baseInitable() *Initable
}

var _ Initabler = (*Initable)(nil)

func ifaceInitInitabler(gifacePtr, data C.gpointer) {
}

func wrapInitable(obj *coreglib.Object) *Initable {
	return &Initable{
		Object: obj,
	}
}

func marshalInitable(p uintptr) (interface{}, error) {
	return wrapInitable(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *Initable) baseInitable() *Initable {
	return v
}

// BaseInitable returns the underlying base object.
func BaseInitable(obj Initabler) *Initable {
	return obj.baseInitable()
}

// InitableIface provides an interface for initializing object such that
// initialization may fail.
//
// An instance of this type is always passed by reference.
type InitableIface struct {
	*initableIface
}

// initableIface is the struct that's finalized.
type initableIface struct {
	native unsafe.Pointer
}

var GIRInfoInitableIface = girepository.MustFind("Gio", "InitableIface")
