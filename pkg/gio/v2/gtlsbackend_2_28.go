// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeTLSBackend = coreglib.Type(girepository.MustFind("Gio", "TlsBackend").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeTLSBackend, F: marshalTLSBackend},
	})
}

// TLSBackendOverrider contains methods that are overridable.
type TLSBackendOverrider interface {
}

// TLSBackend: TLS (Transport Layer Security, aka SSL) and DTLS backend.
//
// TLSBackend wraps an interface. This means the user can get the
// underlying type by calling Cast().
type TLSBackend struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*TLSBackend)(nil)
)

// TLSBackender describes TLSBackend's interface methods.
type TLSBackender interface {
	coreglib.Objector

	baseTLSBackend() *TLSBackend
}

var _ TLSBackender = (*TLSBackend)(nil)

func ifaceInitTLSBackender(gifacePtr, data C.gpointer) {
}

func wrapTLSBackend(obj *coreglib.Object) *TLSBackend {
	return &TLSBackend{
		Object: obj,
	}
}

func marshalTLSBackend(p uintptr) (interface{}, error) {
	return wrapTLSBackend(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *TLSBackend) baseTLSBackend() *TLSBackend {
	return v
}

// BaseTLSBackend returns the underlying base object.
func BaseTLSBackend(obj TLSBackender) *TLSBackend {
	return obj.baseTLSBackend()
}

// TLSBackendInterface provides an interface for describing TLS-related types.
//
// An instance of this type is always passed by reference.
type TLSBackendInterface struct {
	*tlsBackendInterface
}

// tlsBackendInterface is the struct that's finalized.
type tlsBackendInterface struct {
	native unsafe.Pointer
}

var GIRInfoTLSBackendInterface = girepository.MustFind("Gio", "TlsBackendInterface")
