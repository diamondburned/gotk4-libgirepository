// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeFileInfo = coreglib.Type(girepository.MustFind("Gio", "FileInfo").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeFileInfo, F: marshalFileInfo},
	})
}

// FILE_ATTRIBUTE_ACCESS_CAN_DELETE: key in the "access" namespace for checking
// deletion privileges. Corresponding AttributeType is
// G_FILE_ATTRIBUTE_TYPE_BOOLEAN. This attribute will be TRUE if the user is
// able to delete the file.
const FILE_ATTRIBUTE_ACCESS_CAN_DELETE = "access::can-delete"

// FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE: key in the "access" namespace for getting
// execution privileges. Corresponding AttributeType is
// G_FILE_ATTRIBUTE_TYPE_BOOLEAN. This attribute will be TRUE if the user is
// able to execute the file.
const FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE = "access::can-execute"

// FILE_ATTRIBUTE_ACCESS_CAN_READ: key in the "access" namespace for getting
// read privileges. Corresponding AttributeType is
// G_FILE_ATTRIBUTE_TYPE_BOOLEAN. This attribute will be TRUE if the user is
// able to read the file.
const FILE_ATTRIBUTE_ACCESS_CAN_READ = "access::can-read"

// FILE_ATTRIBUTE_ACCESS_CAN_RENAME: key in the "access" namespace for checking
// renaming privileges. Corresponding AttributeType is
// G_FILE_ATTRIBUTE_TYPE_BOOLEAN. This attribute will be TRUE if the user is
// able to rename the file.
const FILE_ATTRIBUTE_ACCESS_CAN_RENAME = "access::can-rename"

// FILE_ATTRIBUTE_ACCESS_CAN_TRASH: key in the "access" namespace for checking
// trashing privileges. Corresponding AttributeType is
// G_FILE_ATTRIBUTE_TYPE_BOOLEAN. This attribute will be TRUE if the user is
// able to move the file to the trash.
const FILE_ATTRIBUTE_ACCESS_CAN_TRASH = "access::can-trash"

// FILE_ATTRIBUTE_ACCESS_CAN_WRITE: key in the "access" namespace for getting
// write privileges. Corresponding AttributeType is
// G_FILE_ATTRIBUTE_TYPE_BOOLEAN. This attribute will be TRUE if the user is
// able to write to the file.
const FILE_ATTRIBUTE_ACCESS_CAN_WRITE = "access::can-write"

// FILE_ATTRIBUTE_DOS_IS_ARCHIVE: key in the "dos" namespace for checking if the
// file's archive flag is set. This attribute is TRUE if the archive flag is
// set. This attribute is only available for DOS file systems. Corresponding
// AttributeType is G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
const FILE_ATTRIBUTE_DOS_IS_ARCHIVE = "dos::is-archive"

// FILE_ATTRIBUTE_DOS_IS_SYSTEM: key in the "dos" namespace for checking if the
// file's backup flag is set. This attribute is TRUE if the backup flag is set.
// This attribute is only available for DOS file systems. Corresponding
// AttributeType is G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
const FILE_ATTRIBUTE_DOS_IS_SYSTEM = "dos::is-system"

// FILE_ATTRIBUTE_ETAG_VALUE: key in the "etag" namespace for getting the value
// of the file's entity tag. Corresponding AttributeType is
// G_FILE_ATTRIBUTE_TYPE_STRING.
const FILE_ATTRIBUTE_ETAG_VALUE = "etag::value"

// FILE_ATTRIBUTE_FILESYSTEM_FREE: key in the "filesystem" namespace for getting
// the number of bytes of free space left on the file system. Corresponding
// AttributeType is G_FILE_ATTRIBUTE_TYPE_UINT64.
const FILE_ATTRIBUTE_FILESYSTEM_FREE = "filesystem::free"

// FILE_ATTRIBUTE_FILESYSTEM_READONLY: key in the "filesystem" namespace for
// checking if the file system is read only. Is set to TRUE if the file system
// is read only. Corresponding AttributeType is G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
const FILE_ATTRIBUTE_FILESYSTEM_READONLY = "filesystem::readonly"

// FILE_ATTRIBUTE_FILESYSTEM_REMOTE: key in the "filesystem" namespace for
// checking if the file system is remote. Is set to TRUE if the file system is
// remote. Corresponding AttributeType is G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
const FILE_ATTRIBUTE_FILESYSTEM_REMOTE = "filesystem::remote"

// FILE_ATTRIBUTE_FILESYSTEM_SIZE: key in the "filesystem" namespace for getting
// the total size (in bytes) of the file system, used in
// g_file_query_filesystem_info(). Corresponding AttributeType is
// G_FILE_ATTRIBUTE_TYPE_UINT64.
const FILE_ATTRIBUTE_FILESYSTEM_SIZE = "filesystem::size"

// FILE_ATTRIBUTE_FILESYSTEM_TYPE: key in the "filesystem" namespace for getting
// the file system's type. Corresponding AttributeType is
// G_FILE_ATTRIBUTE_TYPE_STRING.
const FILE_ATTRIBUTE_FILESYSTEM_TYPE = "filesystem::type"

// FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW: key in the "filesystem" namespace for
// hinting a file manager application whether it should preview (e.g. thumbnail)
// files on the file system. The value for this key contain a PreviewType.
const FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW = "filesystem::use-preview"

// FILE_ATTRIBUTE_GVFS_BACKEND: key in the "gvfs" namespace that gets the name
// of the current GVFS backend in use. Corresponding AttributeType is
// G_FILE_ATTRIBUTE_TYPE_STRING.
const FILE_ATTRIBUTE_GVFS_BACKEND = "gvfs::backend"

// FILE_ATTRIBUTE_ID_FILE: key in the "id" namespace for getting a file
// identifier. Corresponding AttributeType is G_FILE_ATTRIBUTE_TYPE_STRING. An
// example use would be during listing files, to avoid recursive directory
// scanning.
const FILE_ATTRIBUTE_ID_FILE = "id::file"

// FILE_ATTRIBUTE_ID_FILESYSTEM: key in the "id" namespace for getting the file
// system identifier. Corresponding AttributeType is
// G_FILE_ATTRIBUTE_TYPE_STRING. An example use would be during drag and drop to
// see if the source and target are on the same filesystem (default to move) or
// not (default to copy).
const FILE_ATTRIBUTE_ID_FILESYSTEM = "id::filesystem"

// FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT: key in the "mountable" namespace for
// checking if a file (of type G_FILE_TYPE_MOUNTABLE) can be ejected.
// Corresponding AttributeType is G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
const FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT = "mountable::can-eject"

// FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT: key in the "mountable" namespace for
// checking if a file (of type G_FILE_TYPE_MOUNTABLE) is mountable.
// Corresponding AttributeType is G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
const FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT = "mountable::can-mount"

// FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT: key in the "mountable" namespace for
// checking if a file (of type G_FILE_TYPE_MOUNTABLE) is unmountable.
// Corresponding AttributeType is G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
const FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT = "mountable::can-unmount"

// FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI: key in the "mountable" namespace for
// getting the HAL UDI for the mountable file. Corresponding AttributeType is
// G_FILE_ATTRIBUTE_TYPE_STRING.
const FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI = "mountable::hal-udi"

// FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE: key in the "mountable" namespace for
// getting the unix device. Corresponding AttributeType is
// G_FILE_ATTRIBUTE_TYPE_UINT32.
const FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE = "mountable::unix-device"

// FILE_ATTRIBUTE_OWNER_GROUP: key in the "owner" namespace for getting the file
// owner's group. Corresponding AttributeType is G_FILE_ATTRIBUTE_TYPE_STRING.
const FILE_ATTRIBUTE_OWNER_GROUP = "owner::group"

// FILE_ATTRIBUTE_OWNER_USER: key in the "owner" namespace for getting the user
// name of the file's owner. Corresponding AttributeType is
// G_FILE_ATTRIBUTE_TYPE_STRING.
const FILE_ATTRIBUTE_OWNER_USER = "owner::user"

// FILE_ATTRIBUTE_OWNER_USER_REAL: key in the "owner" namespace for getting the
// real name of the user that owns the file. Corresponding AttributeType is
// G_FILE_ATTRIBUTE_TYPE_STRING.
const FILE_ATTRIBUTE_OWNER_USER_REAL = "owner::user-real"

// FILE_ATTRIBUTE_SELINUX_CONTEXT: key in the "selinux" namespace for getting
// the file's SELinux context. Corresponding AttributeType is
// G_FILE_ATTRIBUTE_TYPE_STRING. Note that this attribute is only available if
// GLib has been built with SELinux support.
const FILE_ATTRIBUTE_SELINUX_CONTEXT = "selinux::context"

// FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE: key in the "standard" namespace for
// getting the content type of the file. Corresponding AttributeType is
// G_FILE_ATTRIBUTE_TYPE_STRING. The value for this key should contain a valid
// content type.
const FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE = "standard::content-type"

// FILE_ATTRIBUTE_STANDARD_COPY_NAME: key in the "standard" namespace for
// getting the copy name of the file. The copy name is an optional version of
// the name. If available it's always in UTF8, and corresponds directly to the
// original filename (only transcoded to UTF8). This is useful if you want to
// copy the file to another filesystem that might have a different encoding. If
// the filename is not a valid string in the encoding selected for the
// filesystem it is in then the copy name will not be set.
//
// Corresponding AttributeType is G_FILE_ATTRIBUTE_TYPE_STRING.
const FILE_ATTRIBUTE_STANDARD_COPY_NAME = "standard::copy-name"

// FILE_ATTRIBUTE_STANDARD_DESCRIPTION: key in the "standard" namespace for
// getting the description of the file. The description is a utf8 string that
// describes the file, generally containing the filename, but can also contain
// further information. Example descriptions could be "filename (on hostname)"
// for a remote file or "filename (in trash)" for a file in the trash. This is
// useful for instance as the window title when displaying a directory or for a
// bookmarks menu.
//
// Corresponding AttributeType is G_FILE_ATTRIBUTE_TYPE_STRING.
const FILE_ATTRIBUTE_STANDARD_DESCRIPTION = "standard::description"

// FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME: key in the "standard" namespace for
// getting the display name of the file. A display name is guaranteed to be in
// UTF-8 and can thus be displayed in the UI. It is guaranteed to be set on
// every file. Corresponding AttributeType is G_FILE_ATTRIBUTE_TYPE_STRING.
const FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME = "standard::display-name"

// FILE_ATTRIBUTE_STANDARD_EDIT_NAME: key in the "standard" namespace for edit
// name of the file. An edit name is similar to the display name, but it is
// meant to be used when you want to rename the file in the UI. The display name
// might contain information you don't want in the new filename (such as
// "(invalid unicode)" if the filename was in an invalid encoding).
//
// Corresponding AttributeType is G_FILE_ATTRIBUTE_TYPE_STRING.
const FILE_ATTRIBUTE_STANDARD_EDIT_NAME = "standard::edit-name"

// FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE: key in the "standard" namespace
// for getting the fast content type. The fast content type isn't as reliable as
// the regular one, as it only uses the filename to guess it, but it is faster
// to calculate than the regular content type. Corresponding AttributeType is
// G_FILE_ATTRIBUTE_TYPE_STRING.
const FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE = "standard::fast-content-type"

// FILE_ATTRIBUTE_STANDARD_ICON: key in the "standard" namespace for getting the
// icon for the file. Corresponding AttributeType is
// G_FILE_ATTRIBUTE_TYPE_OBJECT. The value for this key should contain a #GIcon.
const FILE_ATTRIBUTE_STANDARD_ICON = "standard::icon"

// FILE_ATTRIBUTE_STANDARD_IS_BACKUP: key in the "standard" namespace for
// checking if a file is a backup file. Corresponding AttributeType is
// G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
const FILE_ATTRIBUTE_STANDARD_IS_BACKUP = "standard::is-backup"

// FILE_ATTRIBUTE_STANDARD_IS_HIDDEN: key in the "standard" namespace for
// checking if a file is hidden. Corresponding AttributeType is
// G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
const FILE_ATTRIBUTE_STANDARD_IS_HIDDEN = "standard::is-hidden"

// FILE_ATTRIBUTE_STANDARD_IS_SYMLINK: key in the "standard" namespace for
// checking if the file is a symlink. Typically the actual type is something
// else, if we followed the symlink to get the type. On Windows NTFS mountpoints
// are considered to be symlinks as well. Corresponding AttributeType is
// G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
const FILE_ATTRIBUTE_STANDARD_IS_SYMLINK = "standard::is-symlink"

// FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL: key in the "standard" namespace for
// checking if a file is virtual. Corresponding AttributeType is
// G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
const FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL = "standard::is-virtual"

// FILE_ATTRIBUTE_STANDARD_NAME: key in the "standard" namespace for getting the
// name of the file. The name is the on-disk filename which may not be in any
// known encoding, and can thus not be generally displayed as is. It is
// guaranteed to be set on every file. Use FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME
// if you need to display the name in a user interface. Corresponding
// AttributeType is G_FILE_ATTRIBUTE_TYPE_BYTE_STRING.
const FILE_ATTRIBUTE_STANDARD_NAME = "standard::name"

// FILE_ATTRIBUTE_STANDARD_SIZE: key in the "standard" namespace for getting the
// file's size (in bytes). Corresponding AttributeType is
// G_FILE_ATTRIBUTE_TYPE_UINT64.
const FILE_ATTRIBUTE_STANDARD_SIZE = "standard::size"

// FILE_ATTRIBUTE_STANDARD_SORT_ORDER: key in the "standard" namespace for
// setting the sort order of a file. Corresponding AttributeType is
// G_FILE_ATTRIBUTE_TYPE_INT32. An example use would be in file managers, which
// would use this key to set the order files are displayed. Files with smaller
// sort order should be sorted first, and files without sort order as if sort
// order was zero.
const FILE_ATTRIBUTE_STANDARD_SORT_ORDER = "standard::sort-order"

// FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET: key in the "standard" namespace for
// getting the symlink target, if the file is a symlink. Corresponding
// AttributeType is G_FILE_ATTRIBUTE_TYPE_BYTE_STRING.
const FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET = "standard::symlink-target"

// FILE_ATTRIBUTE_STANDARD_TARGET_URI: key in the "standard" namespace for
// getting the target URI for the file, in the case of G_FILE_TYPE_SHORTCUT or
// G_FILE_TYPE_MOUNTABLE files. Corresponding AttributeType is
// G_FILE_ATTRIBUTE_TYPE_STRING.
const FILE_ATTRIBUTE_STANDARD_TARGET_URI = "standard::target-uri"

// FILE_ATTRIBUTE_STANDARD_TYPE: key in the "standard" namespace for storing
// file types. Corresponding AttributeType is G_FILE_ATTRIBUTE_TYPE_UINT32. The
// value for this key should contain a Type.
const FILE_ATTRIBUTE_STANDARD_TYPE = "standard::type"

// FILE_ATTRIBUTE_THUMBNAILING_FAILED: key in the "thumbnail" namespace for
// checking if thumbnailing failed. This attribute is TRUE if thumbnailing
// failed. Corresponding AttributeType is G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
const FILE_ATTRIBUTE_THUMBNAILING_FAILED = "thumbnail::failed"

// FILE_ATTRIBUTE_THUMBNAIL_PATH: key in the "thumbnail" namespace for getting
// the path to the thumbnail image. Corresponding AttributeType is
// G_FILE_ATTRIBUTE_TYPE_BYTE_STRING.
const FILE_ATTRIBUTE_THUMBNAIL_PATH = "thumbnail::path"

// FILE_ATTRIBUTE_TIME_ACCESS: key in the "time" namespace for getting the time
// the file was last accessed. Corresponding AttributeType is
// G_FILE_ATTRIBUTE_TYPE_UINT64, and contains the time since the file was last
// accessed, in seconds since the UNIX epoch.
const FILE_ATTRIBUTE_TIME_ACCESS = "time::access"

// FILE_ATTRIBUTE_TIME_ACCESS_USEC: key in the "time" namespace for getting the
// microseconds of the time the file was last accessed. This should be used in
// conjunction with FILE_ATTRIBUTE_TIME_ACCESS. Corresponding AttributeType is
// G_FILE_ATTRIBUTE_TYPE_UINT32.
const FILE_ATTRIBUTE_TIME_ACCESS_USEC = "time::access-usec"

// FILE_ATTRIBUTE_TIME_CHANGED: key in the "time" namespace for getting the time
// the file was last changed. Corresponding AttributeType is
// G_FILE_ATTRIBUTE_TYPE_UINT64, and contains the time since the file was last
// changed, in seconds since the UNIX epoch.
//
// This corresponds to the traditional UNIX ctime.
const FILE_ATTRIBUTE_TIME_CHANGED = "time::changed"

// FILE_ATTRIBUTE_TIME_CHANGED_USEC: key in the "time" namespace for getting the
// microseconds of the time the file was last changed. This should be used in
// conjunction with FILE_ATTRIBUTE_TIME_CHANGED. Corresponding AttributeType is
// G_FILE_ATTRIBUTE_TYPE_UINT32.
const FILE_ATTRIBUTE_TIME_CHANGED_USEC = "time::changed-usec"

// FILE_ATTRIBUTE_TIME_CREATED: key in the "time" namespace for getting the time
// the file was created. Corresponding AttributeType is
// G_FILE_ATTRIBUTE_TYPE_UINT64, and contains the time since the file was
// created, in seconds since the UNIX epoch.
//
// This may correspond to Linux stx_btime, FreeBSD st_birthtim, NetBSD
// st_birthtime or NTFS ctime.
const FILE_ATTRIBUTE_TIME_CREATED = "time::created"

// FILE_ATTRIBUTE_TIME_CREATED_USEC: key in the "time" namespace for getting the
// microseconds of the time the file was created. This should be used in
// conjunction with FILE_ATTRIBUTE_TIME_CREATED. Corresponding AttributeType is
// G_FILE_ATTRIBUTE_TYPE_UINT32.
const FILE_ATTRIBUTE_TIME_CREATED_USEC = "time::created-usec"

// FILE_ATTRIBUTE_TIME_MODIFIED: key in the "time" namespace for getting the
// time the file was last modified. Corresponding AttributeType is
// G_FILE_ATTRIBUTE_TYPE_UINT64, and contains the time since the file was
// modified, in seconds since the UNIX epoch.
const FILE_ATTRIBUTE_TIME_MODIFIED = "time::modified"

// FILE_ATTRIBUTE_TIME_MODIFIED_USEC: key in the "time" namespace for getting
// the microseconds of the time the file was last modified. This should be used
// in conjunction with FILE_ATTRIBUTE_TIME_MODIFIED. Corresponding AttributeType
// is G_FILE_ATTRIBUTE_TYPE_UINT32.
const FILE_ATTRIBUTE_TIME_MODIFIED_USEC = "time::modified-usec"

// FILE_ATTRIBUTE_TRASH_ITEM_COUNT: key in the "trash" namespace. When requested
// against trash:/// returns the number of (toplevel) items in the trash folder.
// Corresponding AttributeType is G_FILE_ATTRIBUTE_TYPE_UINT32.
const FILE_ATTRIBUTE_TRASH_ITEM_COUNT = "trash::item-count"

// FILE_ATTRIBUTE_UNIX_BLOCKS: key in the "unix" namespace for getting the
// number of blocks allocated for the file. This attribute is only available for
// UNIX file systems. Corresponding AttributeType is
// G_FILE_ATTRIBUTE_TYPE_UINT64.
const FILE_ATTRIBUTE_UNIX_BLOCKS = "unix::blocks"

// FILE_ATTRIBUTE_UNIX_BLOCK_SIZE: key in the "unix" namespace for getting the
// block size for the file system. This attribute is only available for UNIX
// file systems. Corresponding AttributeType is G_FILE_ATTRIBUTE_TYPE_UINT32.
const FILE_ATTRIBUTE_UNIX_BLOCK_SIZE = "unix::block-size"

// FILE_ATTRIBUTE_UNIX_DEVICE: key in the "unix" namespace for getting the
// device id of the device the file is located on (see stat() documentation).
// This attribute is only available for UNIX file systems. Corresponding
// AttributeType is G_FILE_ATTRIBUTE_TYPE_UINT32.
const FILE_ATTRIBUTE_UNIX_DEVICE = "unix::device"

// FILE_ATTRIBUTE_UNIX_GID: key in the "unix" namespace for getting the group ID
// for the file. This attribute is only available for UNIX file systems.
// Corresponding AttributeType is G_FILE_ATTRIBUTE_TYPE_UINT32.
const FILE_ATTRIBUTE_UNIX_GID = "unix::gid"

// FILE_ATTRIBUTE_UNIX_INODE: key in the "unix" namespace for getting the inode
// of the file. This attribute is only available for UNIX file systems.
// Corresponding AttributeType is G_FILE_ATTRIBUTE_TYPE_UINT64.
const FILE_ATTRIBUTE_UNIX_INODE = "unix::inode"

// FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT: key in the "unix" namespace for checking
// if the file represents a UNIX mount point. This attribute is TRUE if the file
// is a UNIX mount point. Since 2.58, / is considered to be a mount point. This
// attribute is only available for UNIX file systems. Corresponding
// AttributeType is G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
const FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT = "unix::is-mountpoint"

// FILE_ATTRIBUTE_UNIX_MODE: key in the "unix" namespace for getting the mode of
// the file (e.g. whether the file is a regular file, symlink, etc). See the
// documentation for lstat(): this attribute is equivalent to the st_mode member
// of struct stat, and includes both the file type and permissions. This
// attribute is only available for UNIX file systems. Corresponding
// AttributeType is G_FILE_ATTRIBUTE_TYPE_UINT32.
const FILE_ATTRIBUTE_UNIX_MODE = "unix::mode"

// FILE_ATTRIBUTE_UNIX_NLINK: key in the "unix" namespace for getting the number
// of hard links for a file. See lstat() documentation. This attribute is only
// available for UNIX file systems. Corresponding AttributeType is
// G_FILE_ATTRIBUTE_TYPE_UINT32.
const FILE_ATTRIBUTE_UNIX_NLINK = "unix::nlink"

// FILE_ATTRIBUTE_UNIX_RDEV: key in the "unix" namespace for getting the device
// ID for the file (if it is a special file). See lstat() documentation. This
// attribute is only available for UNIX file systems. Corresponding
// AttributeType is G_FILE_ATTRIBUTE_TYPE_UINT32.
const FILE_ATTRIBUTE_UNIX_RDEV = "unix::rdev"

// FILE_ATTRIBUTE_UNIX_UID: key in the "unix" namespace for getting the user ID
// for the file. This attribute is only available for UNIX file systems.
// Corresponding AttributeType is G_FILE_ATTRIBUTE_TYPE_UINT32.
const FILE_ATTRIBUTE_UNIX_UID = "unix::uid"

// FileInfo: functionality for manipulating basic metadata for files. Info
// implements methods for getting information that all files should contain, and
// allows for manipulation of extended attributes.
//
// See [GFileAttribute][gio-GFileAttribute] for more information on how GIO
// handles file attributes.
//
// To obtain a Info for a #GFile, use g_file_query_info() (or its async
// variant). To obtain a Info for a file input or output stream, use
// g_file_input_stream_query_info() or g_file_output_stream_query_info() (or
// their async variants).
//
// To change the actual attributes of a file, you should then set the attribute
// in the Info and call g_file_set_attributes_from_info() or
// g_file_set_attributes_async() on a GFile.
//
// However, not all attributes can be changed in the file. For instance, the
// actual size of a file cannot be changed via g_file_info_set_size(). You may
// call g_file_query_settable_attributes() and
// g_file_query_writable_namespaces() to discover the settable attributes of a
// particular file at runtime.
//
// AttributeMatcher allows for searching through a Info for attributes.
type FileInfo struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*FileInfo)(nil)
)

func wrapFileInfo(obj *coreglib.Object) *FileInfo {
	return &FileInfo{
		Object: obj,
	}
}

func marshalFileInfo(p uintptr) (interface{}, error) {
	return wrapFileInfo(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
