// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeDBusInterface = coreglib.Type(girepository.MustFind("Gio", "DBusInterface").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDBusInterface, F: marshalDBusInterface},
	})
}

// DBusInterfaceOverrider contains methods that are overridable.
type DBusInterfaceOverrider interface {
}

// DBusInterface type is the base type for D-Bus interfaces both on the service
// side (see BusInterfaceSkeleton) and client side (see BusProxy).
//
// DBusInterface wraps an interface. This means the user can get the
// underlying type by calling Cast().
type DBusInterface struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*DBusInterface)(nil)
)

// DBusInterfacer describes DBusInterface's interface methods.
type DBusInterfacer interface {
	coreglib.Objector

	baseDBusInterface() *DBusInterface
}

var _ DBusInterfacer = (*DBusInterface)(nil)

func ifaceInitDBusInterfacer(gifacePtr, data C.gpointer) {
}

func wrapDBusInterface(obj *coreglib.Object) *DBusInterface {
	return &DBusInterface{
		Object: obj,
	}
}

func marshalDBusInterface(p uintptr) (interface{}, error) {
	return wrapDBusInterface(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *DBusInterface) baseDBusInterface() *DBusInterface {
	return v
}

// BaseDBusInterface returns the underlying base object.
func BaseDBusInterface(obj DBusInterfacer) *DBusInterface {
	return obj.baseDBusInterface()
}

// DBusInterfaceIface: base type for D-Bus interfaces.
//
// An instance of this type is always passed by reference.
type DBusInterfaceIface struct {
	*dBusInterfaceIface
}

// dBusInterfaceIface is the struct that's finalized.
type dBusInterfaceIface struct {
	native unsafe.Pointer
}

var GIRInfoDBusInterfaceIface = girepository.MustFind("Gio", "DBusInterfaceIface")
