// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeTCPConnection = coreglib.Type(girepository.MustFind("Gio", "TcpConnection").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeTCPConnection, F: marshalTCPConnection},
	})
}

// TCPConnectionOverrides contains methods that are overridable.
type TCPConnectionOverrides struct {
}

func defaultTCPConnectionOverrides(v *TCPConnection) TCPConnectionOverrides {
	return TCPConnectionOverrides{}
}

// TCPConnection: this is the subclass of Connection that is created for TCP/IP
// sockets.
type TCPConnection struct {
	_ [0]func() // equal guard
	SocketConnection
}

var (
	_ IOStreamer = (*TCPConnection)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*TCPConnection, *TCPConnectionClass, TCPConnectionOverrides](
		GTypeTCPConnection,
		initTCPConnectionClass,
		wrapTCPConnection,
		defaultTCPConnectionOverrides,
	)
}

func initTCPConnectionClass(gclass unsafe.Pointer, overrides TCPConnectionOverrides, classInitFunc func(*TCPConnectionClass)) {
	if classInitFunc != nil {
		class := (*TCPConnectionClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapTCPConnection(obj *coreglib.Object) *TCPConnection {
	return &TCPConnection{
		SocketConnection: SocketConnection{
			IOStream: IOStream{
				Object: obj,
			},
		},
	}
}

func marshalTCPConnection(p uintptr) (interface{}, error) {
	return wrapTCPConnection(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
