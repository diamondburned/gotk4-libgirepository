// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeActionMap = coreglib.Type(girepository.MustFind("Gio", "ActionMap").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeActionMap, F: marshalActionMap},
	})
}

// ActionMapOverrider contains methods that are overridable.
type ActionMapOverrider interface {
}

// ActionMap interface is implemented by Group implementations that operate by
// containing a number of named #GAction instances, such as ActionGroup.
//
// One useful application of this interface is to map the names of actions from
// various action groups to unique, prefixed names (e.g. by prepending "app." or
// "win."). This is the motivation for the 'Map' part of the interface name.
//
// ActionMap wraps an interface. This means the user can get the
// underlying type by calling Cast().
type ActionMap struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*ActionMap)(nil)
)

// ActionMapper describes ActionMap's interface methods.
type ActionMapper interface {
	coreglib.Objector

	baseActionMap() *ActionMap
}

var _ ActionMapper = (*ActionMap)(nil)

func ifaceInitActionMapper(gifacePtr, data C.gpointer) {
}

func wrapActionMap(obj *coreglib.Object) *ActionMap {
	return &ActionMap{
		Object: obj,
	}
}

func marshalActionMap(p uintptr) (interface{}, error) {
	return wrapActionMap(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *ActionMap) baseActionMap() *ActionMap {
	return v
}

// BaseActionMap returns the underlying base object.
func BaseActionMap(obj ActionMapper) *ActionMap {
	return obj.baseActionMap()
}

// ActionMapInterface: virtual function table for Map.
//
// An instance of this type is always passed by reference.
type ActionMapInterface struct {
	*actionMapInterface
}

// actionMapInterface is the struct that's finalized.
type actionMapInterface struct {
	native unsafe.Pointer
}

var GIRInfoActionMapInterface = girepository.MustFind("Gio", "ActionMapInterface")
