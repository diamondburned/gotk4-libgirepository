// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeSocketClient = coreglib.Type(girepository.MustFind("Gio", "SocketClient").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeSocketClient, F: marshalSocketClient},
	})
}

// SocketClientOverrides contains methods that are overridable.
type SocketClientOverrides struct {
}

func defaultSocketClientOverrides(v *SocketClient) SocketClientOverrides {
	return SocketClientOverrides{}
}

// SocketClient is a lightweight high-level utility class for connecting to a
// network host using a connection oriented socket type.
//
// You create a Client object, set any options you want, and then call a sync or
// async connect operation, which returns a Connection subclass on success.
//
// The type of the Connection object returned depends on the type of the
// underlying socket that is in use. For instance, for a TCP/IP connection it
// will be a Connection.
//
// As Client is a lightweight object, you don't need to cache it. You can just
// create a new one any time you need one.
type SocketClient struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*SocketClient)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*SocketClient, *SocketClientClass, SocketClientOverrides](
		GTypeSocketClient,
		initSocketClientClass,
		wrapSocketClient,
		defaultSocketClientOverrides,
	)
}

func initSocketClientClass(gclass unsafe.Pointer, overrides SocketClientOverrides, classInitFunc func(*SocketClientClass)) {
	if classInitFunc != nil {
		class := (*SocketClientClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapSocketClient(obj *coreglib.Object) *SocketClient {
	return &SocketClient{
		Object: obj,
	}
}

func marshalSocketClient(p uintptr) (interface{}, error) {
	return wrapSocketClient(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
