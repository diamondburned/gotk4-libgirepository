// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeTLSFileDatabase = coreglib.Type(girepository.MustFind("Gio", "TlsFileDatabase").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeTLSFileDatabase, F: marshalTLSFileDatabase},
	})
}

// TLSFileDatabaseOverrider contains methods that are overridable.
type TLSFileDatabaseOverrider interface {
}

// TLSFileDatabase is implemented by Database objects which load their
// certificate information from a file. It is an interface which TLS library
// specific subtypes implement.
//
// TLSFileDatabase wraps an interface. This means the user can get the
// underlying type by calling Cast().
type TLSFileDatabase struct {
	_ [0]func() // equal guard
	TLSDatabase
}

var (
	_ TLSDatabaser = (*TLSFileDatabase)(nil)
)

// TLSFileDatabaser describes TLSFileDatabase's interface methods.
type TLSFileDatabaser interface {
	coreglib.Objector

	baseTLSFileDatabase() *TLSFileDatabase
}

var _ TLSFileDatabaser = (*TLSFileDatabase)(nil)

func ifaceInitTLSFileDatabaser(gifacePtr, data C.gpointer) {
}

func wrapTLSFileDatabase(obj *coreglib.Object) *TLSFileDatabase {
	return &TLSFileDatabase{
		TLSDatabase: TLSDatabase{
			Object: obj,
		},
	}
}

func marshalTLSFileDatabase(p uintptr) (interface{}, error) {
	return wrapTLSFileDatabase(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *TLSFileDatabase) baseTLSFileDatabase() *TLSFileDatabase {
	return v
}

// BaseTLSFileDatabase returns the underlying base object.
func BaseTLSFileDatabase(obj TLSFileDatabaser) *TLSFileDatabase {
	return obj.baseTLSFileDatabase()
}
