// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeBufferedOutputStream = coreglib.Type(girepository.MustFind("Gio", "BufferedOutputStream").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeBufferedOutputStream, F: marshalBufferedOutputStream},
	})
}

// BufferedOutputStreamOverrides contains methods that are overridable.
type BufferedOutputStreamOverrides struct {
}

func defaultBufferedOutputStreamOverrides(v *BufferedOutputStream) BufferedOutputStreamOverrides {
	return BufferedOutputStreamOverrides{}
}

// BufferedOutputStream: buffered output stream implements OutputStream and
// provides for buffered writes.
//
// By default, OutputStream's buffer size is set at 4 kilobytes.
//
// To create a buffered output stream, use g_buffered_output_stream_new(), or
// g_buffered_output_stream_new_sized() to specify the buffer's size at
// construction.
//
// To get the size of a buffer within a buffered input stream, use
// g_buffered_output_stream_get_buffer_size(). To change the size of a buffered
// output stream's buffer, use g_buffered_output_stream_set_buffer_size(). Note
// that the buffer's size cannot be reduced below the size of the data within
// the buffer.
type BufferedOutputStream struct {
	_ [0]func() // equal guard
	FilterOutputStream

	Seekable
}

var (
	_ FilterOutputStreamer = (*BufferedOutputStream)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*BufferedOutputStream, *BufferedOutputStreamClass, BufferedOutputStreamOverrides](
		GTypeBufferedOutputStream,
		initBufferedOutputStreamClass,
		wrapBufferedOutputStream,
		defaultBufferedOutputStreamOverrides,
	)
}

func initBufferedOutputStreamClass(gclass unsafe.Pointer, overrides BufferedOutputStreamOverrides, classInitFunc func(*BufferedOutputStreamClass)) {
	if classInitFunc != nil {
		class := (*BufferedOutputStreamClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapBufferedOutputStream(obj *coreglib.Object) *BufferedOutputStream {
	return &BufferedOutputStream{
		FilterOutputStream: FilterOutputStream{
			OutputStream: OutputStream{
				Object: obj,
			},
		},
		Seekable: Seekable{
			Object: obj,
		},
	}
}

func marshalBufferedOutputStream(p uintptr) (interface{}, error) {
	return wrapBufferedOutputStream(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// BufferedOutputStreamClass: instance of this type is always passed by
// reference.
type BufferedOutputStreamClass struct {
	*bufferedOutputStreamClass
}

// bufferedOutputStreamClass is the struct that's finalized.
type bufferedOutputStreamClass struct {
	native unsafe.Pointer
}

var GIRInfoBufferedOutputStreamClass = girepository.MustFind("Gio", "BufferedOutputStreamClass")
