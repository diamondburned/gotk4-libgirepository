// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gio2_DBusObject_ConnectInterfaceRemoved(gpointer, void*, guintptr);
// extern void _gotk4_gio2_DBusObject_ConnectInterfaceAdded(gpointer, void*, guintptr);
import "C"

// GType values.
var (
	GTypeDBusObject = coreglib.Type(girepository.MustFind("Gio", "DBusObject").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDBusObject, F: marshalDBusObject},
	})
}

// DBusObjectOverrider contains methods that are overridable.
type DBusObjectOverrider interface {
}

// DBusObject type is the base type for D-Bus objects on both the service side
// (see BusObjectSkeleton) and the client side (see BusObjectProxy). It is
// essentially just a container of interfaces.
//
// DBusObject wraps an interface. This means the user can get the
// underlying type by calling Cast().
type DBusObject struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*DBusObject)(nil)
)

// DBusObjector describes DBusObject's interface methods.
type DBusObjector interface {
	coreglib.Objector

	baseDBusObject() *DBusObject
}

var _ DBusObjector = (*DBusObject)(nil)

func ifaceInitDBusObjector(gifacePtr, data C.gpointer) {
}

func wrapDBusObject(obj *coreglib.Object) *DBusObject {
	return &DBusObject{
		Object: obj,
	}
}

func marshalDBusObject(p uintptr) (interface{}, error) {
	return wrapDBusObject(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *DBusObject) baseDBusObject() *DBusObject {
	return v
}

// BaseDBusObject returns the underlying base object.
func BaseDBusObject(obj DBusObjector) *DBusObject {
	return obj.baseDBusObject()
}

// ConnectInterfaceAdded is emitted when interface is added to object.
func (v *DBusObject) ConnectInterfaceAdded(f func(iface DBusInterfacer)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "interface-added", false, unsafe.Pointer(C._gotk4_gio2_DBusObject_ConnectInterfaceAdded), f)
}

// ConnectInterfaceRemoved is emitted when interface is removed from object.
func (v *DBusObject) ConnectInterfaceRemoved(f func(iface DBusInterfacer)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "interface-removed", false, unsafe.Pointer(C._gotk4_gio2_DBusObject_ConnectInterfaceRemoved), f)
}
