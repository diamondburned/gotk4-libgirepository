// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeTLSCertificate = coreglib.Type(girepository.MustFind("Gio", "TlsCertificate").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeTLSCertificate, F: marshalTLSCertificate},
	})
}

// TLSCertificateOverrides contains methods that are overridable.
type TLSCertificateOverrides struct {
}

func defaultTLSCertificateOverrides(v *TLSCertificate) TLSCertificateOverrides {
	return TLSCertificateOverrides{}
}

// TLSCertificate: certificate used for TLS authentication and encryption. This
// can represent either a certificate only (eg, the certificate received by a
// client from a server), or the combination of a certificate and a private key
// (which is needed when acting as a ServerConnection).
type TLSCertificate struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*TLSCertificate)(nil)
)

// TLSCertificater describes types inherited from class TLSCertificate.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type TLSCertificater interface {
	coreglib.Objector
	baseTLSCertificate() *TLSCertificate
}

var _ TLSCertificater = (*TLSCertificate)(nil)

func init() {
	coreglib.RegisterClassInfo[*TLSCertificate, *TLSCertificateClass, TLSCertificateOverrides](
		GTypeTLSCertificate,
		initTLSCertificateClass,
		wrapTLSCertificate,
		defaultTLSCertificateOverrides,
	)
}

func initTLSCertificateClass(gclass unsafe.Pointer, overrides TLSCertificateOverrides, classInitFunc func(*TLSCertificateClass)) {
	if classInitFunc != nil {
		class := (*TLSCertificateClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapTLSCertificate(obj *coreglib.Object) *TLSCertificate {
	return &TLSCertificate{
		Object: obj,
	}
}

func marshalTLSCertificate(p uintptr) (interface{}, error) {
	return wrapTLSCertificate(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *TLSCertificate) baseTLSCertificate() *TLSCertificate {
	return v
}

// BaseTLSCertificate returns the underlying base object.
func BaseTLSCertificate(obj TLSCertificater) *TLSCertificate {
	return obj.baseTLSCertificate()
}
