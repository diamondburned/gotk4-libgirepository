// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gio2_VolumeMonitor_ConnectVolumeRemoved(gpointer, void*, guintptr);
// extern void _gotk4_gio2_VolumeMonitor_ConnectVolumeChanged(gpointer, void*, guintptr);
// extern void _gotk4_gio2_VolumeMonitor_ConnectVolumeAdded(gpointer, void*, guintptr);
// extern void _gotk4_gio2_VolumeMonitor_ConnectMountRemoved(gpointer, void*, guintptr);
// extern void _gotk4_gio2_VolumeMonitor_ConnectMountPreUnmount(gpointer, void*, guintptr);
// extern void _gotk4_gio2_VolumeMonitor_ConnectMountChanged(gpointer, void*, guintptr);
// extern void _gotk4_gio2_VolumeMonitor_ConnectMountAdded(gpointer, void*, guintptr);
// extern void _gotk4_gio2_VolumeMonitor_ConnectDriveStopButton(gpointer, void*, guintptr);
// extern void _gotk4_gio2_VolumeMonitor_ConnectDriveEjectButton(gpointer, void*, guintptr);
// extern void _gotk4_gio2_VolumeMonitor_ConnectDriveDisconnected(gpointer, void*, guintptr);
// extern void _gotk4_gio2_VolumeMonitor_ConnectDriveConnected(gpointer, void*, guintptr);
// extern void _gotk4_gio2_VolumeMonitor_ConnectDriveChanged(gpointer, void*, guintptr);
import "C"

// GType values.
var (
	GTypeVolumeMonitor = coreglib.Type(girepository.MustFind("Gio", "VolumeMonitor").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeVolumeMonitor, F: marshalVolumeMonitor},
	})
}

// VOLUME_MONITOR_EXTENSION_POINT_NAME: extension point for volume monitor
// functionality. See [Extending GIO][extending-gio].
const VOLUME_MONITOR_EXTENSION_POINT_NAME = "gio-volume-monitor"

// VolumeMonitorOverrides contains methods that are overridable.
type VolumeMonitorOverrides struct {
}

func defaultVolumeMonitorOverrides(v *VolumeMonitor) VolumeMonitorOverrides {
	return VolumeMonitorOverrides{}
}

// VolumeMonitor is for listing the user interesting devices and volumes on the
// computer. In other words, what a file selector or file manager would show in
// a sidebar.
//
// Monitor is not [thread-default-context
// aware][g-main-context-push-thread-default], and so should not be used other
// than from the main thread, with no thread-default-context active.
//
// In order to receive updates about volumes and mounts monitored through GVFS,
// a main loop must be running.
type VolumeMonitor struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*VolumeMonitor)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*VolumeMonitor, *VolumeMonitorClass, VolumeMonitorOverrides](
		GTypeVolumeMonitor,
		initVolumeMonitorClass,
		wrapVolumeMonitor,
		defaultVolumeMonitorOverrides,
	)
}

func initVolumeMonitorClass(gclass unsafe.Pointer, overrides VolumeMonitorOverrides, classInitFunc func(*VolumeMonitorClass)) {
	if classInitFunc != nil {
		class := (*VolumeMonitorClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapVolumeMonitor(obj *coreglib.Object) *VolumeMonitor {
	return &VolumeMonitor{
		Object: obj,
	}
}

func marshalVolumeMonitor(p uintptr) (interface{}, error) {
	return wrapVolumeMonitor(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectDriveChanged is emitted when a drive changes.
func (v *VolumeMonitor) ConnectDriveChanged(f func(drive Driver)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "drive-changed", false, unsafe.Pointer(C._gotk4_gio2_VolumeMonitor_ConnectDriveChanged), f)
}

// ConnectDriveConnected is emitted when a drive is connected to the system.
func (v *VolumeMonitor) ConnectDriveConnected(f func(drive Driver)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "drive-connected", false, unsafe.Pointer(C._gotk4_gio2_VolumeMonitor_ConnectDriveConnected), f)
}

// ConnectDriveDisconnected is emitted when a drive is disconnected from the
// system.
func (v *VolumeMonitor) ConnectDriveDisconnected(f func(drive Driver)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "drive-disconnected", false, unsafe.Pointer(C._gotk4_gio2_VolumeMonitor_ConnectDriveDisconnected), f)
}

// ConnectDriveEjectButton is emitted when the eject button is pressed on drive.
func (v *VolumeMonitor) ConnectDriveEjectButton(f func(drive Driver)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "drive-eject-button", false, unsafe.Pointer(C._gotk4_gio2_VolumeMonitor_ConnectDriveEjectButton), f)
}

// ConnectDriveStopButton is emitted when the stop button is pressed on drive.
func (v *VolumeMonitor) ConnectDriveStopButton(f func(drive Driver)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "drive-stop-button", false, unsafe.Pointer(C._gotk4_gio2_VolumeMonitor_ConnectDriveStopButton), f)
}

// ConnectMountAdded is emitted when a mount is added.
func (v *VolumeMonitor) ConnectMountAdded(f func(mount Mounter)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "mount-added", false, unsafe.Pointer(C._gotk4_gio2_VolumeMonitor_ConnectMountAdded), f)
}

// ConnectMountChanged is emitted when a mount changes.
func (v *VolumeMonitor) ConnectMountChanged(f func(mount Mounter)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "mount-changed", false, unsafe.Pointer(C._gotk4_gio2_VolumeMonitor_ConnectMountChanged), f)
}

// ConnectMountPreUnmount: may be emitted when a mount is about to be removed.
//
// This signal depends on the backend and is only emitted if GIO was used to
// unmount.
func (v *VolumeMonitor) ConnectMountPreUnmount(f func(mount Mounter)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "mount-pre-unmount", false, unsafe.Pointer(C._gotk4_gio2_VolumeMonitor_ConnectMountPreUnmount), f)
}

// ConnectMountRemoved is emitted when a mount is removed.
func (v *VolumeMonitor) ConnectMountRemoved(f func(mount Mounter)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "mount-removed", false, unsafe.Pointer(C._gotk4_gio2_VolumeMonitor_ConnectMountRemoved), f)
}

// ConnectVolumeAdded is emitted when a mountable volume is added to the system.
func (v *VolumeMonitor) ConnectVolumeAdded(f func(volume Volumer)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "volume-added", false, unsafe.Pointer(C._gotk4_gio2_VolumeMonitor_ConnectVolumeAdded), f)
}

// ConnectVolumeChanged is emitted when mountable volume is changed.
func (v *VolumeMonitor) ConnectVolumeChanged(f func(volume Volumer)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "volume-changed", false, unsafe.Pointer(C._gotk4_gio2_VolumeMonitor_ConnectVolumeChanged), f)
}

// ConnectVolumeRemoved is emitted when a mountable volume is removed from the
// system.
func (v *VolumeMonitor) ConnectVolumeRemoved(f func(volume Volumer)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "volume-removed", false, unsafe.Pointer(C._gotk4_gio2_VolumeMonitor_ConnectVolumeRemoved), f)
}

// VolumeMonitorClass: instance of this type is always passed by reference.
type VolumeMonitorClass struct {
	*volumeMonitorClass
}

// volumeMonitorClass is the struct that's finalized.
type volumeMonitorClass struct {
	native unsafe.Pointer
}

var GIRInfoVolumeMonitorClass = girepository.MustFind("Gio", "VolumeMonitorClass")
