// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeLoadableIcon = coreglib.Type(girepository.MustFind("Gio", "LoadableIcon").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeLoadableIcon, F: marshalLoadableIcon},
	})
}

// LoadableIconOverrider contains methods that are overridable.
type LoadableIconOverrider interface {
}

// LoadableIcon extends the #GIcon interface and adds the ability to load icons
// from streams.
//
// LoadableIcon wraps an interface. This means the user can get the
// underlying type by calling Cast().
type LoadableIcon struct {
	_ [0]func() // equal guard
	Icon
}

var ()

// LoadableIconner describes LoadableIcon's interface methods.
type LoadableIconner interface {
	coreglib.Objector

	baseLoadableIcon() *LoadableIcon
}

var _ LoadableIconner = (*LoadableIcon)(nil)

func ifaceInitLoadableIconner(gifacePtr, data C.gpointer) {
}

func wrapLoadableIcon(obj *coreglib.Object) *LoadableIcon {
	return &LoadableIcon{
		Icon: Icon{
			Object: obj,
		},
	}
}

func marshalLoadableIcon(p uintptr) (interface{}, error) {
	return wrapLoadableIcon(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *LoadableIcon) baseLoadableIcon() *LoadableIcon {
	return v
}

// BaseLoadableIcon returns the underlying base object.
func BaseLoadableIcon(obj LoadableIconner) *LoadableIcon {
	return obj.baseLoadableIcon()
}

// LoadableIconIface: interface for icons that can be loaded as a stream.
//
// An instance of this type is always passed by reference.
type LoadableIconIface struct {
	*loadableIconIface
}

// loadableIconIface is the struct that's finalized.
type loadableIconIface struct {
	native unsafe.Pointer
}

var GIRInfoLoadableIconIface = girepository.MustFind("Gio", "LoadableIconIface")
