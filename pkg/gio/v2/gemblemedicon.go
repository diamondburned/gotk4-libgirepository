// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeEmblemedIcon = coreglib.Type(girepository.MustFind("Gio", "EmblemedIcon").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeEmblemedIcon, F: marshalEmblemedIcon},
	})
}

// EmblemedIconOverrides contains methods that are overridable.
type EmblemedIconOverrides struct {
}

func defaultEmblemedIconOverrides(v *EmblemedIcon) EmblemedIconOverrides {
	return EmblemedIconOverrides{}
}

// EmblemedIcon is an implementation of #GIcon that supports adding an emblem to
// an icon. Adding multiple emblems to an icon is ensured via
// g_emblemed_icon_add_emblem().
//
// Note that Icon allows no control over the position of the emblems. See also
// #GEmblem for more information.
type EmblemedIcon struct {
	_ [0]func() // equal guard
	*coreglib.Object

	Icon
}

var (
	_ coreglib.Objector = (*EmblemedIcon)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*EmblemedIcon, *EmblemedIconClass, EmblemedIconOverrides](
		GTypeEmblemedIcon,
		initEmblemedIconClass,
		wrapEmblemedIcon,
		defaultEmblemedIconOverrides,
	)
}

func initEmblemedIconClass(gclass unsafe.Pointer, overrides EmblemedIconOverrides, classInitFunc func(*EmblemedIconClass)) {
	if classInitFunc != nil {
		class := (*EmblemedIconClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapEmblemedIcon(obj *coreglib.Object) *EmblemedIcon {
	return &EmblemedIcon{
		Object: obj,
		Icon: Icon{
			Object: obj,
		},
	}
}

func marshalEmblemedIcon(p uintptr) (interface{}, error) {
	return wrapEmblemedIcon(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// EmblemedIconClass: instance of this type is always passed by reference.
type EmblemedIconClass struct {
	*emblemedIconClass
}

// emblemedIconClass is the struct that's finalized.
type emblemedIconClass struct {
	native unsafe.Pointer
}

var GIRInfoEmblemedIconClass = girepository.MustFind("Gio", "EmblemedIconClass")
