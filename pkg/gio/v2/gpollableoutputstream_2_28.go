// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypePollableOutputStream = coreglib.Type(girepository.MustFind("Gio", "PollableOutputStream").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypePollableOutputStream, F: marshalPollableOutputStream},
	})
}

// PollableOutputStreamOverrider contains methods that are overridable.
type PollableOutputStreamOverrider interface {
}

// PollableOutputStream is implemented by Streams that can be polled for
// readiness to write. This can be used when interfacing with a non-GIO API that
// expects UNIX-file-descriptor-style asynchronous I/O rather than GIO-style.
//
// PollableOutputStream wraps an interface. This means the user can get the
// underlying type by calling Cast().
type PollableOutputStream struct {
	_ [0]func() // equal guard
	OutputStream
}

var (
	_ OutputStreamer = (*PollableOutputStream)(nil)
)

// PollableOutputStreamer describes PollableOutputStream's interface methods.
type PollableOutputStreamer interface {
	coreglib.Objector

	basePollableOutputStream() *PollableOutputStream
}

var _ PollableOutputStreamer = (*PollableOutputStream)(nil)

func ifaceInitPollableOutputStreamer(gifacePtr, data C.gpointer) {
}

func wrapPollableOutputStream(obj *coreglib.Object) *PollableOutputStream {
	return &PollableOutputStream{
		OutputStream: OutputStream{
			Object: obj,
		},
	}
}

func marshalPollableOutputStream(p uintptr) (interface{}, error) {
	return wrapPollableOutputStream(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *PollableOutputStream) basePollableOutputStream() *PollableOutputStream {
	return v
}

// BasePollableOutputStream returns the underlying base object.
func BasePollableOutputStream(obj PollableOutputStreamer) *PollableOutputStream {
	return obj.basePollableOutputStream()
}

// PollableOutputStreamInterface: interface for pollable output streams.
//
// The default implementation of can_poll always returns TRUE.
//
// The default implementation of write_nonblocking calls
// g_pollable_output_stream_is_writable(), and then calls
// g_output_stream_write() if it returns TRUE. This means you only need to
// override it if it is possible that your is_writable implementation may return
// TRUE when the stream is not actually writable.
//
// The default implementation of writev_nonblocking calls
// g_pollable_output_stream_write_nonblocking() for each vector, and converts
// its return value and error (if set) to a Return. You should override this
// where possible to avoid having to allocate a #GError to return
// G_IO_ERROR_WOULD_BLOCK.
//
// An instance of this type is always passed by reference.
type PollableOutputStreamInterface struct {
	*pollableOutputStreamInterface
}

// pollableOutputStreamInterface is the struct that's finalized.
type pollableOutputStreamInterface struct {
	native unsafe.Pointer
}

var GIRInfoPollableOutputStreamInterface = girepository.MustFind("Gio", "PollableOutputStreamInterface")
