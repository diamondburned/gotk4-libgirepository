// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeOutputStream = coreglib.Type(girepository.MustFind("Gio", "OutputStream").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeOutputStream, F: marshalOutputStream},
	})
}

// OutputStreamOverrides contains methods that are overridable.
type OutputStreamOverrides struct {
}

func defaultOutputStreamOverrides(v *OutputStream) OutputStreamOverrides {
	return OutputStreamOverrides{}
}

// OutputStream has functions to write to a stream (g_output_stream_write()), to
// close a stream (g_output_stream_close()) and to flush pending writes
// (g_output_stream_flush()).
//
// To copy the content of an input stream to an output stream without manually
// handling the reads and writes, use g_output_stream_splice().
//
// See the documentation for OStream for details of thread safety of streaming
// APIs.
//
// All of these functions have async variants too.
type OutputStream struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*OutputStream)(nil)
)

// OutputStreamer describes types inherited from class OutputStream.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type OutputStreamer interface {
	coreglib.Objector
	baseOutputStream() *OutputStream
}

var _ OutputStreamer = (*OutputStream)(nil)

func init() {
	coreglib.RegisterClassInfo[*OutputStream, *OutputStreamClass, OutputStreamOverrides](
		GTypeOutputStream,
		initOutputStreamClass,
		wrapOutputStream,
		defaultOutputStreamOverrides,
	)
}

func initOutputStreamClass(gclass unsafe.Pointer, overrides OutputStreamOverrides, classInitFunc func(*OutputStreamClass)) {
	if classInitFunc != nil {
		class := (*OutputStreamClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapOutputStream(obj *coreglib.Object) *OutputStream {
	return &OutputStream{
		Object: obj,
	}
}

func marshalOutputStream(p uintptr) (interface{}, error) {
	return wrapOutputStream(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *OutputStream) baseOutputStream() *OutputStream {
	return v
}

// BaseOutputStream returns the underlying base object.
func BaseOutputStream(obj OutputStreamer) *OutputStream {
	return obj.baseOutputStream()
}

// OutputStreamClass: instance of this type is always passed by reference.
type OutputStreamClass struct {
	*outputStreamClass
}

// outputStreamClass is the struct that's finalized.
type outputStreamClass struct {
	native unsafe.Pointer
}

var GIRInfoOutputStreamClass = girepository.MustFind("Gio", "OutputStreamClass")
