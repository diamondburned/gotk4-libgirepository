// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeInetAddress = coreglib.Type(girepository.MustFind("Gio", "InetAddress").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeInetAddress, F: marshalInetAddress},
	})
}

// InetAddressOverrides contains methods that are overridable.
type InetAddressOverrides struct {
}

func defaultInetAddressOverrides(v *InetAddress) InetAddressOverrides {
	return InetAddressOverrides{}
}

// InetAddress represents an IPv4 or IPv6 internet address. Use
// g_resolver_lookup_by_name() or g_resolver_lookup_by_name_async() to look up
// the Address for a hostname. Use g_resolver_lookup_by_address() or
// g_resolver_lookup_by_address_async() to look up the hostname for a Address.
//
// To actually connect to a remote host, you will need a SocketAddress (which
// includes a Address as well as a port number).
type InetAddress struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*InetAddress)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*InetAddress, *InetAddressClass, InetAddressOverrides](
		GTypeInetAddress,
		initInetAddressClass,
		wrapInetAddress,
		defaultInetAddressOverrides,
	)
}

func initInetAddressClass(gclass unsafe.Pointer, overrides InetAddressOverrides, classInitFunc func(*InetAddressClass)) {
	if classInitFunc != nil {
		class := (*InetAddressClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapInetAddress(obj *coreglib.Object) *InetAddress {
	return &InetAddress{
		Object: obj,
	}
}

func marshalInetAddress(p uintptr) (interface{}, error) {
	return wrapInetAddress(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// InetAddressClass: instance of this type is always passed by reference.
type InetAddressClass struct {
	*inetAddressClass
}

// inetAddressClass is the struct that's finalized.
type inetAddressClass struct {
	native unsafe.Pointer
}

var GIRInfoInetAddressClass = girepository.MustFind("Gio", "InetAddressClass")
