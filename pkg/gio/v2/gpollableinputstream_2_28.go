// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypePollableInputStream = coreglib.Type(girepository.MustFind("Gio", "PollableInputStream").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypePollableInputStream, F: marshalPollableInputStream},
	})
}

// PollableInputStreamOverrider contains methods that are overridable.
type PollableInputStreamOverrider interface {
}

// PollableInputStream is implemented by Streams that can be polled for
// readiness to read. This can be used when interfacing with a non-GIO API that
// expects UNIX-file-descriptor-style asynchronous I/O rather than GIO-style.
//
// PollableInputStream wraps an interface. This means the user can get the
// underlying type by calling Cast().
type PollableInputStream struct {
	_ [0]func() // equal guard
	InputStream
}

var (
	_ InputStreamer = (*PollableInputStream)(nil)
)

// PollableInputStreamer describes PollableInputStream's interface methods.
type PollableInputStreamer interface {
	coreglib.Objector

	basePollableInputStream() *PollableInputStream
}

var _ PollableInputStreamer = (*PollableInputStream)(nil)

func ifaceInitPollableInputStreamer(gifacePtr, data C.gpointer) {
}

func wrapPollableInputStream(obj *coreglib.Object) *PollableInputStream {
	return &PollableInputStream{
		InputStream: InputStream{
			Object: obj,
		},
	}
}

func marshalPollableInputStream(p uintptr) (interface{}, error) {
	return wrapPollableInputStream(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *PollableInputStream) basePollableInputStream() *PollableInputStream {
	return v
}

// BasePollableInputStream returns the underlying base object.
func BasePollableInputStream(obj PollableInputStreamer) *PollableInputStream {
	return obj.basePollableInputStream()
}

// PollableInputStreamInterface: interface for pollable input streams.
//
// The default implementation of can_poll always returns TRUE.
//
// The default implementation of read_nonblocking calls
// g_pollable_input_stream_is_readable(), and then calls g_input_stream_read()
// if it returns TRUE. This means you only need to override it if it is possible
// that your is_readable implementation may return TRUE when the stream is not
// actually readable.
//
// An instance of this type is always passed by reference.
type PollableInputStreamInterface struct {
	*pollableInputStreamInterface
}

// pollableInputStreamInterface is the struct that's finalized.
type pollableInputStreamInterface struct {
	native unsafe.Pointer
}

var GIRInfoPollableInputStreamInterface = girepository.MustFind("Gio", "PollableInputStreamInterface")
