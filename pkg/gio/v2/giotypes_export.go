// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

//export _gotk4_gio2_AsyncReadyCallback
func _gotk4_gio2_AsyncReadyCallback(arg1 *C.GObject, arg2 *C.void, arg3 C.gpointer) {
	var fn AsyncReadyCallback
	{
		v := gbox.Get(uintptr(arg3))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(AsyncReadyCallback)
	}

	var _res AsyncResulter // out

	{
		objptr := unsafe.Pointer(arg2)
		if objptr == nil {
			panic("object of type gio.AsyncResulter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(AsyncResulter)
			return ok
		})
		rv, ok := casted.(AsyncResulter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.AsyncResulter")
		}
		_res = rv
	}

	fn(_res)
}

//export _gotk4_gio2_FileProgressCallback
func _gotk4_gio2_FileProgressCallback(arg1 C.goffset, arg2 C.goffset, arg3 C.gpointer) {
	var fn FileProgressCallback
	{
		v := gbox.Get(uintptr(arg3))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(FileProgressCallback)
	}

	var _currentNumBytes int64 // out
	var _totalNumBytes int64   // out

	_currentNumBytes = int64(arg1)
	_totalNumBytes = int64(arg2)

	fn(_currentNumBytes, _totalNumBytes)
}

//export _gotk4_gio2_FileReadMoreCallback
func _gotk4_gio2_FileReadMoreCallback(arg1 *C.char, arg2 C.goffset, arg3 C.gpointer) (cret C.gboolean) {
	var fn FileReadMoreCallback
	{
		v := gbox.Get(uintptr(arg3))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(FileReadMoreCallback)
	}

	var _fileContents string // out
	var _fileSize int64      // out

	_fileContents = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))
	_fileSize = int64(arg2)

	ok := fn(_fileContents, _fileSize)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}
