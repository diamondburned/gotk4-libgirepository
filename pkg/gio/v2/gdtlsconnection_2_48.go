// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeDTLSConnection = coreglib.Type(girepository.MustFind("Gio", "DtlsConnection").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDTLSConnection, F: marshalDTLSConnection},
	})
}

// DTLSConnectionOverrider contains methods that are overridable.
type DTLSConnectionOverrider interface {
}

// DTLSConnection is the base DTLS connection class type, which wraps a Based
// and provides DTLS encryption on top of it. Its subclasses, ClientConnection
// and ServerConnection, implement client-side and server-side DTLS,
// respectively.
//
// For TLS support, see Connection.
//
// As DTLS is datagram based, Connection implements Based, presenting a
// datagram-socket-like API for the encrypted connection. This operates over a
// base datagram connection, which is also a Based (Connection:base-socket).
//
// To close a DTLS connection, use g_dtls_connection_close().
//
// Neither ServerConnection or ClientConnection set the peer address on their
// base Based if it is a #GSocket â€” it is up to the caller to do that if they
// wish. If they do not, and g_socket_close() is called on the base socket, the
// Connection will not raise a G_IO_ERROR_NOT_CONNECTED error on further I/O.
//
// DTLSConnection wraps an interface. This means the user can get the
// underlying type by calling Cast().
type DTLSConnection struct {
	_ [0]func() // equal guard
	DatagramBased
}

var ()

// DTLSConnectioner describes DTLSConnection's interface methods.
type DTLSConnectioner interface {
	coreglib.Objector

	baseDTLSConnection() *DTLSConnection
}

var _ DTLSConnectioner = (*DTLSConnection)(nil)

func ifaceInitDTLSConnectioner(gifacePtr, data C.gpointer) {
}

func wrapDTLSConnection(obj *coreglib.Object) *DTLSConnection {
	return &DTLSConnection{
		DatagramBased: DatagramBased{
			Object: obj,
		},
	}
}

func marshalDTLSConnection(p uintptr) (interface{}, error) {
	return wrapDTLSConnection(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *DTLSConnection) baseDTLSConnection() *DTLSConnection {
	return v
}

// BaseDTLSConnection returns the underlying base object.
func BaseDTLSConnection(obj DTLSConnectioner) *DTLSConnection {
	return obj.baseDTLSConnection()
}

// DTLSConnectionInterface: virtual method table for a Connection
// implementation.
//
// An instance of this type is always passed by reference.
type DTLSConnectionInterface struct {
	*dtlsConnectionInterface
}

// dtlsConnectionInterface is the struct that's finalized.
type dtlsConnectionInterface struct {
	native unsafe.Pointer
}

var GIRInfoDTLSConnectionInterface = girepository.MustFind("Gio", "DtlsConnectionInterface")
