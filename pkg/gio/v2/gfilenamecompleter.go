// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gio2_FilenameCompleter_ConnectGotCompletionData(gpointer, guintptr);
import "C"

// GType values.
var (
	GTypeFilenameCompleter = coreglib.Type(girepository.MustFind("Gio", "FilenameCompleter").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeFilenameCompleter, F: marshalFilenameCompleter},
	})
}

// FilenameCompleterOverrides contains methods that are overridable.
type FilenameCompleterOverrides struct {
}

func defaultFilenameCompleterOverrides(v *FilenameCompleter) FilenameCompleterOverrides {
	return FilenameCompleterOverrides{}
}

// FilenameCompleter completes partial file and directory names given a partial
// string by looking in the file system for clues. Can return a list of possible
// completion strings for widget implementations.
type FilenameCompleter struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*FilenameCompleter)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*FilenameCompleter, *FilenameCompleterClass, FilenameCompleterOverrides](
		GTypeFilenameCompleter,
		initFilenameCompleterClass,
		wrapFilenameCompleter,
		defaultFilenameCompleterOverrides,
	)
}

func initFilenameCompleterClass(gclass unsafe.Pointer, overrides FilenameCompleterOverrides, classInitFunc func(*FilenameCompleterClass)) {
	if classInitFunc != nil {
		class := (*FilenameCompleterClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapFilenameCompleter(obj *coreglib.Object) *FilenameCompleter {
	return &FilenameCompleter{
		Object: obj,
	}
}

func marshalFilenameCompleter(p uintptr) (interface{}, error) {
	return wrapFilenameCompleter(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectGotCompletionData is emitted when the file name completion information
// comes available.
func (v *FilenameCompleter) ConnectGotCompletionData(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "got-completion-data", false, unsafe.Pointer(C._gotk4_gio2_FilenameCompleter_ConnectGotCompletionData), f)
}

// FilenameCompleterClass: instance of this type is always passed by reference.
type FilenameCompleterClass struct {
	*filenameCompleterClass
}

// filenameCompleterClass is the struct that's finalized.
type filenameCompleterClass struct {
	native unsafe.Pointer
}

var GIRInfoFilenameCompleterClass = girepository.MustFind("Gio", "FilenameCompleterClass")
