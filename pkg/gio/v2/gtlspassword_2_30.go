// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeTLSPassword = coreglib.Type(girepository.MustFind("Gio", "TlsPassword").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeTLSPassword, F: marshalTLSPassword},
	})
}

// TLSPasswordOverrides contains methods that are overridable.
type TLSPasswordOverrides struct {
}

func defaultTLSPasswordOverrides(v *TLSPassword) TLSPasswordOverrides {
	return TLSPasswordOverrides{}
}

// TLSPassword holds a password used in TLS.
type TLSPassword struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*TLSPassword)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*TLSPassword, *TLSPasswordClass, TLSPasswordOverrides](
		GTypeTLSPassword,
		initTLSPasswordClass,
		wrapTLSPassword,
		defaultTLSPasswordOverrides,
	)
}

func initTLSPasswordClass(gclass unsafe.Pointer, overrides TLSPasswordOverrides, classInitFunc func(*TLSPasswordClass)) {
	if classInitFunc != nil {
		class := (*TLSPasswordClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapTLSPassword(obj *coreglib.Object) *TLSPassword {
	return &TLSPassword{
		Object: obj,
	}
}

func marshalTLSPassword(p uintptr) (interface{}, error) {
	return wrapTLSPassword(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
