// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeSocketAddress = coreglib.Type(girepository.MustFind("Gio", "SocketAddress").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeSocketAddress, F: marshalSocketAddress},
	})
}

// SocketAddressOverrides contains methods that are overridable.
type SocketAddressOverrides struct {
}

func defaultSocketAddressOverrides(v *SocketAddress) SocketAddressOverrides {
	return SocketAddressOverrides{}
}

// SocketAddress is the equivalent of struct sockaddr in the BSD sockets API.
// This is an abstract class; use SocketAddress for internet sockets, or
// SocketAddress for UNIX domain sockets.
type SocketAddress struct {
	_ [0]func() // equal guard
	*coreglib.Object

	SocketConnectable
}

var (
	_ coreglib.Objector = (*SocketAddress)(nil)
)

// SocketAddresser describes types inherited from class SocketAddress.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type SocketAddresser interface {
	coreglib.Objector
	baseSocketAddress() *SocketAddress
}

var _ SocketAddresser = (*SocketAddress)(nil)

func init() {
	coreglib.RegisterClassInfo[*SocketAddress, *SocketAddressClass, SocketAddressOverrides](
		GTypeSocketAddress,
		initSocketAddressClass,
		wrapSocketAddress,
		defaultSocketAddressOverrides,
	)
}

func initSocketAddressClass(gclass unsafe.Pointer, overrides SocketAddressOverrides, classInitFunc func(*SocketAddressClass)) {
	if classInitFunc != nil {
		class := (*SocketAddressClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapSocketAddress(obj *coreglib.Object) *SocketAddress {
	return &SocketAddress{
		Object: obj,
		SocketConnectable: SocketConnectable{
			Object: obj,
		},
	}
}

func marshalSocketAddress(p uintptr) (interface{}, error) {
	return wrapSocketAddress(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *SocketAddress) baseSocketAddress() *SocketAddress {
	return v
}

// BaseSocketAddress returns the underlying base object.
func BaseSocketAddress(obj SocketAddresser) *SocketAddress {
	return obj.baseSocketAddress()
}

// SocketAddressClass: instance of this type is always passed by reference.
type SocketAddressClass struct {
	*socketAddressClass
}

// socketAddressClass is the struct that's finalized.
type socketAddressClass struct {
	native unsafe.Pointer
}

var GIRInfoSocketAddressClass = girepository.MustFind("Gio", "SocketAddressClass")
