// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeTLSClientConnection = coreglib.Type(girepository.MustFind("Gio", "TlsClientConnection").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeTLSClientConnection, F: marshalTLSClientConnection},
	})
}

// TLSClientConnectionOverrider contains methods that are overridable.
type TLSClientConnectionOverrider interface {
}

// TLSClientConnection is the client-side subclass of Connection, representing a
// client-side TLS connection.
//
// TLSClientConnection wraps an interface. This means the user can get the
// underlying type by calling Cast().
type TLSClientConnection struct {
	_ [0]func() // equal guard
	TLSConnection
}

var (
	_ TLSConnectioner = (*TLSClientConnection)(nil)
)

// TLSClientConnectioner describes TLSClientConnection's interface methods.
type TLSClientConnectioner interface {
	coreglib.Objector

	baseTLSClientConnection() *TLSClientConnection
}

var _ TLSClientConnectioner = (*TLSClientConnection)(nil)

func ifaceInitTLSClientConnectioner(gifacePtr, data C.gpointer) {
}

func wrapTLSClientConnection(obj *coreglib.Object) *TLSClientConnection {
	return &TLSClientConnection{
		TLSConnection: TLSConnection{
			IOStream: IOStream{
				Object: obj,
			},
		},
	}
}

func marshalTLSClientConnection(p uintptr) (interface{}, error) {
	return wrapTLSClientConnection(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *TLSClientConnection) baseTLSClientConnection() *TLSClientConnection {
	return v
}

// BaseTLSClientConnection returns the underlying base object.
func BaseTLSClientConnection(obj TLSClientConnectioner) *TLSClientConnection {
	return obj.baseTLSClientConnection()
}
