// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeSocketListener = coreglib.Type(girepository.MustFind("Gio", "SocketListener").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeSocketListener, F: marshalSocketListener},
	})
}

// SocketListenerOverrides contains methods that are overridable.
type SocketListenerOverrides struct {
}

func defaultSocketListenerOverrides(v *SocketListener) SocketListenerOverrides {
	return SocketListenerOverrides{}
}

// SocketListener is an object that keeps track of a set of server sockets and
// helps you accept sockets from any of the socket, either sync or async.
//
// Add addresses and ports to listen on using g_socket_listener_add_address()
// and g_socket_listener_add_inet_port(). These will be listened on until
// g_socket_listener_close() is called. Dropping your final reference to the
// Listener will not cause g_socket_listener_close() to be called implicitly, as
// some references to the Listener may be held internally.
//
// If you want to implement a network server, also look at Service and
// SocketService which are subclasses of Listener that make this even easier.
type SocketListener struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*SocketListener)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*SocketListener, *SocketListenerClass, SocketListenerOverrides](
		GTypeSocketListener,
		initSocketListenerClass,
		wrapSocketListener,
		defaultSocketListenerOverrides,
	)
}

func initSocketListenerClass(gclass unsafe.Pointer, overrides SocketListenerOverrides, classInitFunc func(*SocketListenerClass)) {
	if classInitFunc != nil {
		class := (*SocketListenerClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapSocketListener(obj *coreglib.Object) *SocketListener {
	return &SocketListener{
		Object: obj,
	}
}

func marshalSocketListener(p uintptr) (interface{}, error) {
	return wrapSocketListener(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
