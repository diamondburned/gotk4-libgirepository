// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeDataInputStream = coreglib.Type(girepository.MustFind("Gio", "DataInputStream").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDataInputStream, F: marshalDataInputStream},
	})
}

// DataInputStreamOverrides contains methods that are overridable.
type DataInputStreamOverrides struct {
}

func defaultDataInputStreamOverrides(v *DataInputStream) DataInputStreamOverrides {
	return DataInputStreamOverrides{}
}

// DataInputStream: data input stream implements Stream and includes functions
// for reading structured data directly from a binary input stream.
type DataInputStream struct {
	_ [0]func() // equal guard
	BufferedInputStream
}

var (
	_ FilterInputStreamer = (*DataInputStream)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DataInputStream, *DataInputStreamClass, DataInputStreamOverrides](
		GTypeDataInputStream,
		initDataInputStreamClass,
		wrapDataInputStream,
		defaultDataInputStreamOverrides,
	)
}

func initDataInputStreamClass(gclass unsafe.Pointer, overrides DataInputStreamOverrides, classInitFunc func(*DataInputStreamClass)) {
	if classInitFunc != nil {
		class := (*DataInputStreamClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDataInputStream(obj *coreglib.Object) *DataInputStream {
	return &DataInputStream{
		BufferedInputStream: BufferedInputStream{
			FilterInputStream: FilterInputStream{
				InputStream: InputStream{
					Object: obj,
				},
			},
			Seekable: Seekable{
				Object: obj,
			},
		},
	}
}

func marshalDataInputStream(p uintptr) (interface{}, error) {
	return wrapDataInputStream(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// DataInputStreamClass: instance of this type is always passed by reference.
type DataInputStreamClass struct {
	*dataInputStreamClass
}

// dataInputStreamClass is the struct that's finalized.
type dataInputStreamClass struct {
	native unsafe.Pointer
}

var GIRInfoDataInputStreamClass = girepository.MustFind("Gio", "DataInputStreamClass")
