// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeSimpleProxyResolver = coreglib.Type(girepository.MustFind("Gio", "SimpleProxyResolver").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeSimpleProxyResolver, F: marshalSimpleProxyResolver},
	})
}

// SimpleProxyResolverOverrides contains methods that are overridable.
type SimpleProxyResolverOverrides struct {
}

func defaultSimpleProxyResolverOverrides(v *SimpleProxyResolver) SimpleProxyResolverOverrides {
	return SimpleProxyResolverOverrides{}
}

// SimpleProxyResolver is a simple Resolver implementation that handles a single
// default proxy, multiple URI-scheme-specific proxies, and a list of hosts that
// proxies should not be used for.
//
// ProxyResolver is never the default proxy resolver, but it can be used as the
// base class for another proxy resolver implementation, or it can be created
// and used manually, such as with g_socket_client_set_proxy_resolver().
type SimpleProxyResolver struct {
	_ [0]func() // equal guard
	*coreglib.Object

	ProxyResolver
}

var (
	_ coreglib.Objector = (*SimpleProxyResolver)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*SimpleProxyResolver, *SimpleProxyResolverClass, SimpleProxyResolverOverrides](
		GTypeSimpleProxyResolver,
		initSimpleProxyResolverClass,
		wrapSimpleProxyResolver,
		defaultSimpleProxyResolverOverrides,
	)
}

func initSimpleProxyResolverClass(gclass unsafe.Pointer, overrides SimpleProxyResolverOverrides, classInitFunc func(*SimpleProxyResolverClass)) {
	if classInitFunc != nil {
		class := (*SimpleProxyResolverClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapSimpleProxyResolver(obj *coreglib.Object) *SimpleProxyResolver {
	return &SimpleProxyResolver{
		Object: obj,
		ProxyResolver: ProxyResolver{
			Object: obj,
		},
	}
}

func marshalSimpleProxyResolver(p uintptr) (interface{}, error) {
	return wrapSimpleProxyResolver(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
