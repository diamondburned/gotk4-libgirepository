// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeSocketConnection = coreglib.Type(girepository.MustFind("Gio", "SocketConnection").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeSocketConnection, F: marshalSocketConnection},
	})
}

// SocketConnectionOverrides contains methods that are overridable.
type SocketConnectionOverrides struct {
}

func defaultSocketConnectionOverrides(v *SocketConnection) SocketConnectionOverrides {
	return SocketConnectionOverrides{}
}

// SocketConnection is a OStream for a connected socket. They can be created
// either by Client when connecting to a host, or by Listener when accepting a
// new client.
//
// The type of the Connection object returned from these calls depends on the
// type of the underlying socket that is in use. For instance, for a TCP/IP
// connection it will be a Connection.
//
// Choosing what type of object to construct is done with the socket connection
// factory, and it is possible for 3rd parties to register custom socket
// connection types for specific combination of socket family/type/protocol
// using g_socket_connection_factory_register_type().
//
// To close a Connection, use g_io_stream_close(). Closing both substreams of
// the OStream separately will not close the underlying #GSocket.
type SocketConnection struct {
	_ [0]func() // equal guard
	IOStream
}

var (
	_ IOStreamer = (*SocketConnection)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*SocketConnection, *SocketConnectionClass, SocketConnectionOverrides](
		GTypeSocketConnection,
		initSocketConnectionClass,
		wrapSocketConnection,
		defaultSocketConnectionOverrides,
	)
}

func initSocketConnectionClass(gclass unsafe.Pointer, overrides SocketConnectionOverrides, classInitFunc func(*SocketConnectionClass)) {
	if classInitFunc != nil {
		class := (*SocketConnectionClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapSocketConnection(obj *coreglib.Object) *SocketConnection {
	return &SocketConnection{
		IOStream: IOStream{
			Object: obj,
		},
	}
}

func marshalSocketConnection(p uintptr) (interface{}, error) {
	return wrapSocketConnection(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
