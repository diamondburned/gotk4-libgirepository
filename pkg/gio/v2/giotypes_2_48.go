// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// DatagramBasedSourceFunc: this is the function type of the callback used for
// the #GSource returned by g_datagram_based_create_source().
type DatagramBasedSourceFunc func(datagramBased DatagramBasedder, condition glib.IOCondition) (ok bool)

// InputMessage: structure used for scatter/gather data input when receiving
// multiple messages or packets in one go. You generally pass in an array of
// empty Vectors and the operation will use all the buffers as if they were one
// buffer, and will set bytes_received to the total number of bytes received
// across all Vectors.
//
// This structure closely mirrors struct mmsghdr and struct msghdr from the
// POSIX sockets API (see man 2 recvmmsg).
//
// If address is non-NULL then it is set to the source address the message was
// received from, and the caller must free it afterwards.
//
// If control_messages is non-NULL then it is set to an array of control
// messages received with the message (if any), and the caller must free it
// afterwards. num_control_messages is set to the number of elements in this
// array, which may be zero.
//
// Flags relevant to this message will be returned in flags. For example,
// MSG_EOR or MSG_TRUNC.
//
// An instance of this type is always passed by reference.
type InputMessage struct {
	*inputMessage
}

// inputMessage is the struct that's finalized.
type inputMessage struct {
	native unsafe.Pointer
}

var GIRInfoInputMessage = girepository.MustFind("Gio", "InputMessage")
