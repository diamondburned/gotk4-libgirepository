// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// DBusInterfaceMethodCallFunc: type of the method_call function in
// BusInterfaceVTable.
type DBusInterfaceMethodCallFunc func(connection *DBusConnection, sender, objectPath, interfaceName, methodName string, parameters *glib.Variant, invocation *DBusMethodInvocation)

// DBusMessageFilterFunction: signature for function used in
// g_dbus_connection_add_filter().
//
// A filter function is passed a BusMessage and expected to return a BusMessage
// too. Passive filter functions that don't modify the message can simply return
// the message object:
//
//    static GDBusMessage *
//    passive_filter (GDBusConnection *connection
//                    GDBusMessage    *message,
//                    gboolean         incoming,
//                    gpointer         user_data)
//    {
//      // inspect message
//      return message;
//    }
//
// Filter functions that wants to drop a message can simply return NULL:
//
//    static GDBusMessage *
//    drop_filter (GDBusConnection *connection
//                 GDBusMessage    *message,
//                 gboolean         incoming,
//                 gpointer         user_data)
//    {
//      if (should_drop_message)
//        {
//          g_object_unref (message);
//          message = NULL;
//        }
//      return message;
//    }
//
// Finally, a filter function may modify a message by copying it:
//
//    static GDBusMessage *
//    modifying_filter (GDBusConnection *connection
//                      GDBusMessage    *message,
//                      gboolean         incoming,
//                      gpointer         user_data)
//    {
//      GDBusMessage *copy;
//      GError *error;
//
//      error = NULL;
//      copy = g_dbus_message_copy (message, &error);
//      // handle error being set
//      g_object_unref (message);
//
//      // modify copy
//
//      return copy;
//    }
//
// If the returned BusMessage is different from message and cannot be sent on
// connection (it could use features, such as file descriptors, not compatible
// with connection), then a warning is logged to standard error. Applications
// can check this ahead of time using g_dbus_message_to_blob() passing a
// BusCapabilityFlags value obtained from connection.
type DBusMessageFilterFunction func(connection *DBusConnection, message *DBusMessage, incoming bool) (dBusMessage *DBusMessage)

// DBusSignalCallback: signature for callback function used in
// g_dbus_connection_signal_subscribe().
type DBusSignalCallback func(connection *DBusConnection, senderName, objectPath, interfaceName, signalName string, parameters *glib.Variant)

// DBusSubtreeDispatchFunc: type of the dispatch function in BusSubtreeVTable.
//
// Subtrees are flat. node, if non-NULL, is always exactly one segment of the
// object path (ie: it never contains a slash).
type DBusSubtreeDispatchFunc func(connection *DBusConnection, sender, objectPath, interfaceName, node string) (outUserData unsafe.Pointer, dBusInterfaceVTable *DBusInterfaceVTable)

// DBusSubtreeEnumerateFunc: type of the enumerate function in BusSubtreeVTable.
//
// This function is called when generating introspection data and also when
// preparing to dispatch incoming messages in the event that the
// G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES flag is not specified
// (ie: to verify that the object path is valid).
//
// Hierarchies are not supported; the items that you return should not contain
// the / character.
//
// The return value will be freed with g_strfreev().
type DBusSubtreeEnumerateFunc func(connection *DBusConnection, sender, objectPath string) (utf8s []string)

// DBusSubtreeIntrospectFunc: type of the introspect function in
// BusSubtreeVTable.
//
// Subtrees are flat. node, if non-NULL, is always exactly one segment of the
// object path (ie: it never contains a slash).
//
// This function should return NULL to indicate that there is no object at this
// node.
//
// If this function returns non-NULL, the return value is expected to be a
// NULL-terminated array of pointers to BusInterfaceInfo structures describing
// the interfaces implemented by node. This array will have
// g_dbus_interface_info_unref() called on each item before being freed with
// g_free().
//
// The difference between returning NULL and an array containing zero items is
// that the standard DBus interfaces will returned to the remote introspector in
// the empty array case, but not in the NULL case.
type DBusSubtreeIntrospectFunc func(connection *DBusConnection, sender, objectPath, node string) (dBusInterfaceInfos []*DBusInterfaceInfo)

// DBusInterfaceVTable: virtual table for handling properties and method calls
// for a D-Bus interface.
//
// Since 2.38, if you want to handle getting/setting D-Bus properties
// asynchronously, give NULL as your get_property() or set_property() function.
// The D-Bus call will be directed to your method_call function, with the
// provided interface_name set to "org.freedesktop.DBus.Properties".
//
// Ownership of the BusMethodInvocation object passed to the method_call()
// function is transferred to your handler; you must call one of the methods of
// BusMethodInvocation to return a reply (possibly empty), or an error. These
// functions also take ownership of the passed-in invocation object, so unless
// the invocation object has otherwise been referenced, it will be then be
// freed. Calling one of these functions may be done within your method_call()
// implementation but it also can be done at a later point to handle the method
// asynchronously.
//
// The usual checks on the validity of the calls is performed. For Get calls, an
// error is automatically returned if the property does not exist or the
// permissions do not allow access. The same checks are performed for Set calls,
// and the provided value is also checked for being the correct type.
//
// For both Get and Set calls, the BusMethodInvocation passed to the method_call
// handler can be queried with g_dbus_method_invocation_get_property_info() to
// get a pointer to the BusPropertyInfo of the property.
//
// If you have readable properties specified in your interface info, you must
// ensure that you either provide a non-NULL get_property() function or provide
// implementations of both the Get and GetAll methods on
// org.freedesktop.DBus.Properties interface in your method_call function. Note
// that the required return type of the Get call is (v), not the type of the
// property. GetAll expects a return value of type a{sv}.
//
// If you have writable properties specified in your interface info, you must
// ensure that you either provide a non-NULL set_property() function or provide
// an implementation of the Set call. If implementing the call, you must return
// the value of type G_VARIANT_TYPE_UNIT.
//
// An instance of this type is always passed by reference.
type DBusInterfaceVTable struct {
	*dBusInterfaceVTable
}

// dBusInterfaceVTable is the struct that's finalized.
type dBusInterfaceVTable struct {
	native unsafe.Pointer
}

var GIRInfoDBusInterfaceVTable = girepository.MustFind("Gio", "DBusInterfaceVTable")

// DBusSubtreeVTable: virtual table for handling subtrees registered with
// g_dbus_connection_register_subtree().
//
// An instance of this type is always passed by reference.
type DBusSubtreeVTable struct {
	*dBusSubtreeVTable
}

// dBusSubtreeVTable is the struct that's finalized.
type dBusSubtreeVTable struct {
	native unsafe.Pointer
}

var GIRInfoDBusSubtreeVTable = girepository.MustFind("Gio", "DBusSubtreeVTable")
