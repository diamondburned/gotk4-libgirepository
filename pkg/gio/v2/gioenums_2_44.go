// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"fmt"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeNetworkConnectivity = coreglib.Type(girepository.MustFind("Gio", "NetworkConnectivity").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeNetworkConnectivity, F: marshalNetworkConnectivity},
	})
}

// NetworkConnectivity host's network connectivity state, as reported by
// Monitor.
type NetworkConnectivity C.gint

const (
	// NetworkConnectivityLocal: host is not configured with a route to the
	// Internet; it may or may not be connected to a local network.
	NetworkConnectivityLocal NetworkConnectivity = 1
	// NetworkConnectivityLimited: host is connected to a network, but does not
	// appear to be able to reach the full Internet, perhaps due to upstream
	// network problems.
	NetworkConnectivityLimited NetworkConnectivity = 2
	// NetworkConnectivityPortal: host is behind a captive portal and cannot
	// reach the full Internet.
	NetworkConnectivityPortal NetworkConnectivity = 3
	// NetworkConnectivityFull: host is connected to a network, and appears to
	// be able to reach the full Internet.
	NetworkConnectivityFull NetworkConnectivity = 4
)

func marshalNetworkConnectivity(p uintptr) (interface{}, error) {
	return NetworkConnectivity(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for NetworkConnectivity.
func (n NetworkConnectivity) String() string {
	switch n {
	case NetworkConnectivityLocal:
		return "Local"
	case NetworkConnectivityLimited:
		return "Limited"
	case NetworkConnectivityPortal:
		return "Portal"
	case NetworkConnectivityFull:
		return "Full"
	default:
		return fmt.Sprintf("NetworkConnectivity(%d)", n)
	}
}
