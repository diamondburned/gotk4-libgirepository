// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"fmt"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypePollableReturn = coreglib.Type(girepository.MustFind("Gio", "PollableReturn").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypePollableReturn, F: marshalPollableReturn},
	})
}

// PollableReturn: return value for various IO operations that signal errors via
// the return value and not necessarily via a #GError.
//
// This enum exists to be able to return errors to callers without having to
// allocate a #GError. Allocating #GErrors can be quite expensive for regularly
// happening errors like G_IO_ERROR_WOULD_BLOCK.
//
// In case of G_POLLABLE_RETURN_FAILED a #GError should be set for the operation
// to give details about the error that happened.
type PollableReturn C.gint

const (
	// PollableReturnFailed: generic error condition for when an operation
	// fails.
	PollableReturnFailed PollableReturn = 0
	// PollableReturnOK: operation was successfully finished.
	PollableReturnOK PollableReturn = 1
	// PollableReturnWouldBlock: operation would block.
	PollableReturnWouldBlock PollableReturn = -27
)

func marshalPollableReturn(p uintptr) (interface{}, error) {
	return PollableReturn(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for PollableReturn.
func (p PollableReturn) String() string {
	switch p {
	case PollableReturnFailed:
		return "Failed"
	case PollableReturnOK:
		return "OK"
	case PollableReturnWouldBlock:
		return "WouldBlock"
	default:
		return fmt.Sprintf("PollableReturn(%d)", p)
	}
}
