// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeConverterInputStream = coreglib.Type(girepository.MustFind("Gio", "ConverterInputStream").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeConverterInputStream, F: marshalConverterInputStream},
	})
}

// ConverterInputStreamOverrides contains methods that are overridable.
type ConverterInputStreamOverrides struct {
}

func defaultConverterInputStreamOverrides(v *ConverterInputStream) ConverterInputStreamOverrides {
	return ConverterInputStreamOverrides{}
}

// ConverterInputStream: converter input stream implements Stream and allows
// conversion of data of various types during reading.
//
// As of GLib 2.34, InputStream implements InputStream.
type ConverterInputStream struct {
	_ [0]func() // equal guard
	FilterInputStream

	*coreglib.Object
	InputStream
	PollableInputStream
}

var (
	_ FilterInputStreamer = (*ConverterInputStream)(nil)
	_ coreglib.Objector   = (*ConverterInputStream)(nil)
	_ InputStreamer       = (*ConverterInputStream)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*ConverterInputStream, *ConverterInputStreamClass, ConverterInputStreamOverrides](
		GTypeConverterInputStream,
		initConverterInputStreamClass,
		wrapConverterInputStream,
		defaultConverterInputStreamOverrides,
	)
}

func initConverterInputStreamClass(gclass unsafe.Pointer, overrides ConverterInputStreamOverrides, classInitFunc func(*ConverterInputStreamClass)) {
	if classInitFunc != nil {
		class := (*ConverterInputStreamClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapConverterInputStream(obj *coreglib.Object) *ConverterInputStream {
	return &ConverterInputStream{
		FilterInputStream: FilterInputStream{
			InputStream: InputStream{
				Object: obj,
			},
		},
		Object: obj,
		InputStream: InputStream{
			Object: obj,
		},
		PollableInputStream: PollableInputStream{
			InputStream: InputStream{
				Object: obj,
			},
		},
	}
}

func marshalConverterInputStream(p uintptr) (interface{}, error) {
	return wrapConverterInputStream(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConverterInputStreamClass: instance of this type is always passed by
// reference.
type ConverterInputStreamClass struct {
	*converterInputStreamClass
}

// converterInputStreamClass is the struct that's finalized.
type converterInputStreamClass struct {
	native unsafe.Pointer
}

var GIRInfoConverterInputStreamClass = girepository.MustFind("Gio", "ConverterInputStreamClass")
