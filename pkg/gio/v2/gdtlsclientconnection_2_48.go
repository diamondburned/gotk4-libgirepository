// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeDTLSClientConnection = coreglib.Type(girepository.MustFind("Gio", "DtlsClientConnection").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDTLSClientConnection, F: marshalDTLSClientConnection},
	})
}

// DTLSClientConnectionOverrider contains methods that are overridable.
type DTLSClientConnectionOverrider interface {
}

// DTLSClientConnection is the client-side subclass of Connection, representing
// a client-side DTLS connection.
//
// DTLSClientConnection wraps an interface. This means the user can get the
// underlying type by calling Cast().
type DTLSClientConnection struct {
	_ [0]func() // equal guard
	DTLSConnection
}

var ()

// DTLSClientConnectioner describes DTLSClientConnection's interface methods.
type DTLSClientConnectioner interface {
	coreglib.Objector

	baseDTLSClientConnection() *DTLSClientConnection
}

var _ DTLSClientConnectioner = (*DTLSClientConnection)(nil)

func ifaceInitDTLSClientConnectioner(gifacePtr, data C.gpointer) {
}

func wrapDTLSClientConnection(obj *coreglib.Object) *DTLSClientConnection {
	return &DTLSClientConnection{
		DTLSConnection: DTLSConnection{
			DatagramBased: DatagramBased{
				Object: obj,
			},
		},
	}
}

func marshalDTLSClientConnection(p uintptr) (interface{}, error) {
	return wrapDTLSClientConnection(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *DTLSClientConnection) baseDTLSClientConnection() *DTLSClientConnection {
	return v
}

// BaseDTLSClientConnection returns the underlying base object.
func BaseDTLSClientConnection(obj DTLSClientConnectioner) *DTLSClientConnection {
	return obj.baseDTLSClientConnection()
}

// DTLSClientConnectionInterface: vtable for a ClientConnection implementation.
//
// An instance of this type is always passed by reference.
type DTLSClientConnectionInterface struct {
	*dtlsClientConnectionInterface
}

// dtlsClientConnectionInterface is the struct that's finalized.
type dtlsClientConnectionInterface struct {
	native unsafe.Pointer
}

var GIRInfoDTLSClientConnectionInterface = girepository.MustFind("Gio", "DtlsClientConnectionInterface")
