// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeTLSConnection = coreglib.Type(girepository.MustFind("Gio", "TlsConnection").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeTLSConnection, F: marshalTLSConnection},
	})
}

// TLSConnectionOverrides contains methods that are overridable.
type TLSConnectionOverrides struct {
}

func defaultTLSConnectionOverrides(v *TLSConnection) TLSConnectionOverrides {
	return TLSConnectionOverrides{}
}

// TLSConnection is the base TLS connection class type, which wraps a OStream
// and provides TLS encryption on top of it. Its subclasses, ClientConnection
// and ServerConnection, implement client-side and server-side TLS,
// respectively.
//
// For DTLS (Datagram TLS) support, see Connection.
type TLSConnection struct {
	_ [0]func() // equal guard
	IOStream
}

var (
	_ IOStreamer = (*TLSConnection)(nil)
)

// TLSConnectioner describes types inherited from class TLSConnection.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type TLSConnectioner interface {
	coreglib.Objector
	baseTLSConnection() *TLSConnection
}

var _ TLSConnectioner = (*TLSConnection)(nil)

func init() {
	coreglib.RegisterClassInfo[*TLSConnection, *TLSConnectionClass, TLSConnectionOverrides](
		GTypeTLSConnection,
		initTLSConnectionClass,
		wrapTLSConnection,
		defaultTLSConnectionOverrides,
	)
}

func initTLSConnectionClass(gclass unsafe.Pointer, overrides TLSConnectionOverrides, classInitFunc func(*TLSConnectionClass)) {
	if classInitFunc != nil {
		class := (*TLSConnectionClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapTLSConnection(obj *coreglib.Object) *TLSConnection {
	return &TLSConnection{
		IOStream: IOStream{
			Object: obj,
		},
	}
}

func marshalTLSConnection(p uintptr) (interface{}, error) {
	return wrapTLSConnection(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *TLSConnection) baseTLSConnection() *TLSConnection {
	return v
}

// BaseTLSConnection returns the underlying base object.
func BaseTLSConnection(obj TLSConnectioner) *TLSConnection {
	return obj.baseTLSConnection()
}
