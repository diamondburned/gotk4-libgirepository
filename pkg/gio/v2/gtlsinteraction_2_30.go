// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeTLSInteraction = coreglib.Type(girepository.MustFind("Gio", "TlsInteraction").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeTLSInteraction, F: marshalTLSInteraction},
	})
}

// TLSInteractionOverrides contains methods that are overridable.
type TLSInteractionOverrides struct {
}

func defaultTLSInteractionOverrides(v *TLSInteraction) TLSInteractionOverrides {
	return TLSInteractionOverrides{}
}

// TLSInteraction provides a mechanism for the TLS connection and database code
// to interact with the user. It can be used to ask the user for passwords.
//
// To use a Interaction with a TLS connection use
// g_tls_connection_set_interaction().
//
// Callers should instantiate a derived class that implements the various
// interaction methods to show the required dialogs.
//
// Callers should use the 'invoke' functions like
// g_tls_interaction_invoke_ask_password() to run interaction methods. These
// functions make sure that the interaction is invoked in the main loop and not
// in the current thread, if the current thread is not running the main loop.
//
// Derived classes can choose to implement whichever interactions methods they'd
// like to support by overriding those virtual methods in their class
// initialization function. Any interactions not implemented will return
// G_TLS_INTERACTION_UNHANDLED. If a derived class implements an async method,
// it must also implement the corresponding finish method.
type TLSInteraction struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*TLSInteraction)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*TLSInteraction, *TLSInteractionClass, TLSInteractionOverrides](
		GTypeTLSInteraction,
		initTLSInteractionClass,
		wrapTLSInteraction,
		defaultTLSInteractionOverrides,
	)
}

func initTLSInteractionClass(gclass unsafe.Pointer, overrides TLSInteractionOverrides, classInitFunc func(*TLSInteractionClass)) {
	if classInitFunc != nil {
		class := (*TLSInteractionClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapTLSInteraction(obj *coreglib.Object) *TLSInteraction {
	return &TLSInteraction{
		Object: obj,
	}
}

func marshalTLSInteraction(p uintptr) (interface{}, error) {
	return wrapTLSInteraction(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// TLSInteractionClass class for Interaction. Derived classes implement the
// various virtual interaction methods to handle TLS interactions.
//
// Derived classes can choose to implement whichever interactions methods they'd
// like to support by overriding those virtual methods in their class
// initialization function. If a derived class implements an async method, it
// must also implement the corresponding finish method.
//
// The synchronous interaction methods should implement to display modal
// dialogs, and the asynchronous methods to display modeless dialogs.
//
// If the user cancels an interaction, then the result should be
// G_TLS_INTERACTION_FAILED and the error should be set with a domain of
// G_IO_ERROR and code of G_IO_ERROR_CANCELLED.
//
// An instance of this type is always passed by reference.
type TLSInteractionClass struct {
	*tlsInteractionClass
}

// tlsInteractionClass is the struct that's finalized.
type tlsInteractionClass struct {
	native unsafe.Pointer
}

var GIRInfoTLSInteractionClass = girepository.MustFind("Gio", "TlsInteractionClass")
