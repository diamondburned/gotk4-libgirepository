// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypePermission = coreglib.Type(girepository.MustFind("Gio", "Permission").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypePermission, F: marshalPermission},
	})
}

// PermissionOverrides contains methods that are overridable.
type PermissionOverrides struct {
}

func defaultPermissionOverrides(v *Permission) PermissionOverrides {
	return PermissionOverrides{}
}

// Permission represents the status of the caller's permission to perform a
// certain action.
//
// You can query if the action is currently allowed and if it is possible to
// acquire the permission so that the action will be allowed in the future.
//
// There is also an API to actually acquire the permission and one to release
// it.
//
// As an example, a #GPermission might represent the ability for the user to
// write to a #GSettings object. This #GPermission object could then be used to
// decide if it is appropriate to show a "Click here to unlock" button in a
// dialog and to provide the mechanism to invoke when that button is clicked.
type Permission struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Permission)(nil)
)

// Permissioner describes types inherited from class Permission.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type Permissioner interface {
	coreglib.Objector
	basePermission() *Permission
}

var _ Permissioner = (*Permission)(nil)

func init() {
	coreglib.RegisterClassInfo[*Permission, *PermissionClass, PermissionOverrides](
		GTypePermission,
		initPermissionClass,
		wrapPermission,
		defaultPermissionOverrides,
	)
}

func initPermissionClass(gclass unsafe.Pointer, overrides PermissionOverrides, classInitFunc func(*PermissionClass)) {
	if classInitFunc != nil {
		class := (*PermissionClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapPermission(obj *coreglib.Object) *Permission {
	return &Permission{
		Object: obj,
	}
}

func marshalPermission(p uintptr) (interface{}, error) {
	return wrapPermission(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *Permission) basePermission() *Permission {
	return v
}

// BasePermission returns the underlying base object.
func BasePermission(obj Permissioner) *Permission {
	return obj.basePermission()
}

// PermissionClass: instance of this type is always passed by reference.
type PermissionClass struct {
	*permissionClass
}

// permissionClass is the struct that's finalized.
type permissionClass struct {
	native unsafe.Pointer
}

var GIRInfoPermissionClass = girepository.MustFind("Gio", "PermissionClass")

func (p *PermissionClass) Reserved() [16]unsafe.Pointer {
	offset := GIRInfoPermissionClass.StructFieldOffset("reserved")
	valptr := (*[16]unsafe.Pointer)(unsafe.Add(p.native, offset))
	var _v [16]unsafe.Pointer // out
	{
		src := &*valptr
		for i := 0; i < 16; i++ {
			_v[i] = (unsafe.Pointer)(unsafe.Pointer(src[i]))
		}
	}
	return _v
}
