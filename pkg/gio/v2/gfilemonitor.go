// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeFileMonitor = coreglib.Type(girepository.MustFind("Gio", "FileMonitor").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeFileMonitor, F: marshalFileMonitor},
	})
}

// FileMonitorOverrides contains methods that are overridable.
type FileMonitorOverrides struct {
}

func defaultFileMonitorOverrides(v *FileMonitor) FileMonitorOverrides {
	return FileMonitorOverrides{}
}

// FileMonitor monitors a file or directory for changes.
//
// To obtain a Monitor for a file or directory, use g_file_monitor(),
// g_file_monitor_file(), or g_file_monitor_directory().
//
// To get informed about changes to the file or directory you are monitoring,
// connect to the Monitor::changed signal. The signal will be emitted in the
// [thread-default main context][g-main-context-push-thread-default] of the
// thread that the monitor was created in (though if the global default main
// context is blocked, this may cause notifications to be blocked even if the
// thread-default context is still running).
type FileMonitor struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*FileMonitor)(nil)
)

// FileMonitorrer describes types inherited from class FileMonitor.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type FileMonitorrer interface {
	coreglib.Objector
	baseFileMonitor() *FileMonitor
}

var _ FileMonitorrer = (*FileMonitor)(nil)

func init() {
	coreglib.RegisterClassInfo[*FileMonitor, *FileMonitorClass, FileMonitorOverrides](
		GTypeFileMonitor,
		initFileMonitorClass,
		wrapFileMonitor,
		defaultFileMonitorOverrides,
	)
}

func initFileMonitorClass(gclass unsafe.Pointer, overrides FileMonitorOverrides, classInitFunc func(*FileMonitorClass)) {
	if classInitFunc != nil {
		class := (*FileMonitorClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapFileMonitor(obj *coreglib.Object) *FileMonitor {
	return &FileMonitor{
		Object: obj,
	}
}

func marshalFileMonitor(p uintptr) (interface{}, error) {
	return wrapFileMonitor(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *FileMonitor) baseFileMonitor() *FileMonitor {
	return v
}

// BaseFileMonitor returns the underlying base object.
func BaseFileMonitor(obj FileMonitorrer) *FileMonitor {
	return obj.baseFileMonitor()
}

// FileMonitorClass: instance of this type is always passed by reference.
type FileMonitorClass struct {
	*fileMonitorClass
}

// fileMonitorClass is the struct that's finalized.
type fileMonitorClass struct {
	native unsafe.Pointer
}

var GIRInfoFileMonitorClass = girepository.MustFind("Gio", "FileMonitorClass")
