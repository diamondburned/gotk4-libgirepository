// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern gboolean _gotk4_gio2_DBusObjectSkeleton_ConnectAuthorizeMethod(gpointer, void*, void*, guintptr);
import "C"

// GType values.
var (
	GTypeDBusObjectSkeleton = coreglib.Type(girepository.MustFind("Gio", "DBusObjectSkeleton").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDBusObjectSkeleton, F: marshalDBusObjectSkeleton},
	})
}

// DBusObjectSkeletonOverrides contains methods that are overridable.
type DBusObjectSkeletonOverrides struct {
}

func defaultDBusObjectSkeletonOverrides(v *DBusObjectSkeleton) DBusObjectSkeletonOverrides {
	return DBusObjectSkeletonOverrides{}
}

// DBusObjectSkeleton instance is essentially a group of D-Bus interfaces. The
// set of exported interfaces on the object may be dynamic and change at
// runtime.
//
// This type is intended to be used with BusObjectManager.
type DBusObjectSkeleton struct {
	_ [0]func() // equal guard
	*coreglib.Object

	DBusObject
}

var (
	_ coreglib.Objector = (*DBusObjectSkeleton)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DBusObjectSkeleton, *DBusObjectSkeletonClass, DBusObjectSkeletonOverrides](
		GTypeDBusObjectSkeleton,
		initDBusObjectSkeletonClass,
		wrapDBusObjectSkeleton,
		defaultDBusObjectSkeletonOverrides,
	)
}

func initDBusObjectSkeletonClass(gclass unsafe.Pointer, overrides DBusObjectSkeletonOverrides, classInitFunc func(*DBusObjectSkeletonClass)) {
	if classInitFunc != nil {
		class := (*DBusObjectSkeletonClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDBusObjectSkeleton(obj *coreglib.Object) *DBusObjectSkeleton {
	return &DBusObjectSkeleton{
		Object: obj,
		DBusObject: DBusObject{
			Object: obj,
		},
	}
}

func marshalDBusObjectSkeleton(p uintptr) (interface{}, error) {
	return wrapDBusObjectSkeleton(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectAuthorizeMethod is emitted when a method is invoked by a remote caller
// and used to determine if the method call is authorized.
//
// This signal is like BusInterfaceSkeleton's
// BusInterfaceSkeleton::g-authorize-method signal, except that it is for the
// enclosing object.
//
// The default class handler just returns TRUE.
func (v *DBusObjectSkeleton) ConnectAuthorizeMethod(f func(iface DBusInterfaceSkeletonner, invocation *DBusMethodInvocation) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "authorize-method", false, unsafe.Pointer(C._gotk4_gio2_DBusObjectSkeleton_ConnectAuthorizeMethod), f)
}

// DBusObjectSkeletonClass class structure for BusObjectSkeleton.
//
// An instance of this type is always passed by reference.
type DBusObjectSkeletonClass struct {
	*dBusObjectSkeletonClass
}

// dBusObjectSkeletonClass is the struct that's finalized.
type dBusObjectSkeletonClass struct {
	native unsafe.Pointer
}

var GIRInfoDBusObjectSkeletonClass = girepository.MustFind("Gio", "DBusObjectSkeletonClass")
