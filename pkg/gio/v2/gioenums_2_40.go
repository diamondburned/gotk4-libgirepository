// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"fmt"
	"strings"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeTLSCertificateRequestFlags = coreglib.Type(girepository.MustFind("Gio", "TlsCertificateRequestFlags").RegisteredGType())
	GTypeSubprocessFlags            = coreglib.Type(girepository.MustFind("Gio", "SubprocessFlags").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeTLSCertificateRequestFlags, F: marshalTLSCertificateRequestFlags},
		coreglib.TypeMarshaler{T: GTypeSubprocessFlags, F: marshalSubprocessFlags},
	})
}

// TLSCertificateRequestFlags flags for g_tls_interaction_request_certificate(),
// g_tls_interaction_request_certificate_async(), and
// g_tls_interaction_invoke_request_certificate().
type TLSCertificateRequestFlags C.gint

const (
	// TLSCertificateRequestNone: no flags.
	TLSCertificateRequestNone TLSCertificateRequestFlags = iota
)

func marshalTLSCertificateRequestFlags(p uintptr) (interface{}, error) {
	return TLSCertificateRequestFlags(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for TLSCertificateRequestFlags.
func (t TLSCertificateRequestFlags) String() string {
	switch t {
	case TLSCertificateRequestNone:
		return "None"
	default:
		return fmt.Sprintf("TLSCertificateRequestFlags(%d)", t)
	}
}

// SubprocessFlags flags to define the behaviour of a #GSubprocess.
//
// Note that the default for stdin is to redirect from /dev/null. For stdout and
// stderr the default are for them to inherit the corresponding descriptor from
// the calling process.
//
// Note that it is a programmer error to mix 'incompatible' flags. For example,
// you may not request both G_SUBPROCESS_FLAGS_STDOUT_PIPE and
// G_SUBPROCESS_FLAGS_STDOUT_SILENCE.
type SubprocessFlags C.guint

const (
	// SubprocessFlagsNone: no flags.
	SubprocessFlagsNone SubprocessFlags = 0b0
	// SubprocessFlagsStdinPipe: create a pipe for the stdin of the spawned
	// process that can be accessed with g_subprocess_get_stdin_pipe().
	SubprocessFlagsStdinPipe SubprocessFlags = 0b1
	// SubprocessFlagsStdinInherit: stdin is inherited from the calling process.
	SubprocessFlagsStdinInherit SubprocessFlags = 0b10
	// SubprocessFlagsStdoutPipe: create a pipe for the stdout of the spawned
	// process that can be accessed with g_subprocess_get_stdout_pipe().
	SubprocessFlagsStdoutPipe SubprocessFlags = 0b100
	// SubprocessFlagsStdoutSilence: silence the stdout of the spawned process
	// (ie: redirect to /dev/null).
	SubprocessFlagsStdoutSilence SubprocessFlags = 0b1000
	// SubprocessFlagsStderrPipe: create a pipe for the stderr of the spawned
	// process that can be accessed with g_subprocess_get_stderr_pipe().
	SubprocessFlagsStderrPipe SubprocessFlags = 0b10000
	// SubprocessFlagsStderrSilence: silence the stderr of the spawned process
	// (ie: redirect to /dev/null).
	SubprocessFlagsStderrSilence SubprocessFlags = 0b100000
	// SubprocessFlagsStderrMerge: merge the stderr of the spawned process with
	// whatever the stdout happens to be. This is a good way of directing both
	// streams to a common log file, for example.
	SubprocessFlagsStderrMerge SubprocessFlags = 0b1000000
	// SubprocessFlagsInheritFds: spawned processes will inherit the file
	// descriptors of their parent, unless those descriptors have been
	// explicitly marked as close-on-exec. This flag has no effect over the
	// "standard" file descriptors (stdin, stdout, stderr).
	SubprocessFlagsInheritFds SubprocessFlags = 0b10000000
)

func marshalSubprocessFlags(p uintptr) (interface{}, error) {
	return SubprocessFlags(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for SubprocessFlags.
func (s SubprocessFlags) String() string {
	if s == 0 {
		return "SubprocessFlags(0)"
	}

	var builder strings.Builder
	builder.Grow(235)

	for s != 0 {
		next := s & (s - 1)
		bit := s - next

		switch bit {
		case SubprocessFlagsNone:
			builder.WriteString("None|")
		case SubprocessFlagsStdinPipe:
			builder.WriteString("StdinPipe|")
		case SubprocessFlagsStdinInherit:
			builder.WriteString("StdinInherit|")
		case SubprocessFlagsStdoutPipe:
			builder.WriteString("StdoutPipe|")
		case SubprocessFlagsStdoutSilence:
			builder.WriteString("StdoutSilence|")
		case SubprocessFlagsStderrPipe:
			builder.WriteString("StderrPipe|")
		case SubprocessFlagsStderrSilence:
			builder.WriteString("StderrSilence|")
		case SubprocessFlagsStderrMerge:
			builder.WriteString("StderrMerge|")
		case SubprocessFlagsInheritFds:
			builder.WriteString("InheritFds|")
		default:
			builder.WriteString(fmt.Sprintf("SubprocessFlags(0b%b)|", bit))
		}

		s = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if s contains other.
func (s SubprocessFlags) Has(other SubprocessFlags) bool {
	return (s & other) == other
}
