// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"fmt"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeEmblemOrigin = coreglib.Type(girepository.MustFind("Gio", "EmblemOrigin").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeEmblemOrigin, F: marshalEmblemOrigin},
	})
}

// EmblemOrigin is used to add information about the origin of the emblem to
// #GEmblem.
type EmblemOrigin C.gint

const (
	// EmblemOriginUnknown: emblem of unknown origin.
	EmblemOriginUnknown EmblemOrigin = iota
	// EmblemOriginDevice: emblem adds device-specific information.
	EmblemOriginDevice
	// EmblemOriginLivemetadata: emblem depicts live metadata, such as
	// "readonly".
	EmblemOriginLivemetadata
	// EmblemOriginTag: emblem comes from a user-defined tag, e.g. set by
	// nautilus (in the future).
	EmblemOriginTag
)

func marshalEmblemOrigin(p uintptr) (interface{}, error) {
	return EmblemOrigin(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for EmblemOrigin.
func (e EmblemOrigin) String() string {
	switch e {
	case EmblemOriginUnknown:
		return "Unknown"
	case EmblemOriginDevice:
		return "Device"
	case EmblemOriginLivemetadata:
		return "Livemetadata"
	case EmblemOriginTag:
		return "Tag"
	default:
		return fmt.Sprintf("EmblemOrigin(%d)", e)
	}
}
