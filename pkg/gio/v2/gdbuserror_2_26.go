// Code generated by girgen. DO NOT EDIT.

package gio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// DBusErrorEntry: struct used in g_dbus_error_register_error_domain().
//
// An instance of this type is always passed by reference.
type DBusErrorEntry struct {
	*dBusErrorEntry
}

// dBusErrorEntry is the struct that's finalized.
type dBusErrorEntry struct {
	native unsafe.Pointer
}

var GIRInfoDBusErrorEntry = girepository.MustFind("Gio", "DBusErrorEntry")

// ErrorCode: error code.
func (d *DBusErrorEntry) ErrorCode() int {
	offset := GIRInfoDBusErrorEntry.StructFieldOffset("error_code")
	valptr := (*int)(unsafe.Add(d.native, offset))
	var _v int // out
	_v = int(*valptr)
	return _v
}

// DBusErrorName d-Bus error name to associate with error_code.
func (d *DBusErrorEntry) DBusErrorName() string {
	offset := GIRInfoDBusErrorEntry.StructFieldOffset("dbus_error_name")
	valptr := (*string)(unsafe.Add(d.native, offset))
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// ErrorCode: error code.
func (d *DBusErrorEntry) SetErrorCode(errorCode int) {
	offset := GIRInfoDBusErrorEntry.StructFieldOffset("error_code")
	valptr := (*C.gint)(unsafe.Add(d.native, offset))
	*valptr = C.gint(errorCode)
}
