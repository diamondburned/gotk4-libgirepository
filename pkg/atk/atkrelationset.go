// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeRelationSet = coreglib.Type(girepository.MustFind("Atk", "RelationSet").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeRelationSet, F: marshalRelationSet},
	})
}

// RelationSetOverrides contains methods that are overridable.
type RelationSetOverrides struct {
}

func defaultRelationSetOverrides(v *RelationSet) RelationSetOverrides {
	return RelationSetOverrides{}
}

// RelationSet held by an object establishes its relationships with objects
// beyond the normal "parent/child" hierarchical relationships that all user
// interface objects have. AtkRelationSets establish whether objects are
// labelled or controlled by other components, share group membership with other
// components (for instance within a radio-button group), or share content which
// "flows" between them, among other types of possible relationships.
type RelationSet struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*RelationSet)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*RelationSet, *RelationSetClass, RelationSetOverrides](
		GTypeRelationSet,
		initRelationSetClass,
		wrapRelationSet,
		defaultRelationSetOverrides,
	)
}

func initRelationSetClass(gclass unsafe.Pointer, overrides RelationSetOverrides, classInitFunc func(*RelationSetClass)) {
	if classInitFunc != nil {
		class := (*RelationSetClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapRelationSet(obj *coreglib.Object) *RelationSet {
	return &RelationSet{
		Object: obj,
	}
}

func marshalRelationSet(p uintptr) (interface{}, error) {
	return wrapRelationSet(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// RelationSetClass: instance of this type is always passed by reference.
type RelationSetClass struct {
	*relationSetClass
}

// relationSetClass is the struct that's finalized.
type relationSetClass struct {
	native unsafe.Pointer
}

var GIRInfoRelationSetClass = girepository.MustFind("Atk", "RelationSetClass")
