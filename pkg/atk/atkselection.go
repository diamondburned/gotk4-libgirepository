// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_atk1_Selection_ConnectSelectionChanged(gpointer, guintptr);
import "C"

// GType values.
var (
	GTypeSelection = coreglib.Type(girepository.MustFind("Atk", "Selection").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeSelection, F: marshalSelection},
	})
}

// SelectionOverrider contains methods that are overridable.
type SelectionOverrider interface {
}

// Selection should be implemented by UI components with children which are
// exposed by #atk_object_ref_child and #atk_object_get_n_children, if the use
// of the parent UI component ordinarily involves selection of one or more of
// the objects corresponding to those Object children - for example, selectable
// lists.
//
// Note that other types of "selection" (for instance text selection) are
// accomplished a other ATK interfaces - Selection is limited to the
// selection/deselection of children.
//
// Selection wraps an interface. This means the user can get the
// underlying type by calling Cast().
type Selection struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Selection)(nil)
)

// Selectioner describes Selection's interface methods.
type Selectioner interface {
	coreglib.Objector

	baseSelection() *Selection
}

var _ Selectioner = (*Selection)(nil)

func ifaceInitSelectioner(gifacePtr, data C.gpointer) {
}

func wrapSelection(obj *coreglib.Object) *Selection {
	return &Selection{
		Object: obj,
	}
}

func marshalSelection(p uintptr) (interface{}, error) {
	return wrapSelection(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *Selection) baseSelection() *Selection {
	return v
}

// BaseSelection returns the underlying base object.
func BaseSelection(obj Selectioner) *Selection {
	return obj.baseSelection()
}

// ConnectSelectionChanged: "selection-changed" signal is emitted by an object
// which implements AtkSelection interface when the selection changes.
func (v *Selection) ConnectSelectionChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "selection-changed", false, unsafe.Pointer(C._gotk4_atk1_Selection_ConnectSelectionChanged), f)
}

// SelectionIface: instance of this type is always passed by reference.
type SelectionIface struct {
	*selectionIface
}

// selectionIface is the struct that's finalized.
type selectionIface struct {
	native unsafe.Pointer
}

var GIRInfoSelectionIface = girepository.MustFind("Atk", "SelectionIface")
