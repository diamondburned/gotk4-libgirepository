// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_atk1_Hypertext_ConnectLinkSelected(gpointer, gint, guintptr);
import "C"

// GType values.
var (
	GTypeHypertext = coreglib.Type(girepository.MustFind("Atk", "Hypertext").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeHypertext, F: marshalHypertext},
	})
}

// HypertextOverrider contains methods that are overridable.
type HypertextOverrider interface {
}

// Hypertext: interface used for objects which implement linking between
// multiple resource or content locations, or multiple 'markers' within a single
// document. A Hypertext instance is associated with one or more Hyperlinks,
// which are associated with particular offsets within the Hypertext's included
// content. While this interface is derived from Text, there is no requirement
// that Hypertext instances have textual content; they may implement Image as
// well, and Hyperlinks need not have non-zero text offsets.
//
// Hypertext wraps an interface. This means the user can get the
// underlying type by calling Cast().
type Hypertext struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Hypertext)(nil)
)

// Hypertexter describes Hypertext's interface methods.
type Hypertexter interface {
	coreglib.Objector

	baseHypertext() *Hypertext
}

var _ Hypertexter = (*Hypertext)(nil)

func ifaceInitHypertexter(gifacePtr, data C.gpointer) {
}

func wrapHypertext(obj *coreglib.Object) *Hypertext {
	return &Hypertext{
		Object: obj,
	}
}

func marshalHypertext(p uintptr) (interface{}, error) {
	return wrapHypertext(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *Hypertext) baseHypertext() *Hypertext {
	return v
}

// BaseHypertext returns the underlying base object.
func BaseHypertext(obj Hypertexter) *Hypertext {
	return obj.baseHypertext()
}

// ConnectLinkSelected: "link-selected" signal is emitted by an AtkHyperText
// object when one of the hyperlinks associated with the object is selected.
func (v *Hypertext) ConnectLinkSelected(f func(arg1 int)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "link-selected", false, unsafe.Pointer(C._gotk4_atk1_Hypertext_ConnectLinkSelected), f)
}

// HypertextIface: instance of this type is always passed by reference.
type HypertextIface struct {
	*hypertextIface
}

// hypertextIface is the struct that's finalized.
type hypertextIface struct {
	native unsafe.Pointer
}

var GIRInfoHypertextIface = girepository.MustFind("Atk", "HypertextIface")
