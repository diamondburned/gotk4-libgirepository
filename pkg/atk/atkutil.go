// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"fmt"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeCoordType    = coreglib.Type(girepository.MustFind("Atk", "CoordType").RegisteredGType())
	GTypeKeyEventType = coreglib.Type(girepository.MustFind("Atk", "KeyEventType").RegisteredGType())
	GTypeUtil         = coreglib.Type(girepository.MustFind("Atk", "Util").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeCoordType, F: marshalCoordType},
		coreglib.TypeMarshaler{T: GTypeKeyEventType, F: marshalKeyEventType},
		coreglib.TypeMarshaler{T: GTypeUtil, F: marshalUtil},
	})
}

// CoordType specifies how xy coordinates are to be interpreted. Used by
// functions such as atk_component_get_position() and
// atk_text_get_character_extents().
type CoordType C.gint

const (
	// XYScreen specifies xy coordinates relative to the screen.
	XYScreen CoordType = iota
	// XYWindow specifies xy coordinates relative to the widget's top-level
	// window.
	XYWindow
	// XYParent specifies xy coordinates relative to the widget's immediate
	// parent. Since: 2.30.
	XYParent
)

func marshalCoordType(p uintptr) (interface{}, error) {
	return CoordType(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for CoordType.
func (c CoordType) String() string {
	switch c {
	case XYScreen:
		return "Screen"
	case XYWindow:
		return "Window"
	case XYParent:
		return "Parent"
	default:
		return fmt.Sprintf("CoordType(%d)", c)
	}
}

// KeyEventType specifies the type of a keyboard evemt.
type KeyEventType C.gint

const (
	// KeyEventPress specifies a key press event.
	KeyEventPress KeyEventType = iota
	// KeyEventRelease specifies a key release event.
	KeyEventRelease
	// KeyEventLastDefined: not a valid value; specifies end of enumeration.
	KeyEventLastDefined
)

func marshalKeyEventType(p uintptr) (interface{}, error) {
	return KeyEventType(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for KeyEventType.
func (k KeyEventType) String() string {
	switch k {
	case KeyEventPress:
		return "Press"
	case KeyEventRelease:
		return "Release"
	case KeyEventLastDefined:
		return "LastDefined"
	default:
		return fmt.Sprintf("KeyEventType(%d)", k)
	}
}

// KeySnoopFunc is a type of callback which is called whenever a key event
// occurs, if registered via atk_add_key_event_listener. It allows for
// pre-emptive interception of key events via the return code as described
// below.
type KeySnoopFunc func(event *KeyEventStruct) (gint int)

// UtilOverrides contains methods that are overridable.
type UtilOverrides struct {
}

func defaultUtilOverrides(v *Util) UtilOverrides {
	return UtilOverrides{}
}

// Util: set of ATK utility functions which are used to support event
// registration of various types, and obtaining the 'root' accessible of a
// process and information about the current ATK implementation and toolkit
// version.
type Util struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Util)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*Util, *UtilClass, UtilOverrides](
		GTypeUtil,
		initUtilClass,
		wrapUtil,
		defaultUtilOverrides,
	)
}

func initUtilClass(gclass unsafe.Pointer, overrides UtilOverrides, classInitFunc func(*UtilClass)) {
	if classInitFunc != nil {
		class := (*UtilClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapUtil(obj *coreglib.Object) *Util {
	return &Util{
		Object: obj,
	}
}

func marshalUtil(p uintptr) (interface{}, error) {
	return wrapUtil(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// KeyEventStruct encapsulates information about a key event.
//
// An instance of this type is always passed by reference.
type KeyEventStruct struct {
	*keyEventStruct
}

// keyEventStruct is the struct that's finalized.
type keyEventStruct struct {
	native unsafe.Pointer
}

var GIRInfoKeyEventStruct = girepository.MustFind("Atk", "KeyEventStruct")

// Type: atkKeyEventType, generally one of ATK_KEY_EVENT_PRESS or
// ATK_KEY_EVENT_RELEASE.
func (k *KeyEventStruct) Type() int {
	offset := GIRInfoKeyEventStruct.StructFieldOffset("type")
	valptr := (*int)(unsafe.Add(k.native, offset))
	var _v int // out
	_v = int(*valptr)
	return _v
}

// State: bitmask representing the state of the modifier keys immediately after
// the event takes place. The meaning of the bits is currently defined to match
// the bitmask used by GDK in GdkEventType.state, see
// http://developer.gnome.org/doc/API/2.0/gdk/gdk-Event-Structures.htmlEventKey.
func (k *KeyEventStruct) State() uint {
	offset := GIRInfoKeyEventStruct.StructFieldOffset("state")
	valptr := (*uint)(unsafe.Add(k.native, offset))
	var _v uint // out
	_v = uint(*valptr)
	return _v
}

// Keyval: guint representing a keysym value corresponding to those used by GDK
// and X11: see /usr/X11/include/keysymdef.h.
func (k *KeyEventStruct) Keyval() uint {
	offset := GIRInfoKeyEventStruct.StructFieldOffset("keyval")
	valptr := (*uint)(unsafe.Add(k.native, offset))
	var _v uint // out
	_v = uint(*valptr)
	return _v
}

// Length: length of member #string.
func (k *KeyEventStruct) Length() int {
	offset := GIRInfoKeyEventStruct.StructFieldOffset("length")
	valptr := (*int)(unsafe.Add(k.native, offset))
	var _v int // out
	_v = int(*valptr)
	return _v
}

// String: string containing one of the following: either a string approximating
// the text that would result from this keypress, if the key is a control or
// graphic character, or a symbolic name for this keypress. Alphanumeric and
// printable keys will have the symbolic key name in this string member, for
// instance "A". "0", "semicolon", "aacute". Keypad keys have the prefix "KP".
func (k *KeyEventStruct) String() string {
	offset := GIRInfoKeyEventStruct.StructFieldOffset("string")
	valptr := (*string)(unsafe.Add(k.native, offset))
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// Keycode: raw hardware code that generated the key event. This field is raraly
// useful.
func (k *KeyEventStruct) Keycode() uint16 {
	offset := GIRInfoKeyEventStruct.StructFieldOffset("keycode")
	valptr := (*uint16)(unsafe.Add(k.native, offset))
	var _v uint16 // out
	_v = uint16(*valptr)
	return _v
}

// Timestamp: timestamp in milliseconds indicating when the event occurred.
// These timestamps are relative to a starting point which should be considered
// arbitrary, and only used to compare the dispatch times of events to one
// another.
func (k *KeyEventStruct) Timestamp() uint32 {
	offset := GIRInfoKeyEventStruct.StructFieldOffset("timestamp")
	valptr := (*uint32)(unsafe.Add(k.native, offset))
	var _v uint32 // out
	_v = uint32(*valptr)
	return _v
}

// Type: atkKeyEventType, generally one of ATK_KEY_EVENT_PRESS or
// ATK_KEY_EVENT_RELEASE.
func (k *KeyEventStruct) SetType(typ int) {
	offset := GIRInfoKeyEventStruct.StructFieldOffset("type")
	valptr := (*C.gint)(unsafe.Add(k.native, offset))
	*valptr = C.gint(typ)
}

// State: bitmask representing the state of the modifier keys immediately after
// the event takes place. The meaning of the bits is currently defined to match
// the bitmask used by GDK in GdkEventType.state, see
// http://developer.gnome.org/doc/API/2.0/gdk/gdk-Event-Structures.htmlEventKey.
func (k *KeyEventStruct) SetState(state uint) {
	offset := GIRInfoKeyEventStruct.StructFieldOffset("state")
	valptr := (*C.guint)(unsafe.Add(k.native, offset))
	*valptr = C.guint(state)
}

// Keyval: guint representing a keysym value corresponding to those used by GDK
// and X11: see /usr/X11/include/keysymdef.h.
func (k *KeyEventStruct) SetKeyval(keyval uint) {
	offset := GIRInfoKeyEventStruct.StructFieldOffset("keyval")
	valptr := (*C.guint)(unsafe.Add(k.native, offset))
	*valptr = C.guint(keyval)
}

// Length: length of member #string.
func (k *KeyEventStruct) SetLength(length int) {
	offset := GIRInfoKeyEventStruct.StructFieldOffset("length")
	valptr := (*C.gint)(unsafe.Add(k.native, offset))
	*valptr = C.gint(length)
}

// Keycode: raw hardware code that generated the key event. This field is raraly
// useful.
func (k *KeyEventStruct) SetKeycode(keycode uint16) {
	offset := GIRInfoKeyEventStruct.StructFieldOffset("keycode")
	valptr := (*C.guint16)(unsafe.Add(k.native, offset))
	*valptr = C.guint16(keycode)
}

// Timestamp: timestamp in milliseconds indicating when the event occurred.
// These timestamps are relative to a starting point which should be considered
// arbitrary, and only used to compare the dispatch times of events to one
// another.
func (k *KeyEventStruct) SetTimestamp(timestamp uint32) {
	offset := GIRInfoKeyEventStruct.StructFieldOffset("timestamp")
	valptr := (*C.guint32)(unsafe.Add(k.native, offset))
	*valptr = C.guint32(timestamp)
}

// UtilClass: instance of this type is always passed by reference.
type UtilClass struct {
	*utilClass
}

// utilClass is the struct that's finalized.
type utilClass struct {
	native unsafe.Pointer
}

var GIRInfoUtilClass = girepository.MustFind("Atk", "UtilClass")
