// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_atk1_Component_ConnectBoundsChanged(gpointer, void*, guintptr);
import "C"

// GType values.
var (
	GTypeComponent = coreglib.Type(girepository.MustFind("Atk", "Component").RegisteredGType())
	GTypeRectangle = coreglib.Type(girepository.MustFind("Atk", "Rectangle").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeComponent, F: marshalComponent},
		coreglib.TypeMarshaler{T: GTypeRectangle, F: marshalRectangle},
	})
}

// ComponentOverrider contains methods that are overridable.
type ComponentOverrider interface {
}

// Component should be implemented by most if not all UI elements with an actual
// on-screen presence, i.e. components which can be said to have a
// screen-coordinate bounding box. Virtually all widgets will need to have
// Component implementations provided for their corresponding Object class. In
// short, only UI elements which are *not* GUI elements will omit this ATK
// interface.
//
// A possible exception might be textual information with a transparent
// background, in which case text glyph bounding box information is provided by
// Text.
//
// Component wraps an interface. This means the user can get the
// underlying type by calling Cast().
type Component struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Component)(nil)
)

// Componenter describes Component's interface methods.
type Componenter interface {
	coreglib.Objector

	baseComponent() *Component
}

var _ Componenter = (*Component)(nil)

func ifaceInitComponenter(gifacePtr, data C.gpointer) {
}

func wrapComponent(obj *coreglib.Object) *Component {
	return &Component{
		Object: obj,
	}
}

func marshalComponent(p uintptr) (interface{}, error) {
	return wrapComponent(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *Component) baseComponent() *Component {
	return v
}

// BaseComponent returns the underlying base object.
func BaseComponent(obj Componenter) *Component {
	return obj.baseComponent()
}

// ConnectBoundsChanged: 'bounds-changed" signal is emitted when the bposition
// or size of the component changes.
func (v *Component) ConnectBoundsChanged(f func(arg1 *Rectangle)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "bounds-changed", false, unsafe.Pointer(C._gotk4_atk1_Component_ConnectBoundsChanged), f)
}

// ComponentIface: atkComponent interface should be supported by any object that
// is rendered on the screen. The interface provides the standard mechanism for
// an assistive technology to determine and set the graphical representation of
// an object.
//
// An instance of this type is always passed by reference.
type ComponentIface struct {
	*componentIface
}

// componentIface is the struct that's finalized.
type componentIface struct {
	native unsafe.Pointer
}

var GIRInfoComponentIface = girepository.MustFind("Atk", "ComponentIface")

// Rectangle: data structure for holding a rectangle. Those coordinates are
// relative to the component top-level parent.
//
// An instance of this type is always passed by reference.
type Rectangle struct {
	*rectangle
}

// rectangle is the struct that's finalized.
type rectangle struct {
	native unsafe.Pointer
}

var GIRInfoRectangle = girepository.MustFind("Atk", "Rectangle")

func marshalRectangle(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &Rectangle{&rectangle{(unsafe.Pointer)(b)}}, nil
}

// NewRectangle creates a new Rectangle instance from the given
// fields. Beware that this function allocates on the Go heap; be careful
// when using it!
func NewRectangle(x, y, width, height int) Rectangle {
	var f0 C.gint // out
	f0 = C.gint(x)
	var f1 C.gint // out
	f1 = C.gint(y)
	var f2 C.gint // out
	f2 = C.gint(width)
	var f3 C.gint // out
	f3 = C.gint(height)

	size := GIRInfoRectangle.StructSize()
	native := make([]byte, size)
	gextras.Sink(&native[0])

	offset0 := GIRInfoRectangle.StructFieldOffset("x")
	valptr0 := (*C.gint)(unsafe.Add(unsafe.Pointer(&native[0]), offset0))
	*valptr0 = f0

	offset1 := GIRInfoRectangle.StructFieldOffset("y")
	valptr1 := (*C.gint)(unsafe.Add(unsafe.Pointer(&native[0]), offset1))
	*valptr1 = f1

	offset2 := GIRInfoRectangle.StructFieldOffset("width")
	valptr2 := (*C.gint)(unsafe.Add(unsafe.Pointer(&native[0]), offset2))
	*valptr2 = f2

	offset3 := GIRInfoRectangle.StructFieldOffset("height")
	valptr3 := (*C.gint)(unsafe.Add(unsafe.Pointer(&native[0]), offset3))
	*valptr3 = f3

	return *(*Rectangle)(gextras.NewStructNative(unsafe.Pointer(&native[0])))
}

// X coordinate of the left side of the rectangle.
func (r *Rectangle) X() int {
	offset := GIRInfoRectangle.StructFieldOffset("x")
	valptr := (*int)(unsafe.Add(r.native, offset))
	var _v int // out
	_v = int(*valptr)
	return _v
}

// Y coordinate of the top side of the rectangle.
func (r *Rectangle) Y() int {
	offset := GIRInfoRectangle.StructFieldOffset("y")
	valptr := (*int)(unsafe.Add(r.native, offset))
	var _v int // out
	_v = int(*valptr)
	return _v
}

// Width: width of the rectangle.
func (r *Rectangle) Width() int {
	offset := GIRInfoRectangle.StructFieldOffset("width")
	valptr := (*int)(unsafe.Add(r.native, offset))
	var _v int // out
	_v = int(*valptr)
	return _v
}

// Height: height of the rectangle.
func (r *Rectangle) Height() int {
	offset := GIRInfoRectangle.StructFieldOffset("height")
	valptr := (*int)(unsafe.Add(r.native, offset))
	var _v int // out
	_v = int(*valptr)
	return _v
}

// X coordinate of the left side of the rectangle.
func (r *Rectangle) SetX(x int) {
	offset := GIRInfoRectangle.StructFieldOffset("x")
	valptr := (*C.gint)(unsafe.Add(r.native, offset))
	*valptr = C.gint(x)
}

// Y coordinate of the top side of the rectangle.
func (r *Rectangle) SetY(y int) {
	offset := GIRInfoRectangle.StructFieldOffset("y")
	valptr := (*C.gint)(unsafe.Add(r.native, offset))
	*valptr = C.gint(y)
}

// Width: width of the rectangle.
func (r *Rectangle) SetWidth(width int) {
	offset := GIRInfoRectangle.StructFieldOffset("width")
	valptr := (*C.gint)(unsafe.Add(r.native, offset))
	*valptr = C.gint(width)
}

// Height: height of the rectangle.
func (r *Rectangle) SetHeight(height int) {
	offset := GIRInfoRectangle.StructFieldOffset("height")
	valptr := (*C.gint)(unsafe.Add(r.native, offset))
	*valptr = C.gint(height)
}
