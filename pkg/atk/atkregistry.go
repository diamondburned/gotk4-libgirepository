// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeRegistry = coreglib.Type(girepository.MustFind("Atk", "Registry").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeRegistry, F: marshalRegistry},
	})
}

// RegistryOverrides contains methods that are overridable.
type RegistryOverrides struct {
}

func defaultRegistryOverrides(v *Registry) RegistryOverrides {
	return RegistryOverrides{}
}

// Registry is normally used to create appropriate ATK "peers" for user
// interface components. Application developers usually need only interact with
// the AtkRegistry by associating appropriate ATK implementation classes with
// GObject classes via the atk_registry_set_factory_type call, passing the
// appropriate GType for application custom widget classes.
type Registry struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Registry)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*Registry, *RegistryClass, RegistryOverrides](
		GTypeRegistry,
		initRegistryClass,
		wrapRegistry,
		defaultRegistryOverrides,
	)
}

func initRegistryClass(gclass unsafe.Pointer, overrides RegistryOverrides, classInitFunc func(*RegistryClass)) {
	if classInitFunc != nil {
		class := (*RegistryClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapRegistry(obj *coreglib.Object) *Registry {
	return &Registry{
		Object: obj,
	}
}

func marshalRegistry(p uintptr) (interface{}, error) {
	return wrapRegistry(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// RegistryClass: instance of this type is always passed by reference.
type RegistryClass struct {
	*registryClass
}

// registryClass is the struct that's finalized.
type registryClass struct {
	native unsafe.Pointer
}

var GIRInfoRegistryClass = girepository.MustFind("Atk", "RegistryClass")
