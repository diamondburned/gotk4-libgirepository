// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeAction = coreglib.Type(girepository.MustFind("Atk", "Action").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeAction, F: marshalAction},
	})
}

// ActionOverrider contains methods that are overridable.
type ActionOverrider interface {
}

// Action should be implemented by instances of Object classes with which the
// user can interact directly, i.e. buttons, checkboxes, scrollbars, e.g.
// components which are not "passive" providers of UI information.
//
// Exceptions: when the user interaction is already covered by another
// appropriate interface such as EditableText (insert/delete text, etc.) or
// Value (set value) then these actions should not be exposed by Action as well.
//
// Though most UI interactions on components should be invocable via keyboard as
// well as mouse, there will generally be a close mapping between "mouse
// actions" that are possible on a component and the AtkActions. Where mouse and
// keyboard actions are redundant in effect, Action should expose only one
// action rather than exposing redundant actions if possible. By convention we
// have been using "mouse centric" terminology for Action names.
//
// Action wraps an interface. This means the user can get the
// underlying type by calling Cast().
type Action struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Action)(nil)
)

// Actioner describes Action's interface methods.
type Actioner interface {
	coreglib.Objector

	baseAction() *Action
}

var _ Actioner = (*Action)(nil)

func ifaceInitActioner(gifacePtr, data C.gpointer) {
}

func wrapAction(obj *coreglib.Object) *Action {
	return &Action{
		Object: obj,
	}
}

func marshalAction(p uintptr) (interface{}, error) {
	return wrapAction(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *Action) baseAction() *Action {
	return v
}

// BaseAction returns the underlying base object.
func BaseAction(obj Actioner) *Action {
	return obj.baseAction()
}

// ActionIface interface should be supported by any object that can perform one
// or more actions. The interface provides the standard mechanism for an
// assistive technology to determine what those actions are as well as tell the
// object to perform them. Any object that can be manipulated should support
// this interface.
//
// An instance of this type is always passed by reference.
type ActionIface struct {
	*actionIface
}

// actionIface is the struct that's finalized.
type actionIface struct {
	native unsafe.Pointer
}

var GIRInfoActionIface = girepository.MustFind("Atk", "ActionIface")
