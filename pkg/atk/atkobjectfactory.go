// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeObjectFactory = coreglib.Type(girepository.MustFind("Atk", "ObjectFactory").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeObjectFactory, F: marshalObjectFactory},
	})
}

// ObjectFactoryOverrides contains methods that are overridable.
type ObjectFactoryOverrides struct {
}

func defaultObjectFactoryOverrides(v *ObjectFactory) ObjectFactoryOverrides {
	return ObjectFactoryOverrides{}
}

// ObjectFactory: this class is the base object class for a factory used to
// create an accessible object for a specific GType. The function
// atk_registry_set_factory_type() is normally called to store in the registry
// the factory type to be used to create an accessible of a particular GType.
type ObjectFactory struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*ObjectFactory)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*ObjectFactory, *ObjectFactoryClass, ObjectFactoryOverrides](
		GTypeObjectFactory,
		initObjectFactoryClass,
		wrapObjectFactory,
		defaultObjectFactoryOverrides,
	)
}

func initObjectFactoryClass(gclass unsafe.Pointer, overrides ObjectFactoryOverrides, classInitFunc func(*ObjectFactoryClass)) {
	if classInitFunc != nil {
		class := (*ObjectFactoryClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapObjectFactory(obj *coreglib.Object) *ObjectFactory {
	return &ObjectFactory{
		Object: obj,
	}
}

func marshalObjectFactory(p uintptr) (interface{}, error) {
	return wrapObjectFactory(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ObjectFactoryClass: instance of this type is always passed by reference.
type ObjectFactoryClass struct {
	*objectFactoryClass
}

// objectFactoryClass is the struct that's finalized.
type objectFactoryClass struct {
	native unsafe.Pointer
}

var GIRInfoObjectFactoryClass = girepository.MustFind("Atk", "ObjectFactoryClass")
