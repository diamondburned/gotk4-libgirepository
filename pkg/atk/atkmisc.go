// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeMisc = coreglib.Type(girepository.MustFind("Atk", "Misc").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeMisc, F: marshalMisc},
	})
}

// MiscOverrides contains methods that are overridable.
type MiscOverrides struct {
}

func defaultMiscOverrides(v *Misc) MiscOverrides {
	return MiscOverrides{}
}

// Misc: set of utility functions for thread locking. This interface and all his
// related methods are deprecated since 2.12.
type Misc struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Misc)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*Misc, *MiscClass, MiscOverrides](
		GTypeMisc,
		initMiscClass,
		wrapMisc,
		defaultMiscOverrides,
	)
}

func initMiscClass(gclass unsafe.Pointer, overrides MiscOverrides, classInitFunc func(*MiscClass)) {
	if classInitFunc != nil {
		class := (*MiscClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapMisc(obj *coreglib.Object) *Misc {
	return &Misc{
		Object: obj,
	}
}

func marshalMisc(p uintptr) (interface{}, error) {
	return wrapMisc(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// MiscClass: usage of AtkMisc is deprecated since 2.12 and heavily discouraged.
//
// An instance of this type is always passed by reference.
type MiscClass struct {
	*miscClass
}

// miscClass is the struct that's finalized.
type miscClass struct {
	native unsafe.Pointer
}

var GIRInfoMiscClass = girepository.MustFind("Atk", "MiscClass")

func (m *MiscClass) Vfuncs() [32]unsafe.Pointer {
	offset := GIRInfoMiscClass.StructFieldOffset("vfuncs")
	valptr := (*[32]unsafe.Pointer)(unsafe.Add(m.native, offset))
	var _v [32]unsafe.Pointer // out
	{
		src := &*valptr
		for i := 0; i < 32; i++ {
			_v[i] = (unsafe.Pointer)(unsafe.Pointer(src[i]))
		}
	}
	return _v
}
