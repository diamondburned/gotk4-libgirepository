// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeEditableText = coreglib.Type(girepository.MustFind("Atk", "EditableText").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeEditableText, F: marshalEditableText},
	})
}

// EditableTextOverrider contains methods that are overridable.
type EditableTextOverrider interface {
}

// EditableText should be implemented by UI components which contain text which
// the user can edit, via the Object corresponding to that component (see
// Object).
//
// EditableText is a subclass of Text, and as such, an object which implements
// EditableText is by definition an Text implementor as well.
//
// See also: Text.
//
// EditableText wraps an interface. This means the user can get the
// underlying type by calling Cast().
type EditableText struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*EditableText)(nil)
)

// EditableTexter describes EditableText's interface methods.
type EditableTexter interface {
	coreglib.Objector

	baseEditableText() *EditableText
}

var _ EditableTexter = (*EditableText)(nil)

func ifaceInitEditableTexter(gifacePtr, data C.gpointer) {
}

func wrapEditableText(obj *coreglib.Object) *EditableText {
	return &EditableText{
		Object: obj,
	}
}

func marshalEditableText(p uintptr) (interface{}, error) {
	return wrapEditableText(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *EditableText) baseEditableText() *EditableText {
	return v
}

// BaseEditableText returns the underlying base object.
func BaseEditableText(obj EditableTexter) *EditableText {
	return obj.baseEditableText()
}

// EditableTextIface: instance of this type is always passed by reference.
type EditableTextIface struct {
	*editableTextIface
}

// editableTextIface is the struct that's finalized.
type editableTextIface struct {
	native unsafe.Pointer
}

var GIRInfoEditableTextIface = girepository.MustFind("Atk", "EditableTextIface")
