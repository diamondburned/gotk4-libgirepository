// Code generated by girgen. DO NOT EDIT.

package atk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

//export _gotk4_atk1_Function
func _gotk4_atk1_Function(arg1 C.gpointer) (cret C.gboolean) {
	var fn Function
	{
		v := gbox.Get(uintptr(arg1))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(Function)
	}

	ok := fn()

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_atk1_Object_ConnectActiveDescendantChanged
func _gotk4_atk1_Object_ConnectActiveDescendantChanged(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) {
	var f func(arg1 *AtkObject)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(arg1 *AtkObject))
	}

	var _arg1 *AtkObject // out

	_arg1 = wrapObject(coreglib.Take(unsafe.Pointer(arg1)))

	f(_arg1)
}

//export _gotk4_atk1_Object_ConnectChildrenChanged
func _gotk4_atk1_Object_ConnectChildrenChanged(arg0 C.gpointer, arg1 C.guint, arg2 *C.void, arg3 C.guintptr) {
	var f func(arg1 uint, arg2 *AtkObject)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(arg1 uint, arg2 *AtkObject))
	}

	var _arg1 uint       // out
	var _arg2 *AtkObject // out

	_arg1 = uint(arg1)
	_arg2 = wrapObject(coreglib.Take(unsafe.Pointer(arg2)))

	f(_arg1, _arg2)
}

//export _gotk4_atk1_Object_ConnectFocusEvent
func _gotk4_atk1_Object_ConnectFocusEvent(arg0 C.gpointer, arg1 C.gboolean, arg2 C.guintptr) {
	var f func(arg1 bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(arg1 bool))
	}

	var _arg1 bool // out

	if arg1 != 0 {
		_arg1 = true
	}

	f(_arg1)
}

//export _gotk4_atk1_Object_ConnectPropertyChange
func _gotk4_atk1_Object_ConnectPropertyChange(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) {
	var f func(arg1 *PropertyValues)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(arg1 *PropertyValues))
	}

	var _arg1 *PropertyValues // out

	_arg1 = (*PropertyValues)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	f(_arg1)
}

//export _gotk4_atk1_Object_ConnectStateChange
func _gotk4_atk1_Object_ConnectStateChange(arg0 C.gpointer, arg1 *C.gchar, arg2 C.gboolean, arg3 C.guintptr) {
	var f func(arg1 string, arg2 bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(arg1 string, arg2 bool))
	}

	var _arg1 string // out
	var _arg2 bool   // out

	_arg1 = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))
	if arg2 != 0 {
		_arg2 = true
	}

	f(_arg1, _arg2)
}

//export _gotk4_atk1_Object_ConnectVisibleDataChanged
func _gotk4_atk1_Object_ConnectVisibleDataChanged(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}
