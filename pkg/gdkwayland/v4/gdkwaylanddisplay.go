// Code generated by girgen. DO NOT EDIT.

package gdkwayland

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeWaylandDisplay = coreglib.Type(girepository.MustFind("GdkWayland", "WaylandDisplay").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeWaylandDisplay, F: marshalWaylandDisplay},
	})
}

// WaylandDisplay: wayland implementation of GdkDisplay.
//
// Beyond the regular gdk.Display API, the Wayland implementation provides
// access to Wayland objects such as the wl_display with
// gdkwayland.WaylandDisplay.GetWlDisplay(), the wl_compositor with
// gdkwayland.WaylandDisplay.GetWlCompositor().
//
// You can find out what Wayland globals are supported by a display with
// gdkwayland.WaylandDisplay.QueryRegistry().
type WaylandDisplay struct {
	_ [0]func() // equal guard
	gdk.Display
}

var (
	_ coreglib.Objector = (*WaylandDisplay)(nil)
)

func wrapWaylandDisplay(obj *coreglib.Object) *WaylandDisplay {
	return &WaylandDisplay{
		Display: gdk.Display{
			Object: obj,
		},
	}
}

func marshalWaylandDisplay(p uintptr) (interface{}, error) {
	return wrapWaylandDisplay(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
