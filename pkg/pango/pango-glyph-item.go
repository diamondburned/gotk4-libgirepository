// Code generated by girgen. DO NOT EDIT.

package pango

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeGlyphItem = coreglib.Type(girepository.MustFind("Pango", "GlyphItem").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeGlyphItem, F: marshalGlyphItem},
	})
}

// GlyphItem: PangoGlyphItem is a pair of a PangoItem and the glyphs resulting
// from shaping the items text.
//
// As an example of the usage of PangoGlyphItem, the results of shaping text
// with PangoLayout is a list of PangoLayoutLine, each of which contains a list
// of PangoGlyphItem.
//
// An instance of this type is always passed by reference.
type GlyphItem struct {
	*glyphItem
}

// glyphItem is the struct that's finalized.
type glyphItem struct {
	native unsafe.Pointer
}

var GIRInfoGlyphItem = girepository.MustFind("Pango", "GlyphItem")

func marshalGlyphItem(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &GlyphItem{&glyphItem{(unsafe.Pointer)(b)}}, nil
}

// Item: corresponding PangoItem.
func (g *GlyphItem) Item() *Item {
	offset := GIRInfoGlyphItem.StructFieldOffset("item")
	valptr := (**Item)(unsafe.Add(g.native, offset))
	var _v *Item // out
	_v = (*Item)(gextras.NewStructNative(unsafe.Pointer(*valptr)))
	return _v
}

// Glyphs: corresponding PangoGlyphString.
func (g *GlyphItem) Glyphs() *GlyphString {
	offset := GIRInfoGlyphItem.StructFieldOffset("glyphs")
	valptr := (**GlyphString)(unsafe.Add(g.native, offset))
	var _v *GlyphString // out
	_v = (*GlyphString)(gextras.NewStructNative(unsafe.Pointer(*valptr)))
	return _v
}
