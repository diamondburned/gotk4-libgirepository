// Code generated by girgen. DO NOT EDIT.

package pango

import (
	"fmt"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeRenderPart = coreglib.Type(girepository.MustFind("Pango", "RenderPart").RegisteredGType())
	GTypeRenderer   = coreglib.Type(girepository.MustFind("Pango", "Renderer").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeRenderPart, F: marshalRenderPart},
		coreglib.TypeMarshaler{T: GTypeRenderer, F: marshalRenderer},
	})
}

// RenderPart defines different items to render for such purposes as setting
// colors.
type RenderPart C.gint

const (
	// RenderPartForeground: text itself.
	RenderPartForeground RenderPart = iota
	// RenderPartBackground: area behind the text.
	RenderPartBackground
	// RenderPartUnderline: underlines.
	RenderPartUnderline
	// RenderPartStrikethrough: strikethrough lines.
	RenderPartStrikethrough
	// RenderPartOverline: overlines.
	RenderPartOverline
)

func marshalRenderPart(p uintptr) (interface{}, error) {
	return RenderPart(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for RenderPart.
func (r RenderPart) String() string {
	switch r {
	case RenderPartForeground:
		return "Foreground"
	case RenderPartBackground:
		return "Background"
	case RenderPartUnderline:
		return "Underline"
	case RenderPartStrikethrough:
		return "Strikethrough"
	case RenderPartOverline:
		return "Overline"
	default:
		return fmt.Sprintf("RenderPart(%d)", r)
	}
}

// RendererOverrides contains methods that are overridable.
type RendererOverrides struct {
}

func defaultRendererOverrides(v *Renderer) RendererOverrides {
	return RendererOverrides{}
}

// Renderer: PangoRenderer is a base class for objects that can render text
// provided as PangoGlyphString or PangoLayout.
//
// By subclassing PangoRenderer and overriding operations such as draw_glyphs
// and draw_rectangle, renderers for particular font backends and destinations
// can be created.
type Renderer struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Renderer)(nil)
)

// Rendererer describes types inherited from class Renderer.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type Rendererer interface {
	coreglib.Objector
	baseRenderer() *Renderer
}

var _ Rendererer = (*Renderer)(nil)

func init() {
	coreglib.RegisterClassInfo[*Renderer, *RendererClass, RendererOverrides](
		GTypeRenderer,
		initRendererClass,
		wrapRenderer,
		defaultRendererOverrides,
	)
}

func initRendererClass(gclass unsafe.Pointer, overrides RendererOverrides, classInitFunc func(*RendererClass)) {
	if classInitFunc != nil {
		class := (*RendererClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapRenderer(obj *coreglib.Object) *Renderer {
	return &Renderer{
		Object: obj,
	}
}

func marshalRenderer(p uintptr) (interface{}, error) {
	return wrapRenderer(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *Renderer) baseRenderer() *Renderer {
	return v
}

// BaseRenderer returns the underlying base object.
func BaseRenderer(obj Rendererer) *Renderer {
	return obj.baseRenderer()
}

// RendererClass class structure for Renderer.
//
// The following vfuncs take user space coordinates in Pango units and have
// default implementations:
//
// - draw_glyphs
//
// - draw_rectangle
//
// - draw_error_underline
//
// - draw_shape
//
// - draw_glyph_item
//
// The default draw_shape implementation draws nothing.
//
// The following vfuncs take device space coordinates as doubles and must be
// implemented:
//
// - draw_trapezoid
//
// - draw_glyph
//
// An instance of this type is always passed by reference.
type RendererClass struct {
	*rendererClass
}

// rendererClass is the struct that's finalized.
type rendererClass struct {
	native unsafe.Pointer
}

var GIRInfoRendererClass = girepository.MustFind("Pango", "RendererClass")
