// Code generated by girgen. DO NOT EDIT.

package pango

import (
	"fmt"
	"strings"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeAttrType     = coreglib.Type(girepository.MustFind("Pango", "AttrType").RegisteredGType())
	GTypeUnderline    = coreglib.Type(girepository.MustFind("Pango", "Underline").RegisteredGType())
	GTypeShowFlags    = coreglib.Type(girepository.MustFind("Pango", "ShowFlags").RegisteredGType())
	GTypeAttrIterator = coreglib.Type(girepository.MustFind("Pango", "AttrIterator").RegisteredGType())
	GTypeAttrList     = coreglib.Type(girepository.MustFind("Pango", "AttrList").RegisteredGType())
	GTypeAttribute    = coreglib.Type(girepository.MustFind("Pango", "Attribute").RegisteredGType())
	GTypeColor        = coreglib.Type(girepository.MustFind("Pango", "Color").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeAttrType, F: marshalAttrType},
		coreglib.TypeMarshaler{T: GTypeUnderline, F: marshalUnderline},
		coreglib.TypeMarshaler{T: GTypeShowFlags, F: marshalShowFlags},
		coreglib.TypeMarshaler{T: GTypeAttrIterator, F: marshalAttrIterator},
		coreglib.TypeMarshaler{T: GTypeAttrList, F: marshalAttrList},
		coreglib.TypeMarshaler{T: GTypeAttribute, F: marshalAttribute},
		coreglib.TypeMarshaler{T: GTypeColor, F: marshalColor},
	})
}

// AttrType: PangoAttrType distinguishes between different types of attributes.
//
// Along with the predefined values, it is possible to allocate additional
// values for custom attributes using attr_type_register. The predefined values
// are given below. The type of structure used to store the attribute is listed
// in parentheses after the description.
type AttrType C.gint

const (
	// AttrTypeInvalid does not happen.
	AttrTypeInvalid AttrType = iota
	// AttrTypeLanguage: language (pango.AttrLanguage).
	AttrTypeLanguage
	// AttrTypeFamily: font family name list (pango.AttrString).
	AttrTypeFamily
	// AttrTypeStyle: font slant style (pango.AttrInt).
	AttrTypeStyle
	// AttrTypeWeight: font weight (pango.AttrInt).
	AttrTypeWeight
	// AttrTypeVariant: font variant (normal or small caps) (pango.AttrInt).
	AttrTypeVariant
	// AttrTypeStretch: font stretch (pango.AttrInt).
	AttrTypeStretch
	// AttrTypeSize: font size in points scaled by PANGO_SCALE (pango.AttrInt).
	AttrTypeSize
	// AttrTypeFontDesc: font description (pango.AttrFontDesc).
	AttrTypeFontDesc
	// AttrTypeForeground: foreground color (pango.AttrColor).
	AttrTypeForeground
	// AttrTypeBackground: background color (pango.AttrColor).
	AttrTypeBackground
	// AttrTypeUnderline: whether the text has an underline (pango.AttrInt).
	AttrTypeUnderline
	// AttrTypeStrikethrough: whether the text is struck-through
	// (pango.AttrInt).
	AttrTypeStrikethrough
	// AttrTypeRise: baseline displacement (pango.AttrInt).
	AttrTypeRise
	// AttrTypeShape: shape (pango.AttrShape).
	AttrTypeShape
	// AttrTypeScale: font size scale factor (pango.AttrFloat).
	AttrTypeScale
	// AttrTypeFallback: whether fallback is enabled (pango.AttrInt).
	AttrTypeFallback
	// AttrTypeLetterSpacing: letter spacing (pangoattrint).
	AttrTypeLetterSpacing
	// AttrTypeUnderlineColor: underline color (pango.AttrColor).
	AttrTypeUnderlineColor
	// AttrTypeStrikethroughColor: strikethrough color (pango.AttrColor).
	AttrTypeStrikethroughColor
	// AttrTypeAbsoluteSize: font size in pixels scaled by PANGO_SCALE
	// (pango.AttrInt).
	AttrTypeAbsoluteSize
	// AttrTypeGravity: base text gravity (pango.AttrInt).
	AttrTypeGravity
	// AttrTypeGravityHint: gravity hint (pango.AttrInt).
	AttrTypeGravityHint
	// AttrTypeFontFeatures: openType font features (pango.AttrString). Since
	// 1.38.
	AttrTypeFontFeatures
	// AttrTypeForegroundAlpha: foreground alpha (pango.AttrInt). Since 1.38.
	AttrTypeForegroundAlpha
	// AttrTypeBackgroundAlpha: background alpha (pango.AttrInt). Since 1.38.
	AttrTypeBackgroundAlpha
	// AttrTypeAllowBreaks: whether breaks are allowed (pango.AttrInt). Since
	// 1.44.
	AttrTypeAllowBreaks
	// AttrTypeShow: how to render invisible characters (pango.AttrInt). Since
	// 1.44.
	AttrTypeShow
	// AttrTypeInsertHyphens: whether to insert hyphens at intra-word line
	// breaks (pango.AttrInt). Since 1.44.
	AttrTypeInsertHyphens
	// AttrTypeOverline: whether the text has an overline (pango.AttrInt). Since
	// 1.46.
	AttrTypeOverline
	// AttrTypeOverlineColor: overline color (pango.AttrColor). Since 1.46.
	AttrTypeOverlineColor
)

func marshalAttrType(p uintptr) (interface{}, error) {
	return AttrType(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for AttrType.
func (a AttrType) String() string {
	switch a {
	case AttrTypeInvalid:
		return "Invalid"
	case AttrTypeLanguage:
		return "Language"
	case AttrTypeFamily:
		return "Family"
	case AttrTypeStyle:
		return "Style"
	case AttrTypeWeight:
		return "Weight"
	case AttrTypeVariant:
		return "Variant"
	case AttrTypeStretch:
		return "Stretch"
	case AttrTypeSize:
		return "Size"
	case AttrTypeFontDesc:
		return "FontDesc"
	case AttrTypeForeground:
		return "Foreground"
	case AttrTypeBackground:
		return "Background"
	case AttrTypeUnderline:
		return "Underline"
	case AttrTypeStrikethrough:
		return "Strikethrough"
	case AttrTypeRise:
		return "Rise"
	case AttrTypeShape:
		return "Shape"
	case AttrTypeScale:
		return "Scale"
	case AttrTypeFallback:
		return "Fallback"
	case AttrTypeLetterSpacing:
		return "LetterSpacing"
	case AttrTypeUnderlineColor:
		return "UnderlineColor"
	case AttrTypeStrikethroughColor:
		return "StrikethroughColor"
	case AttrTypeAbsoluteSize:
		return "AbsoluteSize"
	case AttrTypeGravity:
		return "Gravity"
	case AttrTypeGravityHint:
		return "GravityHint"
	case AttrTypeFontFeatures:
		return "FontFeatures"
	case AttrTypeForegroundAlpha:
		return "ForegroundAlpha"
	case AttrTypeBackgroundAlpha:
		return "BackgroundAlpha"
	case AttrTypeAllowBreaks:
		return "AllowBreaks"
	case AttrTypeShow:
		return "Show"
	case AttrTypeInsertHyphens:
		return "InsertHyphens"
	case AttrTypeOverline:
		return "Overline"
	case AttrTypeOverlineColor:
		return "OverlineColor"
	default:
		return fmt.Sprintf("AttrType(%d)", a)
	}
}

// Underline: PangoUnderline enumeration is used to specify whether text should
// be underlined, and if so, the type of underlining.
type Underline C.gint

const (
	// UnderlineNone: no underline should be drawn.
	UnderlineNone Underline = iota
	// UnderlineSingle: single underline should be drawn.
	UnderlineSingle
	// UnderlineDouble: double underline should be drawn.
	UnderlineDouble
	// UnderlineLow: single underline should be drawn at a position beneath the
	// ink extents of the text being underlined. This should be used only for
	// underlining single characters, such as for keyboard accelerators.
	// PANGO_UNDERLINE_SINGLE should be used for extended portions of text.
	UnderlineLow
	// UnderlineError: wavy underline should be drawn below. This underline is
	// typically used to indicate an error such as a possible mispelling; in
	// some cases a contrasting color may automatically be used. This type of
	// underlining is available since Pango 1.4.
	UnderlineError
	// UnderlineSingleLine: like PANGO_UNDERLINE_SINGLE, but drawn continuously
	// across multiple runs. This type of underlining is available since Pango
	// 1.46.
	UnderlineSingleLine
	// UnderlineDoubleLine: like PANGO_UNDERLINE_DOUBLE, but drawn continuously
	// across multiple runs. This type of underlining is available since Pango
	// 1.46.
	UnderlineDoubleLine
	// UnderlineErrorLine: like PANGO_UNDERLINE_ERROR, but drawn continuously
	// across multiple runs. This type of underlining is available since Pango
	// 1.46.
	UnderlineErrorLine
)

func marshalUnderline(p uintptr) (interface{}, error) {
	return Underline(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for Underline.
func (u Underline) String() string {
	switch u {
	case UnderlineNone:
		return "None"
	case UnderlineSingle:
		return "Single"
	case UnderlineDouble:
		return "Double"
	case UnderlineLow:
		return "Low"
	case UnderlineError:
		return "Error"
	case UnderlineSingleLine:
		return "SingleLine"
	case UnderlineDoubleLine:
		return "DoubleLine"
	case UnderlineErrorLine:
		return "ErrorLine"
	default:
		return fmt.Sprintf("Underline(%d)", u)
	}
}

// ShowFlags: these flags affect how Pango treats characters that are normally
// not visible in the output.
type ShowFlags C.guint

const (
	// ShowNone: no special treatment for invisible characters.
	ShowNone ShowFlags = 0b0
	// ShowSpaces: render spaces, tabs and newlines visibly.
	ShowSpaces ShowFlags = 0b1
	// ShowLineBreaks: render line breaks visibly.
	ShowLineBreaks ShowFlags = 0b10
	// ShowIgnorables: render default-ignorable Unicode characters visibly.
	ShowIgnorables ShowFlags = 0b100
)

func marshalShowFlags(p uintptr) (interface{}, error) {
	return ShowFlags(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for ShowFlags.
func (s ShowFlags) String() string {
	if s == 0 {
		return "ShowFlags(0)"
	}

	var builder strings.Builder
	builder.Grow(49)

	for s != 0 {
		next := s & (s - 1)
		bit := s - next

		switch bit {
		case ShowNone:
			builder.WriteString("None|")
		case ShowSpaces:
			builder.WriteString("Spaces|")
		case ShowLineBreaks:
			builder.WriteString("LineBreaks|")
		case ShowIgnorables:
			builder.WriteString("Ignorables|")
		default:
			builder.WriteString(fmt.Sprintf("ShowFlags(0b%b)|", bit))
		}

		s = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if s contains other.
func (s ShowFlags) Has(other ShowFlags) bool {
	return (s & other) == other
}

// AttrDataCopyFunc: type of a function that can duplicate user data for an
// attribute.
type AttrDataCopyFunc func() (gpointer unsafe.Pointer)

// AttrFilterFunc: type of a function filtering a list of attributes.
type AttrFilterFunc func(attribute *Attribute) (ok bool)

// AttrClass: PangoAttrClass structure stores the type and operations for a
// particular type of attribute.
//
// The functions in this structure should not be called directly. Instead, one
// should use the wrapper functions provided for PangoAttribute.
//
// An instance of this type is always passed by reference.
type AttrClass struct {
	*attrClass
}

// attrClass is the struct that's finalized.
type attrClass struct {
	native unsafe.Pointer
}

var GIRInfoAttrClass = girepository.MustFind("Pango", "AttrClass")

// AttrColor: PangoAttrColor structure is used to represent attributes that are
// colors.
//
// An instance of this type is always passed by reference.
type AttrColor struct {
	*attrColor
}

// attrColor is the struct that's finalized.
type attrColor struct {
	native unsafe.Pointer
}

var GIRInfoAttrColor = girepository.MustFind("Pango", "AttrColor")

// AttrFloat: PangoAttrFloat structure is used to represent attributes with a
// float or double value.
//
// An instance of this type is always passed by reference.
type AttrFloat struct {
	*attrFloat
}

// attrFloat is the struct that's finalized.
type attrFloat struct {
	native unsafe.Pointer
}

var GIRInfoAttrFloat = girepository.MustFind("Pango", "AttrFloat")

// AttrFontDesc: PangoAttrFontDesc structure is used to store an attribute that
// sets all aspects of the font description at once.
//
// An instance of this type is always passed by reference.
type AttrFontDesc struct {
	*attrFontDesc
}

// attrFontDesc is the struct that's finalized.
type attrFontDesc struct {
	native unsafe.Pointer
}

var GIRInfoAttrFontDesc = girepository.MustFind("Pango", "AttrFontDesc")

// AttrInt: PangoAttrInt structure is used to represent attributes with an
// integer or enumeration value.
//
// An instance of this type is always passed by reference.
type AttrInt struct {
	*attrInt
}

// attrInt is the struct that's finalized.
type attrInt struct {
	native unsafe.Pointer
}

var GIRInfoAttrInt = girepository.MustFind("Pango", "AttrInt")

// AttrIterator: PangoAttrIterator is used to iterate through a PangoAttrList.
//
// A new iterator is created with pango.AttrList.GetIterator(). Once the
// iterator is created, it can be advanced through the style changes in the text
// using pango.AttrIterator.Next(). At each style change, the range of the
// current style segment and the attributes currently in effect can be queried.
//
// An instance of this type is always passed by reference.
type AttrIterator struct {
	*attrIterator
}

// attrIterator is the struct that's finalized.
type attrIterator struct {
	native unsafe.Pointer
}

var GIRInfoAttrIterator = girepository.MustFind("Pango", "AttrIterator")

func marshalAttrIterator(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &AttrIterator{&attrIterator{(unsafe.Pointer)(b)}}, nil
}

// AttrLanguage: PangoAttrLanguage structure is used to represent attributes
// that are languages.
//
// An instance of this type is always passed by reference.
type AttrLanguage struct {
	*attrLanguage
}

// attrLanguage is the struct that's finalized.
type attrLanguage struct {
	native unsafe.Pointer
}

var GIRInfoAttrLanguage = girepository.MustFind("Pango", "AttrLanguage")

// AttrList: PangoAttrList represents a list of attributes that apply to a
// section of text.
//
// The attributes in a PangoAttrList are, in general, allowed to overlap in an
// arbitrary fashion. However, if the attributes are manipulated only through
// pango.AttrList.Change(), the overlap between properties will meet stricter
// criteria.
//
// Since the PangoAttrList structure is stored as a linear list, it is not
// suitable for storing attributes for large amounts of text. In general, you
// should not use a single PangoAttrList for more than one paragraph of text.
//
// An instance of this type is always passed by reference.
type AttrList struct {
	*attrList
}

// attrList is the struct that's finalized.
type attrList struct {
	native unsafe.Pointer
}

var GIRInfoAttrList = girepository.MustFind("Pango", "AttrList")

func marshalAttrList(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &AttrList{&attrList{(unsafe.Pointer)(b)}}, nil
}

// AttrShape: PangoAttrShape structure is used to represent attributes which
// impose shape restrictions.
//
// An instance of this type is always passed by reference.
type AttrShape struct {
	*attrShape
}

// attrShape is the struct that's finalized.
type attrShape struct {
	native unsafe.Pointer
}

var GIRInfoAttrShape = girepository.MustFind("Pango", "AttrShape")

// AttrSize: PangoAttrSize structure is used to represent attributes which set
// font size.
//
// An instance of this type is always passed by reference.
type AttrSize struct {
	*attrSize
}

// attrSize is the struct that's finalized.
type attrSize struct {
	native unsafe.Pointer
}

var GIRInfoAttrSize = girepository.MustFind("Pango", "AttrSize")

// AttrString: PangoAttrString structure is used to represent attributes with a
// string value.
//
// An instance of this type is always passed by reference.
type AttrString struct {
	*attrString
}

// attrString is the struct that's finalized.
type attrString struct {
	native unsafe.Pointer
}

var GIRInfoAttrString = girepository.MustFind("Pango", "AttrString")

// Attribute: PangoAttribute structure represents the common portions of all
// attributes.
//
// Particular types of attributes include this structure as their initial
// portion. The common portion of the attribute holds the range to which the
// value in the type-specific part of the attribute applies and should be
// initialized using pango.Attribute.Init(). By default, an attribute will have
// an all-inclusive range of [0,G_MAXUINT].
//
// An instance of this type is always passed by reference.
type Attribute struct {
	*attribute
}

// attribute is the struct that's finalized.
type attribute struct {
	native unsafe.Pointer
}

var GIRInfoAttribute = girepository.MustFind("Pango", "Attribute")

func marshalAttribute(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &Attribute{&attribute{(unsafe.Pointer)(b)}}, nil
}

// Klass class structure holding information about the type of the attribute.
func (a *Attribute) Klass() *AttrClass {
	offset := GIRInfoAttribute.StructFieldOffset("klass")
	valptr := (**AttrClass)(unsafe.Add(a.native, offset))
	var _v *AttrClass // out
	_v = (*AttrClass)(gextras.NewStructNative(unsafe.Pointer(*valptr)))
	return _v
}

// StartIndex: start index of the range (in bytes).
func (a *Attribute) StartIndex() uint {
	offset := GIRInfoAttribute.StructFieldOffset("start_index")
	valptr := (*uint)(unsafe.Add(a.native, offset))
	var _v uint // out
	_v = uint(*valptr)
	return _v
}

// EndIndex: end index of the range (in bytes). The character at this index is
// not included in the range.
func (a *Attribute) EndIndex() uint {
	offset := GIRInfoAttribute.StructFieldOffset("end_index")
	valptr := (*uint)(unsafe.Add(a.native, offset))
	var _v uint // out
	_v = uint(*valptr)
	return _v
}

// StartIndex: start index of the range (in bytes).
func (a *Attribute) SetStartIndex(startIndex uint) {
	offset := GIRInfoAttribute.StructFieldOffset("start_index")
	valptr := (*C.guint)(unsafe.Add(a.native, offset))
	*valptr = C.guint(startIndex)
}

// EndIndex: end index of the range (in bytes). The character at this index is
// not included in the range.
func (a *Attribute) SetEndIndex(endIndex uint) {
	offset := GIRInfoAttribute.StructFieldOffset("end_index")
	valptr := (*C.guint)(unsafe.Add(a.native, offset))
	*valptr = C.guint(endIndex)
}

// Color: PangoColor structure is used to represent a color in an uncalibrated
// RGB color-space.
//
// An instance of this type is always passed by reference.
type Color struct {
	*color
}

// color is the struct that's finalized.
type color struct {
	native unsafe.Pointer
}

var GIRInfoColor = girepository.MustFind("Pango", "Color")

func marshalColor(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &Color{&color{(unsafe.Pointer)(b)}}, nil
}

// NewColor creates a new Color instance from the given
// fields. Beware that this function allocates on the Go heap; be careful
// when using it!
func NewColor(red, green, blue uint16) Color {
	var f0 C.guint16 // out
	f0 = C.guint16(red)
	var f1 C.guint16 // out
	f1 = C.guint16(green)
	var f2 C.guint16 // out
	f2 = C.guint16(blue)

	size := GIRInfoColor.StructSize()
	native := make([]byte, size)
	gextras.Sink(&native[0])

	offset0 := GIRInfoColor.StructFieldOffset("red")
	valptr0 := (*C.guint16)(unsafe.Add(unsafe.Pointer(&native[0]), offset0))
	*valptr0 = f0

	offset1 := GIRInfoColor.StructFieldOffset("green")
	valptr1 := (*C.guint16)(unsafe.Add(unsafe.Pointer(&native[0]), offset1))
	*valptr1 = f1

	offset2 := GIRInfoColor.StructFieldOffset("blue")
	valptr2 := (*C.guint16)(unsafe.Add(unsafe.Pointer(&native[0]), offset2))
	*valptr2 = f2

	return *(*Color)(gextras.NewStructNative(unsafe.Pointer(&native[0])))
}

// Red: value of red component.
func (c *Color) Red() uint16 {
	offset := GIRInfoColor.StructFieldOffset("red")
	valptr := (*uint16)(unsafe.Add(c.native, offset))
	var _v uint16 // out
	_v = uint16(*valptr)
	return _v
}

// Green: value of green component.
func (c *Color) Green() uint16 {
	offset := GIRInfoColor.StructFieldOffset("green")
	valptr := (*uint16)(unsafe.Add(c.native, offset))
	var _v uint16 // out
	_v = uint16(*valptr)
	return _v
}

// Blue: value of blue component.
func (c *Color) Blue() uint16 {
	offset := GIRInfoColor.StructFieldOffset("blue")
	valptr := (*uint16)(unsafe.Add(c.native, offset))
	var _v uint16 // out
	_v = uint16(*valptr)
	return _v
}

// Red: value of red component.
func (c *Color) SetRed(red uint16) {
	offset := GIRInfoColor.StructFieldOffset("red")
	valptr := (*C.guint16)(unsafe.Add(c.native, offset))
	*valptr = C.guint16(red)
}

// Green: value of green component.
func (c *Color) SetGreen(green uint16) {
	offset := GIRInfoColor.StructFieldOffset("green")
	valptr := (*C.guint16)(unsafe.Add(c.native, offset))
	*valptr = C.guint16(green)
}

// Blue: value of blue component.
func (c *Color) SetBlue(blue uint16) {
	offset := GIRInfoColor.StructFieldOffset("blue")
	valptr := (*C.guint16)(unsafe.Add(c.native, offset))
	*valptr = C.guint16(blue)
}
