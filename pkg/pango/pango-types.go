// Code generated by girgen. DO NOT EDIT.

package pango

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// SCALE: scale between dimensions used for Pango distances and device units.
//
// The definition of device units is dependent on the output device; it will
// typically be pixels for a screen, and points for a printer. PANGO_SCALE is
// currently 1024, but this may be changed in the future.
//
// When setting font sizes, device units are always considered to be points (as
// in "12 point font"), rather than pixels.
const SCALE = 1024

// Glyph: PangoGlyph represents a single glyph in the output form of a string.
type Glyph = uint32

// Rectangle: PangoRectangle structure represents a rectangle.
//
// PangoRectangle is frequently used to represent the logical or ink extents of
// a single glyph or section of text. (See, for instance,
// pango.Font.GetGlyphExtents().)
//
// An instance of this type is always passed by reference.
type Rectangle struct {
	*rectangle
}

// rectangle is the struct that's finalized.
type rectangle struct {
	native unsafe.Pointer
}

var GIRInfoRectangle = girepository.MustFind("Pango", "Rectangle")

// NewRectangle creates a new Rectangle instance from the given
// fields. Beware that this function allocates on the Go heap; be careful
// when using it!
func NewRectangle(x, y, width, height int) Rectangle {
	var f0 C.int // out
	f0 = C.int(x)
	var f1 C.int // out
	f1 = C.int(y)
	var f2 C.int // out
	f2 = C.int(width)
	var f3 C.int // out
	f3 = C.int(height)

	size := GIRInfoRectangle.StructSize()
	native := make([]byte, size)
	gextras.Sink(&native[0])

	offset0 := GIRInfoRectangle.StructFieldOffset("x")
	valptr0 := (*C.int)(unsafe.Add(unsafe.Pointer(&native[0]), offset0))
	*valptr0 = f0

	offset1 := GIRInfoRectangle.StructFieldOffset("y")
	valptr1 := (*C.int)(unsafe.Add(unsafe.Pointer(&native[0]), offset1))
	*valptr1 = f1

	offset2 := GIRInfoRectangle.StructFieldOffset("width")
	valptr2 := (*C.int)(unsafe.Add(unsafe.Pointer(&native[0]), offset2))
	*valptr2 = f2

	offset3 := GIRInfoRectangle.StructFieldOffset("height")
	valptr3 := (*C.int)(unsafe.Add(unsafe.Pointer(&native[0]), offset3))
	*valptr3 = f3

	return *(*Rectangle)(gextras.NewStructNative(unsafe.Pointer(&native[0])))
}

// X coordinate of the left side of the rectangle.
func (r *Rectangle) X() int {
	offset := GIRInfoRectangle.StructFieldOffset("x")
	valptr := (*int)(unsafe.Add(r.native, offset))
	var _v int // out
	_v = int(*valptr)
	return _v
}

// Y coordinate of the the top side of the rectangle.
func (r *Rectangle) Y() int {
	offset := GIRInfoRectangle.StructFieldOffset("y")
	valptr := (*int)(unsafe.Add(r.native, offset))
	var _v int // out
	_v = int(*valptr)
	return _v
}

// Width: width of the rectangle.
func (r *Rectangle) Width() int {
	offset := GIRInfoRectangle.StructFieldOffset("width")
	valptr := (*int)(unsafe.Add(r.native, offset))
	var _v int // out
	_v = int(*valptr)
	return _v
}

// Height: height of the rectangle.
func (r *Rectangle) Height() int {
	offset := GIRInfoRectangle.StructFieldOffset("height")
	valptr := (*int)(unsafe.Add(r.native, offset))
	var _v int // out
	_v = int(*valptr)
	return _v
}

// X coordinate of the left side of the rectangle.
func (r *Rectangle) SetX(x int) {
	offset := GIRInfoRectangle.StructFieldOffset("x")
	valptr := (*C.int)(unsafe.Add(r.native, offset))
	*valptr = C.int(x)
}

// Y coordinate of the the top side of the rectangle.
func (r *Rectangle) SetY(y int) {
	offset := GIRInfoRectangle.StructFieldOffset("y")
	valptr := (*C.int)(unsafe.Add(r.native, offset))
	*valptr = C.int(y)
}

// Width: width of the rectangle.
func (r *Rectangle) SetWidth(width int) {
	offset := GIRInfoRectangle.StructFieldOffset("width")
	valptr := (*C.int)(unsafe.Add(r.native, offset))
	*valptr = C.int(width)
}

// Height: height of the rectangle.
func (r *Rectangle) SetHeight(height int) {
	offset := GIRInfoRectangle.StructFieldOffset("height")
	valptr := (*C.int)(unsafe.Add(r.native, offset))
	*valptr = C.int(height)
}
