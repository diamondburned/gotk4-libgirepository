// Code generated by girgen. DO NOT EDIT.

package pango

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeItem = coreglib.Type(girepository.MustFind("Pango", "Item").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeItem, F: marshalItem},
	})
}

// Analysis: PangoAnalysis structure stores information about the properties of
// a segment of text.
//
// An instance of this type is always passed by reference.
type Analysis struct {
	*analysis
}

// analysis is the struct that's finalized.
type analysis struct {
	native unsafe.Pointer
}

var GIRInfoAnalysis = girepository.MustFind("Pango", "Analysis")

// ShapeEngine: unused.
func (a *Analysis) ShapeEngine() unsafe.Pointer {
	offset := GIRInfoAnalysis.StructFieldOffset("shape_engine")
	valptr := (*unsafe.Pointer)(unsafe.Add(a.native, offset))
	var _v unsafe.Pointer // out
	_v = (unsafe.Pointer)(unsafe.Pointer(*valptr))
	return _v
}

// LangEngine: unused.
func (a *Analysis) LangEngine() unsafe.Pointer {
	offset := GIRInfoAnalysis.StructFieldOffset("lang_engine")
	valptr := (*unsafe.Pointer)(unsafe.Add(a.native, offset))
	var _v unsafe.Pointer // out
	_v = (unsafe.Pointer)(unsafe.Pointer(*valptr))
	return _v
}

// Font: font for this segment.
func (a *Analysis) Font() Fonter {
	offset := GIRInfoAnalysis.StructFieldOffset("font")
	valptr := (*Fonter)(unsafe.Add(a.native, offset))
	var _v Fonter // out
	{
		objptr := unsafe.Pointer(*valptr)
		if objptr == nil {
			panic("object of type pango.Fonter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Fonter)
			return ok
		})
		rv, ok := casted.(Fonter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching pango.Fonter")
		}
		_v = rv
	}
	return _v
}

// Level: bidirectional level for this segment.
func (a *Analysis) Level() byte {
	offset := GIRInfoAnalysis.StructFieldOffset("level")
	valptr := (*byte)(unsafe.Add(a.native, offset))
	var _v byte // out
	_v = byte(*valptr)
	return _v
}

// Gravity: glyph orientation for this segment (A PangoGravity).
func (a *Analysis) Gravity() byte {
	offset := GIRInfoAnalysis.StructFieldOffset("gravity")
	valptr := (*byte)(unsafe.Add(a.native, offset))
	var _v byte // out
	_v = byte(*valptr)
	return _v
}

// Flags: boolean flags for this segment (Since: 1.16).
func (a *Analysis) Flags() byte {
	offset := GIRInfoAnalysis.StructFieldOffset("flags")
	valptr := (*byte)(unsafe.Add(a.native, offset))
	var _v byte // out
	_v = byte(*valptr)
	return _v
}

// Script: detected script for this segment (A PangoScript) (Since: 1.18).
func (a *Analysis) Script() byte {
	offset := GIRInfoAnalysis.StructFieldOffset("script")
	valptr := (*byte)(unsafe.Add(a.native, offset))
	var _v byte // out
	_v = byte(*valptr)
	return _v
}

// Language: detected language for this segment.
func (a *Analysis) Language() *Language {
	offset := GIRInfoAnalysis.StructFieldOffset("language")
	valptr := (**Language)(unsafe.Add(a.native, offset))
	var _v *Language // out
	_v = (*Language)(gextras.NewStructNative(unsafe.Pointer(*valptr)))
	return _v
}

// Level: bidirectional level for this segment.
func (a *Analysis) SetLevel(level byte) {
	offset := GIRInfoAnalysis.StructFieldOffset("level")
	valptr := (*C.guint8)(unsafe.Add(a.native, offset))
	*valptr = C.guint8(level)
}

// Gravity: glyph orientation for this segment (A PangoGravity).
func (a *Analysis) SetGravity(gravity byte) {
	offset := GIRInfoAnalysis.StructFieldOffset("gravity")
	valptr := (*C.guint8)(unsafe.Add(a.native, offset))
	*valptr = C.guint8(gravity)
}

// Flags: boolean flags for this segment (Since: 1.16).
func (a *Analysis) SetFlags(flags byte) {
	offset := GIRInfoAnalysis.StructFieldOffset("flags")
	valptr := (*C.guint8)(unsafe.Add(a.native, offset))
	*valptr = C.guint8(flags)
}

// Script: detected script for this segment (A PangoScript) (Since: 1.18).
func (a *Analysis) SetScript(script byte) {
	offset := GIRInfoAnalysis.StructFieldOffset("script")
	valptr := (*C.guint8)(unsafe.Add(a.native, offset))
	*valptr = C.guint8(script)
}

// Item: PangoItem structure stores information about a segment of text.
//
// You typically obtain PangoItems by itemizing a piece of text with itemize.
//
// An instance of this type is always passed by reference.
type Item struct {
	*item
}

// item is the struct that's finalized.
type item struct {
	native unsafe.Pointer
}

var GIRInfoItem = girepository.MustFind("Pango", "Item")

func marshalItem(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &Item{&item{(unsafe.Pointer)(b)}}, nil
}
