// Code generated by girgen. DO NOT EDIT.

package pango

import (
	"fmt"
	"strings"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeStretch         = coreglib.Type(girepository.MustFind("Pango", "Stretch").RegisteredGType())
	GTypeStyle           = coreglib.Type(girepository.MustFind("Pango", "Style").RegisteredGType())
	GTypeVariant         = coreglib.Type(girepository.MustFind("Pango", "Variant").RegisteredGType())
	GTypeWeight          = coreglib.Type(girepository.MustFind("Pango", "Weight").RegisteredGType())
	GTypeFontMask        = coreglib.Type(girepository.MustFind("Pango", "FontMask").RegisteredGType())
	GTypeFont            = coreglib.Type(girepository.MustFind("Pango", "Font").RegisteredGType())
	GTypeFontFace        = coreglib.Type(girepository.MustFind("Pango", "FontFace").RegisteredGType())
	GTypeFontFamily      = coreglib.Type(girepository.MustFind("Pango", "FontFamily").RegisteredGType())
	GTypeFontDescription = coreglib.Type(girepository.MustFind("Pango", "FontDescription").RegisteredGType())
	GTypeFontMetrics     = coreglib.Type(girepository.MustFind("Pango", "FontMetrics").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeStretch, F: marshalStretch},
		coreglib.TypeMarshaler{T: GTypeStyle, F: marshalStyle},
		coreglib.TypeMarshaler{T: GTypeVariant, F: marshalVariant},
		coreglib.TypeMarshaler{T: GTypeWeight, F: marshalWeight},
		coreglib.TypeMarshaler{T: GTypeFontMask, F: marshalFontMask},
		coreglib.TypeMarshaler{T: GTypeFont, F: marshalFont},
		coreglib.TypeMarshaler{T: GTypeFontFace, F: marshalFontFace},
		coreglib.TypeMarshaler{T: GTypeFontFamily, F: marshalFontFamily},
		coreglib.TypeMarshaler{T: GTypeFontDescription, F: marshalFontDescription},
		coreglib.TypeMarshaler{T: GTypeFontMetrics, F: marshalFontMetrics},
	})
}

// Stretch: enumeration specifying the width of the font relative to other
// designs within a family.
type Stretch C.gint

const (
	// StretchUltraCondensed: ultra condensed width.
	StretchUltraCondensed Stretch = iota
	// StretchExtraCondensed: extra condensed width.
	StretchExtraCondensed
	// StretchCondensed: condensed width.
	StretchCondensed
	// StretchSemiCondensed: semi condensed width.
	StretchSemiCondensed
	// StretchNormal: normal width.
	StretchNormal
	// StretchSemiExpanded: semi expanded width.
	StretchSemiExpanded
	// StretchExpanded: expanded width.
	StretchExpanded
	// StretchExtraExpanded: extra expanded width.
	StretchExtraExpanded
	// StretchUltraExpanded: ultra expanded width.
	StretchUltraExpanded
)

func marshalStretch(p uintptr) (interface{}, error) {
	return Stretch(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for Stretch.
func (s Stretch) String() string {
	switch s {
	case StretchUltraCondensed:
		return "UltraCondensed"
	case StretchExtraCondensed:
		return "ExtraCondensed"
	case StretchCondensed:
		return "Condensed"
	case StretchSemiCondensed:
		return "SemiCondensed"
	case StretchNormal:
		return "Normal"
	case StretchSemiExpanded:
		return "SemiExpanded"
	case StretchExpanded:
		return "Expanded"
	case StretchExtraExpanded:
		return "ExtraExpanded"
	case StretchUltraExpanded:
		return "UltraExpanded"
	default:
		return fmt.Sprintf("Stretch(%d)", s)
	}
}

// Style: enumeration specifying the various slant styles possible for a font.
type Style C.gint

const (
	// StyleNormal: font is upright.
	StyleNormal Style = iota
	// StyleOblique: font is slanted, but in a roman style.
	StyleOblique
	// StyleItalic: font is slanted in an italic style.
	StyleItalic
)

func marshalStyle(p uintptr) (interface{}, error) {
	return Style(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for Style.
func (s Style) String() string {
	switch s {
	case StyleNormal:
		return "Normal"
	case StyleOblique:
		return "Oblique"
	case StyleItalic:
		return "Italic"
	default:
		return fmt.Sprintf("Style(%d)", s)
	}
}

// Variant: enumeration specifying capitalization variant of the font.
type Variant C.gint

const (
	// VariantNormal: normal font.
	VariantNormal Variant = iota
	// VariantSmallCaps: font with the lower case characters replaced by smaller
	// variants of the capital characters.
	VariantSmallCaps
)

func marshalVariant(p uintptr) (interface{}, error) {
	return Variant(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for Variant.
func (v Variant) String() string {
	switch v {
	case VariantNormal:
		return "Normal"
	case VariantSmallCaps:
		return "SmallCaps"
	default:
		return fmt.Sprintf("Variant(%d)", v)
	}
}

// Weight: enumeration specifying the weight (boldness) of a font.
//
// This is a numerical value ranging from 100 to 1000, but there are some
// predefined values.
type Weight C.gint

const (
	// WeightThin: thin weight (= 100; Since: 1.24).
	WeightThin Weight = 100
	// WeightUltralight: ultralight weight (= 200).
	WeightUltralight Weight = 200
	// WeightLight: light weight (= 300).
	WeightLight Weight = 300
	// WeightSemilight: semilight weight (= 350; Since: 1.36.7).
	WeightSemilight Weight = 350
	// WeightBook: book weight (= 380; Since: 1.24).
	WeightBook Weight = 380
	// WeightNormal: default weight (= 400).
	WeightNormal Weight = 400
	// WeightMedium: normal weight (= 500; Since: 1.24).
	WeightMedium Weight = 500
	// WeightSemibold: semibold weight (= 600).
	WeightSemibold Weight = 600
	// WeightBold: bold weight (= 700).
	WeightBold Weight = 700
	// WeightUltrabold: ultrabold weight (= 800).
	WeightUltrabold Weight = 800
	// WeightHeavy: heavy weight (= 900).
	WeightHeavy Weight = 900
	// WeightUltraheavy: ultraheavy weight (= 1000; Since: 1.24).
	WeightUltraheavy Weight = 1000
)

func marshalWeight(p uintptr) (interface{}, error) {
	return Weight(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for Weight.
func (w Weight) String() string {
	switch w {
	case WeightThin:
		return "Thin"
	case WeightUltralight:
		return "Ultralight"
	case WeightLight:
		return "Light"
	case WeightSemilight:
		return "Semilight"
	case WeightBook:
		return "Book"
	case WeightNormal:
		return "Normal"
	case WeightMedium:
		return "Medium"
	case WeightSemibold:
		return "Semibold"
	case WeightBold:
		return "Bold"
	case WeightUltrabold:
		return "Ultrabold"
	case WeightHeavy:
		return "Heavy"
	case WeightUltraheavy:
		return "Ultraheavy"
	default:
		return fmt.Sprintf("Weight(%d)", w)
	}
}

// FontMask bits in a PangoFontMask correspond to the set fields in a
// PangoFontDescription.
type FontMask C.guint

const (
	// FontMaskFamily: font family is specified.
	FontMaskFamily FontMask = 0b1
	// FontMaskStyle: font style is specified.
	FontMaskStyle FontMask = 0b10
	// FontMaskVariant: font variant is specified.
	FontMaskVariant FontMask = 0b100
	// FontMaskWeight: font weight is specified.
	FontMaskWeight FontMask = 0b1000
	// FontMaskStretch: font stretch is specified.
	FontMaskStretch FontMask = 0b10000
	// FontMaskSize: font size is specified.
	FontMaskSize FontMask = 0b100000
	// FontMaskGravity: font gravity is specified (Since: 1.16.).
	FontMaskGravity FontMask = 0b1000000
	// FontMaskVariations: openType font variations are specified (Since: 1.42).
	FontMaskVariations FontMask = 0b10000000
)

func marshalFontMask(p uintptr) (interface{}, error) {
	return FontMask(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for FontMask.
func (f FontMask) String() string {
	if f == 0 {
		return "FontMask(0)"
	}

	var builder strings.Builder
	builder.Grow(123)

	for f != 0 {
		next := f & (f - 1)
		bit := f - next

		switch bit {
		case FontMaskFamily:
			builder.WriteString("Family|")
		case FontMaskStyle:
			builder.WriteString("Style|")
		case FontMaskVariant:
			builder.WriteString("Variant|")
		case FontMaskWeight:
			builder.WriteString("Weight|")
		case FontMaskStretch:
			builder.WriteString("Stretch|")
		case FontMaskSize:
			builder.WriteString("Size|")
		case FontMaskGravity:
			builder.WriteString("Gravity|")
		case FontMaskVariations:
			builder.WriteString("Variations|")
		default:
			builder.WriteString(fmt.Sprintf("FontMask(0b%b)|", bit))
		}

		f = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if f contains other.
func (f FontMask) Has(other FontMask) bool {
	return (f & other) == other
}

// FontOverrides contains methods that are overridable.
type FontOverrides struct {
}

func defaultFontOverrides(v *Font) FontOverrides {
	return FontOverrides{}
}

// Font: PangoFont is used to represent a font in a rendering-system-independent
// manner.
type Font struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Font)(nil)
)

// Fonter describes types inherited from class Font.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type Fonter interface {
	coreglib.Objector
	baseFont() *Font
}

var _ Fonter = (*Font)(nil)

func init() {
	coreglib.RegisterClassInfo[*Font, *FontClass, FontOverrides](
		GTypeFont,
		initFontClass,
		wrapFont,
		defaultFontOverrides,
	)
}

func initFontClass(gclass unsafe.Pointer, overrides FontOverrides, classInitFunc func(*FontClass)) {
	if classInitFunc != nil {
		class := (*FontClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapFont(obj *coreglib.Object) *Font {
	return &Font{
		Object: obj,
	}
}

func marshalFont(p uintptr) (interface{}, error) {
	return wrapFont(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *Font) baseFont() *Font {
	return v
}

// BaseFont returns the underlying base object.
func BaseFont(obj Fonter) *Font {
	return obj.baseFont()
}

// FontFaceOverrides contains methods that are overridable.
type FontFaceOverrides struct {
}

func defaultFontFaceOverrides(v *FontFace) FontFaceOverrides {
	return FontFaceOverrides{}
}

// FontFace: PangoFontFace is used to represent a group of fonts with the same
// family, slant, weight, and width, but varying sizes.
type FontFace struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*FontFace)(nil)
)

// FontFacer describes types inherited from class FontFace.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type FontFacer interface {
	coreglib.Objector
	baseFontFace() *FontFace
}

var _ FontFacer = (*FontFace)(nil)

func init() {
	coreglib.RegisterClassInfo[*FontFace, *FontFaceClass, FontFaceOverrides](
		GTypeFontFace,
		initFontFaceClass,
		wrapFontFace,
		defaultFontFaceOverrides,
	)
}

func initFontFaceClass(gclass unsafe.Pointer, overrides FontFaceOverrides, classInitFunc func(*FontFaceClass)) {
	if classInitFunc != nil {
		class := (*FontFaceClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapFontFace(obj *coreglib.Object) *FontFace {
	return &FontFace{
		Object: obj,
	}
}

func marshalFontFace(p uintptr) (interface{}, error) {
	return wrapFontFace(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *FontFace) baseFontFace() *FontFace {
	return v
}

// BaseFontFace returns the underlying base object.
func BaseFontFace(obj FontFacer) *FontFace {
	return obj.baseFontFace()
}

// FontFamilyOverrides contains methods that are overridable.
type FontFamilyOverrides struct {
}

func defaultFontFamilyOverrides(v *FontFamily) FontFamilyOverrides {
	return FontFamilyOverrides{}
}

// FontFamily: PangoFontFamily is used to represent a family of related font
// faces.
//
// The font faces in a family share a common design, but differ in slant,
// weight, width or other aspects.
type FontFamily struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*FontFamily)(nil)
)

// FontFamilier describes types inherited from class FontFamily.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type FontFamilier interface {
	coreglib.Objector
	baseFontFamily() *FontFamily
}

var _ FontFamilier = (*FontFamily)(nil)

func init() {
	coreglib.RegisterClassInfo[*FontFamily, *FontFamilyClass, FontFamilyOverrides](
		GTypeFontFamily,
		initFontFamilyClass,
		wrapFontFamily,
		defaultFontFamilyOverrides,
	)
}

func initFontFamilyClass(gclass unsafe.Pointer, overrides FontFamilyOverrides, classInitFunc func(*FontFamilyClass)) {
	if classInitFunc != nil {
		class := (*FontFamilyClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapFontFamily(obj *coreglib.Object) *FontFamily {
	return &FontFamily{
		Object: obj,
	}
}

func marshalFontFamily(p uintptr) (interface{}, error) {
	return wrapFontFamily(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *FontFamily) baseFontFamily() *FontFamily {
	return v
}

// BaseFontFamily returns the underlying base object.
func BaseFontFamily(obj FontFamilier) *FontFamily {
	return obj.baseFontFamily()
}

// FontClass: instance of this type is always passed by reference.
type FontClass struct {
	*fontClass
}

// fontClass is the struct that's finalized.
type fontClass struct {
	native unsafe.Pointer
}

var GIRInfoFontClass = girepository.MustFind("Pango", "FontClass")

// FontDescription: PangoFontDescription describes a font in an
// implementation-independent manner.
//
// PangoFontDescription structures are used both to list what fonts are
// available on the system and also for specifying the characteristics of a font
// to load.
//
// An instance of this type is always passed by reference.
type FontDescription struct {
	*fontDescription
}

// fontDescription is the struct that's finalized.
type fontDescription struct {
	native unsafe.Pointer
}

var GIRInfoFontDescription = girepository.MustFind("Pango", "FontDescription")

func marshalFontDescription(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &FontDescription{&fontDescription{(unsafe.Pointer)(b)}}, nil
}

// FontFaceClass: instance of this type is always passed by reference.
type FontFaceClass struct {
	*fontFaceClass
}

// fontFaceClass is the struct that's finalized.
type fontFaceClass struct {
	native unsafe.Pointer
}

var GIRInfoFontFaceClass = girepository.MustFind("Pango", "FontFaceClass")

// FontFamilyClass: instance of this type is always passed by reference.
type FontFamilyClass struct {
	*fontFamilyClass
}

// fontFamilyClass is the struct that's finalized.
type fontFamilyClass struct {
	native unsafe.Pointer
}

var GIRInfoFontFamilyClass = girepository.MustFind("Pango", "FontFamilyClass")

// FontMetrics: PangoFontMetrics structure holds the overall metric information
// for a font.
//
// The information in a PangoFontMetrics structure may be restricted to a
// script. The fields of this structure are private to implementations of a font
// backend. See the documentation of the corresponding getters for documentation
// of their meaning.
//
// An instance of this type is always passed by reference.
type FontMetrics struct {
	*fontMetrics
}

// fontMetrics is the struct that's finalized.
type fontMetrics struct {
	native unsafe.Pointer
}

var GIRInfoFontMetrics = girepository.MustFind("Pango", "FontMetrics")

func marshalFontMetrics(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &FontMetrics{&fontMetrics{(unsafe.Pointer)(b)}}, nil
}
