// Code generated by girgen. DO NOT EDIT.

package pango

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeFontset       = coreglib.Type(girepository.MustFind("Pango", "Fontset").RegisteredGType())
	GTypeFontsetSimple = coreglib.Type(girepository.MustFind("Pango", "FontsetSimple").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeFontset, F: marshalFontset},
		coreglib.TypeMarshaler{T: GTypeFontsetSimple, F: marshalFontsetSimple},
	})
}

// FontsetOverrides contains methods that are overridable.
type FontsetOverrides struct {
}

func defaultFontsetOverrides(v *Fontset) FontsetOverrides {
	return FontsetOverrides{}
}

// Fontset: PangoFontset represents a set of PangoFont to use when rendering
// text.
//
// A PAngoFontset is the result of resolving a PangoFontDescription against a
// particular PangoContext. It has operations for finding the component font for
// a particular Unicode character, and for finding a composite set of metrics
// for the entire fontset.
type Fontset struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Fontset)(nil)
)

// Fontsetter describes types inherited from class Fontset.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type Fontsetter interface {
	coreglib.Objector
	baseFontset() *Fontset
}

var _ Fontsetter = (*Fontset)(nil)

func init() {
	coreglib.RegisterClassInfo[*Fontset, *FontsetClass, FontsetOverrides](
		GTypeFontset,
		initFontsetClass,
		wrapFontset,
		defaultFontsetOverrides,
	)
}

func initFontsetClass(gclass unsafe.Pointer, overrides FontsetOverrides, classInitFunc func(*FontsetClass)) {
	if classInitFunc != nil {
		class := (*FontsetClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapFontset(obj *coreglib.Object) *Fontset {
	return &Fontset{
		Object: obj,
	}
}

func marshalFontset(p uintptr) (interface{}, error) {
	return wrapFontset(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *Fontset) baseFontset() *Fontset {
	return v
}

// BaseFontset returns the underlying base object.
func BaseFontset(obj Fontsetter) *Fontset {
	return obj.baseFontset()
}

// FontsetSimple: PangoFontsetSimple is a implementation of the abstract
// PangoFontset base class as an array of fonts.
//
// When creating a PangoFontsetSimple, you have to provide the array of fonts
// that make up the fontset.
type FontsetSimple struct {
	_ [0]func() // equal guard
	Fontset
}

var (
	_ Fontsetter = (*FontsetSimple)(nil)
)

func wrapFontsetSimple(obj *coreglib.Object) *FontsetSimple {
	return &FontsetSimple{
		Fontset: Fontset{
			Object: obj,
		},
	}
}

func marshalFontsetSimple(p uintptr) (interface{}, error) {
	return wrapFontsetSimple(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// FontsetClass structure holds the virtual functions for a particular Fontset
// implementation.
//
// An instance of this type is always passed by reference.
type FontsetClass struct {
	*fontsetClass
}

// fontsetClass is the struct that's finalized.
type fontsetClass struct {
	native unsafe.Pointer
}

var GIRInfoFontsetClass = girepository.MustFind("Pango", "FontsetClass")
