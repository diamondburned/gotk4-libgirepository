// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeHScale = coreglib.Type(girepository.MustFind("Gtk", "HScale").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeHScale, F: marshalHScale},
	})
}

// HScaleOverrides contains methods that are overridable.
type HScaleOverrides struct {
}

func defaultHScaleOverrides(v *HScale) HScaleOverrides {
	return HScaleOverrides{}
}

// HScale widget is used to allow the user to select a value using a horizontal
// slider. To create one, use gtk_hscale_new_with_range().
//
// The position to show the current value, and the number of decimal places
// shown can be set using the parent Scale classâ€™s functions.
//
// GtkHScale has been deprecated, use Scale instead.
type HScale struct {
	_ [0]func() // equal guard
	Scale
}

var (
	_ Ranger = (*HScale)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*HScale, *HScaleClass, HScaleOverrides](
		GTypeHScale,
		initHScaleClass,
		wrapHScale,
		defaultHScaleOverrides,
	)
}

func initHScaleClass(gclass unsafe.Pointer, overrides HScaleOverrides, classInitFunc func(*HScaleClass)) {
	if classInitFunc != nil {
		class := (*HScaleClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapHScale(obj *coreglib.Object) *HScale {
	return &HScale{
		Scale: Scale{
			Range: Range{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
				Object: obj,
				Orientable: Orientable{
					Object: obj,
				},
			},
		},
	}
}

func marshalHScale(p uintptr) (interface{}, error) {
	return wrapHScale(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// HScaleClass: instance of this type is always passed by reference.
type HScaleClass struct {
	*hScaleClass
}

// hScaleClass is the struct that's finalized.
type hScaleClass struct {
	native unsafe.Pointer
}

var GIRInfoHScaleClass = girepository.MustFind("Gtk", "HScaleClass")
