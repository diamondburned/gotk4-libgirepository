// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeEntryAccessible = coreglib.Type(girepository.MustFind("Gtk", "EntryAccessible").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeEntryAccessible, F: marshalEntryAccessible},
	})
}

// EntryAccessibleOverrides contains methods that are overridable.
type EntryAccessibleOverrides struct {
}

func defaultEntryAccessibleOverrides(v *EntryAccessible) EntryAccessibleOverrides {
	return EntryAccessibleOverrides{}
}

type EntryAccessible struct {
	_ [0]func() // equal guard
	WidgetAccessible

	*coreglib.Object
	atk.Action
	atk.EditableText
	atk.Text
}

var (
	_ coreglib.Objector = (*EntryAccessible)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*EntryAccessible, *EntryAccessibleClass, EntryAccessibleOverrides](
		GTypeEntryAccessible,
		initEntryAccessibleClass,
		wrapEntryAccessible,
		defaultEntryAccessibleOverrides,
	)
}

func initEntryAccessibleClass(gclass unsafe.Pointer, overrides EntryAccessibleOverrides, classInitFunc func(*EntryAccessibleClass)) {
	if classInitFunc != nil {
		class := (*EntryAccessibleClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapEntryAccessible(obj *coreglib.Object) *EntryAccessible {
	return &EntryAccessible{
		WidgetAccessible: WidgetAccessible{
			Accessible: Accessible{
				AtkObject: atk.AtkObject{
					Object: obj,
				},
			},
			Component: atk.Component{
				Object: obj,
			},
		},
		Object: obj,
		Action: atk.Action{
			Object: obj,
		},
		EditableText: atk.EditableText{
			Object: obj,
		},
		Text: atk.Text{
			Object: obj,
		},
	}
}

func marshalEntryAccessible(p uintptr) (interface{}, error) {
	return wrapEntryAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// EntryAccessibleClass: instance of this type is always passed by reference.
type EntryAccessibleClass struct {
	*entryAccessibleClass
}

// entryAccessibleClass is the struct that's finalized.
type entryAccessibleClass struct {
	native unsafe.Pointer
}

var GIRInfoEntryAccessibleClass = girepository.MustFind("Gtk", "EntryAccessibleClass")
