// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeToolItemGroup = coreglib.Type(girepository.MustFind("Gtk", "ToolItemGroup").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeToolItemGroup, F: marshalToolItemGroup},
	})
}

// ToolItemGroupOverrides contains methods that are overridable.
type ToolItemGroupOverrides struct {
}

func defaultToolItemGroupOverrides(v *ToolItemGroup) ToolItemGroupOverrides {
	return ToolItemGroupOverrides{}
}

// ToolItemGroup is used together with ToolPalette to add ToolItems to a palette
// like container with different categories and drag and drop support.
//
//
// CSS nodes
//
// GtkToolItemGroup has a single CSS node named toolitemgroup.
type ToolItemGroup struct {
	_ [0]func() // equal guard
	Container

	*coreglib.Object
	atk.ImplementorIface
	coreglib.InitiallyUnowned
	Buildable
	ToolShell
	Widget
}

var (
	_ Containerer       = (*ToolItemGroup)(nil)
	_ coreglib.Objector = (*ToolItemGroup)(nil)
	_ Widgetter         = (*ToolItemGroup)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*ToolItemGroup, *ToolItemGroupClass, ToolItemGroupOverrides](
		GTypeToolItemGroup,
		initToolItemGroupClass,
		wrapToolItemGroup,
		defaultToolItemGroupOverrides,
	)
}

func initToolItemGroupClass(gclass unsafe.Pointer, overrides ToolItemGroupOverrides, classInitFunc func(*ToolItemGroupClass)) {
	if classInitFunc != nil {
		class := (*ToolItemGroupClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapToolItemGroup(obj *coreglib.Object) *ToolItemGroup {
	return &ToolItemGroup{
		Container: Container{
			Widget: Widget{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				ImplementorIface: atk.ImplementorIface{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
			},
		},
		Object: obj,
		ImplementorIface: atk.ImplementorIface{
			Object: obj,
		},
		InitiallyUnowned: coreglib.InitiallyUnowned{
			Object: obj,
		},
		Buildable: Buildable{
			Object: obj,
		},
		ToolShell: ToolShell{
			Widget: Widget{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				ImplementorIface: atk.ImplementorIface{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
			},
		},
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			ImplementorIface: atk.ImplementorIface{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
		},
	}
}

func marshalToolItemGroup(p uintptr) (interface{}, error) {
	return wrapToolItemGroup(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
