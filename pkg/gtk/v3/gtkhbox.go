// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeHBox = coreglib.Type(girepository.MustFind("Gtk", "HBox").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeHBox, F: marshalHBox},
	})
}

// HBoxOverrides contains methods that are overridable.
type HBoxOverrides struct {
}

func defaultHBoxOverrides(v *HBox) HBoxOverrides {
	return HBoxOverrides{}
}

// HBox is a container that organizes child widgets into a single row.
//
// Use the Box packing interface to determine the arrangement, spacing, width,
// and alignment of HBox children.
//
// All children are allocated the same height.
//
// GtkHBox has been deprecated. You can use Box instead, which is a very quick
// and easy change. If you have derived your own classes from GtkHBox, you can
// simply change the inheritance to derive directly from Box. No further changes
// are needed, since the default value of the Orientable:orientation property is
// GTK_ORIENTATION_HORIZONTAL.
//
// If you have a grid-like layout composed of nested boxes, and you donâ€™t need
// first-child or last-child styling, the recommendation is to switch to Grid.
// For more information about migrating to Grid, see [Migrating from other
// containers to GtkGrid][gtk-migrating-GtkGrid].
type HBox struct {
	_ [0]func() // equal guard
	Box
}

var (
	_ Containerer       = (*HBox)(nil)
	_ coreglib.Objector = (*HBox)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*HBox, *HBoxClass, HBoxOverrides](
		GTypeHBox,
		initHBoxClass,
		wrapHBox,
		defaultHBoxOverrides,
	)
}

func initHBoxClass(gclass unsafe.Pointer, overrides HBoxOverrides, classInitFunc func(*HBoxClass)) {
	if classInitFunc != nil {
		class := (*HBoxClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapHBox(obj *coreglib.Object) *HBox {
	return &HBox{
		Box: Box{
			Container: Container{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
			Object: obj,
			Orientable: Orientable{
				Object: obj,
			},
		},
	}
}

func marshalHBox(p uintptr) (interface{}, error) {
	return wrapHBox(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// HBoxClass: instance of this type is always passed by reference.
type HBoxClass struct {
	*hBoxClass
}

// hBoxClass is the struct that's finalized.
type hBoxClass struct {
	native unsafe.Pointer
}

var GIRInfoHBoxClass = girepository.MustFind("Gtk", "HBoxClass")
