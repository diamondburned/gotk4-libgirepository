// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeSearchBar = coreglib.Type(girepository.MustFind("Gtk", "SearchBar").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeSearchBar, F: marshalSearchBar},
	})
}

// SearchBarOverrides contains methods that are overridable.
type SearchBarOverrides struct {
}

func defaultSearchBarOverrides(v *SearchBar) SearchBarOverrides {
	return SearchBarOverrides{}
}

// SearchBar is a container made to have a search entry (possibly with
// additional connex widgets, such as drop-down menus, or buttons) built-in. The
// search bar would appear when a search is started through typing on the
// keyboard, or the applicationâ€™s search mode is toggled on.
//
// For keyboard presses to start a search, events will need to be forwarded from
// the top-level window that contains the search bar. See
// gtk_search_bar_handle_event() for example code. Common shortcuts such as
// Ctrl+F should be handled as an application action, or through the menu items.
//
// You will also need to tell the search bar about which entry you are using as
// your search entry using gtk_search_bar_connect_entry(). The following example
// shows you how to create a more complex search entry.
//
//
// CSS nodes
//
// GtkSearchBar has a single CSS node with name searchbar.
//
//
// Creating a search bar
//
// A simple example
// (https://gitlab.gnome.org/GNOME/gtk/blob/gtk-3-24/examples/search-bar.c).
type SearchBar struct {
	_ [0]func() // equal guard
	Bin
}

var (
	_ Binner = (*SearchBar)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*SearchBar, *SearchBarClass, SearchBarOverrides](
		GTypeSearchBar,
		initSearchBarClass,
		wrapSearchBar,
		defaultSearchBarOverrides,
	)
}

func initSearchBarClass(gclass unsafe.Pointer, overrides SearchBarOverrides, classInitFunc func(*SearchBarClass)) {
	if classInitFunc != nil {
		class := (*SearchBarClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapSearchBar(obj *coreglib.Object) *SearchBar {
	return &SearchBar{
		Bin: Bin{
			Container: Container{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalSearchBar(p uintptr) (interface{}, error) {
	return wrapSearchBar(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
