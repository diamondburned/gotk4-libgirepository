// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeInvisible = coreglib.Type(girepository.MustFind("Gtk", "Invisible").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeInvisible, F: marshalInvisible},
	})
}

// InvisibleOverrides contains methods that are overridable.
type InvisibleOverrides struct {
}

func defaultInvisibleOverrides(v *Invisible) InvisibleOverrides {
	return InvisibleOverrides{}
}

// Invisible widget is used internally in GTK+, and is probably not very useful
// for application developers.
//
// It is used for reliable pointer grabs and selection handling in the code for
// drag-and-drop.
type Invisible struct {
	_ [0]func() // equal guard
	Widget
}

var (
	_ Widgetter = (*Invisible)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*Invisible, *InvisibleClass, InvisibleOverrides](
		GTypeInvisible,
		initInvisibleClass,
		wrapInvisible,
		defaultInvisibleOverrides,
	)
}

func initInvisibleClass(gclass unsafe.Pointer, overrides InvisibleOverrides, classInitFunc func(*InvisibleClass)) {
	if classInitFunc != nil {
		class := (*InvisibleClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapInvisible(obj *coreglib.Object) *Invisible {
	return &Invisible{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			ImplementorIface: atk.ImplementorIface{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
		},
	}
}

func marshalInvisible(p uintptr) (interface{}, error) {
	return wrapInvisible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// InvisibleClass: instance of this type is always passed by reference.
type InvisibleClass struct {
	*invisibleClass
}

// invisibleClass is the struct that's finalized.
type invisibleClass struct {
	native unsafe.Pointer
}

var GIRInfoInvisibleClass = girepository.MustFind("Gtk", "InvisibleClass")
