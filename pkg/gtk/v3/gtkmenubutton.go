// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeMenuButton = coreglib.Type(girepository.MustFind("Gtk", "MenuButton").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeMenuButton, F: marshalMenuButton},
	})
}

// MenuButtonOverrides contains methods that are overridable.
type MenuButtonOverrides struct {
}

func defaultMenuButtonOverrides(v *MenuButton) MenuButtonOverrides {
	return MenuButtonOverrides{}
}

// MenuButton widget is used to display a popup when clicked on. This popup can
// be provided either as a Menu, a Popover or an abstract Model.
//
// The MenuButton widget can hold any valid child widget. That is, it can hold
// almost any other standard Widget. The most commonly used child is Image. If
// no widget is explicitely added to the MenuButton, a Image is automatically
// created, using an arrow image oriented according to MenuButton:direction or
// the generic “open-menu-symbolic” icon if the direction is not set.
//
// The positioning of the popup is determined by the MenuButton:direction
// property of the menu button.
//
// For menus, the Widget:halign and Widget:valign properties of the menu are
// also taken into account. For example, when the direction is GTK_ARROW_DOWN
// and the horizontal alignment is GTK_ALIGN_START, the menu will be positioned
// below the button, with the starting edge (depending on the text direction) of
// the menu aligned with the starting edge of the button. If there is not enough
// space below the button, the menu is popped up above the button instead. If
// the alignment would move part of the menu offscreen, it is “pushed in”.
//
// Direction = Down
//
// - halign = start
//
//    ! (down-start.png)
//
// - halign = center
//
//    ! (down-center.png)
//
// - halign = end
//
//    ! (down-end.png)
//
// Direction = Up
//
// - halign = start
//
//    ! (up-start.png)
//
// - halign = center
//
//    ! (up-center.png)
//
// - halign = end
//
//    ! (up-end.png)
//
// Direction = Left
//
// - valign = start
//
//    ! (left-start.png)
//
// - valign = center
//
//    ! (left-center.png)
//
// - valign = end
//
//    ! (left-end.png)
//
// Direction = Right
//
// - valign = start
//
//    ! (right-start.png)
//
// - valign = center
//
//    ! (right-center.png)
//
// - valign = end
//
//    ! (right-end.png)
//
//
// CSS nodes
//
// GtkMenuButton has a single CSS node with name button. To differentiate it
// from a plain Button, it gets the .popup style class.
type MenuButton struct {
	_ [0]func() // equal guard
	ToggleButton
}

var (
	_ Binner            = (*MenuButton)(nil)
	_ coreglib.Objector = (*MenuButton)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*MenuButton, *MenuButtonClass, MenuButtonOverrides](
		GTypeMenuButton,
		initMenuButtonClass,
		wrapMenuButton,
		defaultMenuButtonOverrides,
	)
}

func initMenuButtonClass(gclass unsafe.Pointer, overrides MenuButtonOverrides, classInitFunc func(*MenuButtonClass)) {
	if classInitFunc != nil {
		class := (*MenuButtonClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapMenuButton(obj *coreglib.Object) *MenuButton {
	return &MenuButton{
		ToggleButton: ToggleButton{
			Button: Button{
				Bin: Bin{
					Container: Container{
						Widget: Widget{
							InitiallyUnowned: coreglib.InitiallyUnowned{
								Object: obj,
							},
							Object: obj,
							ImplementorIface: atk.ImplementorIface{
								Object: obj,
							},
							Buildable: Buildable{
								Object: obj,
							},
						},
					},
				},
				Object: obj,
				Actionable: Actionable{
					Widget: Widget{
						InitiallyUnowned: coreglib.InitiallyUnowned{
							Object: obj,
						},
						Object: obj,
						ImplementorIface: atk.ImplementorIface{
							Object: obj,
						},
						Buildable: Buildable{
							Object: obj,
						},
					},
				},
				Activatable: Activatable{
					Object: obj,
				},
			},
		},
	}
}

func marshalMenuButton(p uintptr) (interface{}, error) {
	return wrapMenuButton(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// MenuButtonClass: instance of this type is always passed by reference.
type MenuButtonClass struct {
	*menuButtonClass
}

// menuButtonClass is the struct that's finalized.
type menuButtonClass struct {
	native unsafe.Pointer
}

var GIRInfoMenuButtonClass = girepository.MustFind("Gtk", "MenuButtonClass")
