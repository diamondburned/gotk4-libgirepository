// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gtk3_NativeDialog_ConnectResponse(gpointer, gint, guintptr);
import "C"

// GType values.
var (
	GTypeNativeDialog = coreglib.Type(girepository.MustFind("Gtk", "NativeDialog").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeNativeDialog, F: marshalNativeDialog},
	})
}

// NativeDialogOverrides contains methods that are overridable.
type NativeDialogOverrides struct {
}

func defaultNativeDialogOverrides(v *NativeDialog) NativeDialogOverrides {
	return NativeDialogOverrides{}
}

// NativeDialog: native dialogs are platform dialogs that don't use Dialog or
// Window. They are used in order to integrate better with a platform, by
// looking the same as other native applications and supporting platform
// specific features.
//
// The Dialog functions cannot be used on such objects, but we need a similar
// API in order to drive them. The NativeDialog object is an API that allows you
// to do this. It allows you to set various common properties on the dialog, as
// well as show and hide it and get a NativeDialog::response signal when the
// user finished with the dialog.
//
// There is also a gtk_native_dialog_run() helper that makes it easy to run any
// native dialog in a modal way with a recursive mainloop, similar to
// gtk_dialog_run().
type NativeDialog struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*NativeDialog)(nil)
)

// NativeDialogger describes types inherited from class NativeDialog.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type NativeDialogger interface {
	coreglib.Objector
	baseNativeDialog() *NativeDialog
}

var _ NativeDialogger = (*NativeDialog)(nil)

func init() {
	coreglib.RegisterClassInfo[*NativeDialog, *NativeDialogClass, NativeDialogOverrides](
		GTypeNativeDialog,
		initNativeDialogClass,
		wrapNativeDialog,
		defaultNativeDialogOverrides,
	)
}

func initNativeDialogClass(gclass unsafe.Pointer, overrides NativeDialogOverrides, classInitFunc func(*NativeDialogClass)) {
	if classInitFunc != nil {
		class := (*NativeDialogClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapNativeDialog(obj *coreglib.Object) *NativeDialog {
	return &NativeDialog{
		Object: obj,
	}
}

func marshalNativeDialog(p uintptr) (interface{}, error) {
	return wrapNativeDialog(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *NativeDialog) baseNativeDialog() *NativeDialog {
	return v
}

// BaseNativeDialog returns the underlying base object.
func BaseNativeDialog(obj NativeDialogger) *NativeDialog {
	return obj.baseNativeDialog()
}

// ConnectResponse is emitted when the user responds to the dialog.
//
// When this is called the dialog has been hidden.
//
// If you call gtk_native_dialog_hide() before the user responds to the dialog
// this signal will not be emitted.
func (v *NativeDialog) ConnectResponse(f func(responseId int)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "response", false, unsafe.Pointer(C._gotk4_gtk3_NativeDialog_ConnectResponse), f)
}

// NativeDialogClass: instance of this type is always passed by reference.
type NativeDialogClass struct {
	*nativeDialogClass
}

// nativeDialogClass is the struct that's finalized.
type nativeDialogClass struct {
	native unsafe.Pointer
}

var GIRInfoNativeDialogClass = girepository.MustFind("Gtk", "NativeDialogClass")
