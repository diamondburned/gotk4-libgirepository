// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeOffscreenWindow = coreglib.Type(girepository.MustFind("Gtk", "OffscreenWindow").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeOffscreenWindow, F: marshalOffscreenWindow},
	})
}

// OffscreenWindowOverrides contains methods that are overridable.
type OffscreenWindowOverrides struct {
}

func defaultOffscreenWindowOverrides(v *OffscreenWindow) OffscreenWindowOverrides {
	return OffscreenWindowOverrides{}
}

// OffscreenWindow is strictly intended to be used for obtaining snapshots of
// widgets that are not part of a normal widget hierarchy. Since OffscreenWindow
// is a toplevel widget you cannot obtain snapshots of a full window with it
// since you cannot pack a toplevel widget in another toplevel.
//
// The idea is to take a widget and manually set the state of it, add it to a
// GtkOffscreenWindow and then retrieve the snapshot as a #cairo_surface_t or
// Pixbuf.
//
// GtkOffscreenWindow derives from Window only as an implementation detail.
// Applications should not use any API specific to Window to operate on this
// object. It should be treated as a Bin that has no parent widget.
//
// When contained offscreen widgets are redrawn, GtkOffscreenWindow will emit a
// Widget::damage-event signal.
type OffscreenWindow struct {
	_ [0]func() // equal guard
	Window
}

var (
	_ Binner = (*OffscreenWindow)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*OffscreenWindow, *OffscreenWindowClass, OffscreenWindowOverrides](
		GTypeOffscreenWindow,
		initOffscreenWindowClass,
		wrapOffscreenWindow,
		defaultOffscreenWindowOverrides,
	)
}

func initOffscreenWindowClass(gclass unsafe.Pointer, overrides OffscreenWindowOverrides, classInitFunc func(*OffscreenWindowClass)) {
	if classInitFunc != nil {
		class := (*OffscreenWindowClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapOffscreenWindow(obj *coreglib.Object) *OffscreenWindow {
	return &OffscreenWindow{
		Window: Window{
			Bin: Bin{
				Container: Container{
					Widget: Widget{
						InitiallyUnowned: coreglib.InitiallyUnowned{
							Object: obj,
						},
						Object: obj,
						ImplementorIface: atk.ImplementorIface{
							Object: obj,
						},
						Buildable: Buildable{
							Object: obj,
						},
					},
				},
			},
		},
	}
}

func marshalOffscreenWindow(p uintptr) (interface{}, error) {
	return wrapOffscreenWindow(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// OffscreenWindowClass: instance of this type is always passed by reference.
type OffscreenWindowClass struct {
	*offscreenWindowClass
}

// offscreenWindowClass is the struct that's finalized.
type offscreenWindowClass struct {
	native unsafe.Pointer
}

var GIRInfoOffscreenWindowClass = girepository.MustFind("Gtk", "OffscreenWindowClass")
