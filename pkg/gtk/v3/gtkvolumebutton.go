// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeVolumeButton = coreglib.Type(girepository.MustFind("Gtk", "VolumeButton").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeVolumeButton, F: marshalVolumeButton},
	})
}

// VolumeButtonOverrides contains methods that are overridable.
type VolumeButtonOverrides struct {
}

func defaultVolumeButtonOverrides(v *VolumeButton) VolumeButtonOverrides {
	return VolumeButtonOverrides{}
}

// VolumeButton is a subclass of ScaleButton that has been tailored for use as a
// volume control widget with suitable icons, tooltips and accessible labels.
type VolumeButton struct {
	_ [0]func() // equal guard
	ScaleButton
}

var (
	_ coreglib.Objector = (*VolumeButton)(nil)
	_ Binner            = (*VolumeButton)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*VolumeButton, *VolumeButtonClass, VolumeButtonOverrides](
		GTypeVolumeButton,
		initVolumeButtonClass,
		wrapVolumeButton,
		defaultVolumeButtonOverrides,
	)
}

func initVolumeButtonClass(gclass unsafe.Pointer, overrides VolumeButtonOverrides, classInitFunc func(*VolumeButtonClass)) {
	if classInitFunc != nil {
		class := (*VolumeButtonClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapVolumeButton(obj *coreglib.Object) *VolumeButton {
	return &VolumeButton{
		ScaleButton: ScaleButton{
			Button: Button{
				Bin: Bin{
					Container: Container{
						Widget: Widget{
							InitiallyUnowned: coreglib.InitiallyUnowned{
								Object: obj,
							},
							Object: obj,
							ImplementorIface: atk.ImplementorIface{
								Object: obj,
							},
							Buildable: Buildable{
								Object: obj,
							},
						},
					},
				},
				Object: obj,
				Actionable: Actionable{
					Widget: Widget{
						InitiallyUnowned: coreglib.InitiallyUnowned{
							Object: obj,
						},
						Object: obj,
						ImplementorIface: atk.ImplementorIface{
							Object: obj,
						},
						Buildable: Buildable{
							Object: obj,
						},
					},
				},
				Activatable: Activatable{
					Object: obj,
				},
			},
			Object: obj,
			Orientable: Orientable{
				Object: obj,
			},
		},
	}
}

func marshalVolumeButton(p uintptr) (interface{}, error) {
	return wrapVolumeButton(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// VolumeButtonClass: instance of this type is always passed by reference.
type VolumeButtonClass struct {
	*volumeButtonClass
}

// volumeButtonClass is the struct that's finalized.
type volumeButtonClass struct {
	native unsafe.Pointer
}

var GIRInfoVolumeButtonClass = girepository.MustFind("Gtk", "VolumeButtonClass")
