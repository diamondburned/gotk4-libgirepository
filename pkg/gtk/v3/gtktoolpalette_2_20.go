// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeToolPalette = coreglib.Type(girepository.MustFind("Gtk", "ToolPalette").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeToolPalette, F: marshalToolPalette},
	})
}

// ToolPaletteOverrides contains methods that are overridable.
type ToolPaletteOverrides struct {
}

func defaultToolPaletteOverrides(v *ToolPalette) ToolPaletteOverrides {
	return ToolPaletteOverrides{}
}

// ToolPalette allows you to add ToolItems to a palette-like container with
// different categories and drag and drop support.
//
// A ToolPalette is created with a call to gtk_tool_palette_new().
//
// ToolItems cannot be added directly to a ToolPalette - instead they are added
// to a ToolItemGroup which can than be added to a ToolPalette. To add a
// ToolItemGroup to a ToolPalette, use gtk_container_add().
//
//    static void
//    passive_canvas_drag_data_received (GtkWidget        *widget,
//                                       GdkDragContext   *context,
//                                       gint              x,
//                                       gint              y,
//                                       GtkSelectionData *selection,
//                                       guint             info,
//                                       guint             time,
//                                       gpointer          data)
//    {
//      GtkWidget *palette;
//      GtkWidget *item;
//
//      // Get the dragged item
//      palette = gtk_widget_get_ancestor (gtk_drag_get_source_widget (context),
//                                         GTK_TYPE_TOOL_PALETTE);
//      if (palette != NULL)
//        item = gtk_tool_palette_get_drag_item (GTK_TOOL_PALETTE (palette),
//                                               selection);
//
//      // Do something with item
//    }
//
//    GtkWidget *target, palette;
//
//    palette = gtk_tool_palette_new ();
//    target = gtk_drawing_area_new ();
//
//    g_signal_connect (G_OBJECT (target), "drag-data-received",
//                      G_CALLBACK (passive_canvas_drag_data_received), NULL);
//    gtk_tool_palette_add_drag_dest (GTK_TOOL_PALETTE (palette), target,
//                                    GTK_DEST_DEFAULT_ALL,
//                                    GTK_TOOL_PALETTE_DRAG_ITEMS,
//                                    GDK_ACTION_COPY);
//
//
// CSS nodes
//
// GtkToolPalette has a single CSS node named toolpalette.
type ToolPalette struct {
	_ [0]func() // equal guard
	Container

	*coreglib.Object
	Orientable
	Scrollable
}

var (
	_ Containerer       = (*ToolPalette)(nil)
	_ coreglib.Objector = (*ToolPalette)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*ToolPalette, *ToolPaletteClass, ToolPaletteOverrides](
		GTypeToolPalette,
		initToolPaletteClass,
		wrapToolPalette,
		defaultToolPaletteOverrides,
	)
}

func initToolPaletteClass(gclass unsafe.Pointer, overrides ToolPaletteOverrides, classInitFunc func(*ToolPaletteClass)) {
	if classInitFunc != nil {
		class := (*ToolPaletteClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapToolPalette(obj *coreglib.Object) *ToolPalette {
	return &ToolPalette{
		Container: Container{
			Widget: Widget{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				ImplementorIface: atk.ImplementorIface{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
			},
		},
		Object: obj,
		Orientable: Orientable{
			Object: obj,
		},
		Scrollable: Scrollable{
			Object: obj,
		},
	}
}

func marshalToolPalette(p uintptr) (interface{}, error) {
	return wrapToolPalette(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
