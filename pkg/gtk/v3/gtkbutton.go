// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gtk3_Button_ConnectReleased(gpointer, guintptr);
// extern void _gotk4_gtk3_Button_ConnectPressed(gpointer, guintptr);
// extern void _gotk4_gtk3_Button_ConnectLeave(gpointer, guintptr);
// extern void _gotk4_gtk3_Button_ConnectEnter(gpointer, guintptr);
// extern void _gotk4_gtk3_Button_ConnectClicked(gpointer, guintptr);
// extern void _gotk4_gtk3_Button_ConnectActivate(gpointer, guintptr);
import "C"

// GType values.
var (
	GTypeButton = coreglib.Type(girepository.MustFind("Gtk", "Button").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeButton, F: marshalButton},
	})
}

// ButtonOverrides contains methods that are overridable.
type ButtonOverrides struct {
}

func defaultButtonOverrides(v *Button) ButtonOverrides {
	return ButtonOverrides{}
}

// Button widget is generally used to trigger a callback function that is called
// when the button is pressed. The various signals and how to use them are
// outlined below.
//
// The Button widget can hold any valid child widget. That is, it can hold
// almost any other standard Widget. The most commonly used child is the Label.
//
//
// CSS nodes
//
// GtkButton has a single CSS node with name button. The node will get the style
// classes .image-button or .text-button, if the content is just an image or
// label, respectively. It may also receive the .flat style class.
//
// Other style classes that are commonly used with GtkButton include
// .suggested-action and .destructive-action. In special cases, buttons can be
// made round by adding the .circular style class.
//
// Button-like widgets like ToggleButton, MenuButton, VolumeButton, LockButton,
// ColorButton, FontButton or FileChooserButton use style classes such as
// .toggle, .popup, .scale, .lock, .color, .font, .file to differentiate
// themselves from a plain GtkButton.
type Button struct {
	_ [0]func() // equal guard
	Bin

	*coreglib.Object
	Actionable
	Activatable
}

var (
	_ Binner            = (*Button)(nil)
	_ coreglib.Objector = (*Button)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*Button, *ButtonClass, ButtonOverrides](
		GTypeButton,
		initButtonClass,
		wrapButton,
		defaultButtonOverrides,
	)
}

func initButtonClass(gclass unsafe.Pointer, overrides ButtonOverrides, classInitFunc func(*ButtonClass)) {
	if classInitFunc != nil {
		class := (*ButtonClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapButton(obj *coreglib.Object) *Button {
	return &Button{
		Bin: Bin{
			Container: Container{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
		},
		Object: obj,
		Actionable: Actionable{
			Widget: Widget{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				ImplementorIface: atk.ImplementorIface{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
			},
		},
		Activatable: Activatable{
			Object: obj,
		},
	}
}

func marshalButton(p uintptr) (interface{}, error) {
	return wrapButton(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectActivate signal on GtkButton is an action signal and emitting it
// causes the button to animate press then release. Applications should never
// connect to this signal, but use the Button::clicked signal.
func (v *Button) ConnectActivate(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "activate", false, unsafe.Pointer(C._gotk4_gtk3_Button_ConnectActivate), f)
}

// ConnectClicked is emitted when the button has been activated (pressed and
// released).
func (v *Button) ConnectClicked(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "clicked", false, unsafe.Pointer(C._gotk4_gtk3_Button_ConnectClicked), f)
}

// ConnectEnter is emitted when the pointer enters the button.
func (v *Button) ConnectEnter(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "enter", false, unsafe.Pointer(C._gotk4_gtk3_Button_ConnectEnter), f)
}

// ConnectLeave is emitted when the pointer leaves the button.
func (v *Button) ConnectLeave(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "leave", false, unsafe.Pointer(C._gotk4_gtk3_Button_ConnectLeave), f)
}

// ConnectPressed is emitted when the button is pressed.
func (v *Button) ConnectPressed(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "pressed", false, unsafe.Pointer(C._gotk4_gtk3_Button_ConnectPressed), f)
}

// ConnectReleased is emitted when the button is released.
func (v *Button) ConnectReleased(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "released", false, unsafe.Pointer(C._gotk4_gtk3_Button_ConnectReleased), f)
}

// ButtonClass: instance of this type is always passed by reference.
type ButtonClass struct {
	*buttonClass
}

// buttonClass is the struct that's finalized.
type buttonClass struct {
	native unsafe.Pointer
}

var GIRInfoButtonClass = girepository.MustFind("Gtk", "ButtonClass")
