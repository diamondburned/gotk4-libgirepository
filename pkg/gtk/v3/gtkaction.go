// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gtk3_Action_ConnectActivate(gpointer, guintptr);
import "C"

// GType values.
var (
	GTypeAction = coreglib.Type(girepository.MustFind("Gtk", "Action").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeAction, F: marshalAction},
	})
}

// ActionOverrides contains methods that are overridable.
type ActionOverrides struct {
}

func defaultActionOverrides(v *Action) ActionOverrides {
	return ActionOverrides{}
}

// Action: > In GTK+ 3.10, GtkAction has been deprecated. Use #GAction >
// instead, and associate actions with Actionable widgets. Use > Model for
// creating menus with gtk_menu_new_from_model().
//
// Actions represent operations that the user can be perform, along with some
// information how it should be presented in the interface. Each action provides
// methods to create icons, menu items and toolbar items representing itself.
//
// As well as the callback that is called when the action gets activated, the
// following also gets associated with the action:
//
// - a name (not translated, for path lookup)
//
// - a label (translated, for display)
//
// - an accelerator
//
// - whether label indicates a stock id
//
// - a tooltip (optional, translated)
//
// - a toolbar label (optional, shorter than label)
//
//    The action will also have some state information:
//
// - visible (shown/hidden)
//
// - sensitive (enabled/disabled)
//
// Apart from regular actions, there are [toggle actions][GtkToggleAction],
// which can be toggled between two states and [radio actions][GtkRadioAction],
// of which only one in a group can be in the “active” state. Other actions can
// be implemented as Action subclasses.
//
// Each action can have one or more proxy widgets. To act as an action proxy,
// widget needs to implement Activatable interface. Proxies mirror the state of
// the action and should change when the action’s state changes. Properties that
// are always mirrored by proxies are Action:sensitive and Action:visible.
// Action:gicon, Action:icon-name, Action:label, Action:short-label and
// Action:stock-id properties are only mirorred if proxy widget has
// Activatable:use-action-appearance property set to TRUE.
//
// When the proxy is activated, it should activate its action.
type Action struct {
	_ [0]func() // equal guard
	*coreglib.Object

	Buildable
}

var (
	_ coreglib.Objector = (*Action)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*Action, *ActionClass, ActionOverrides](
		GTypeAction,
		initActionClass,
		wrapAction,
		defaultActionOverrides,
	)
}

func initActionClass(gclass unsafe.Pointer, overrides ActionOverrides, classInitFunc func(*ActionClass)) {
	if classInitFunc != nil {
		class := (*ActionClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapAction(obj *coreglib.Object) *Action {
	return &Action{
		Object: obj,
		Buildable: Buildable{
			Object: obj,
		},
	}
}

func marshalAction(p uintptr) (interface{}, error) {
	return wrapAction(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectActivate: "activate" signal is emitted when the action is activated.
func (v *Action) ConnectActivate(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "activate", false, unsafe.Pointer(C._gotk4_gtk3_Action_ConnectActivate), f)
}

// ActionClass: instance of this type is always passed by reference.
type ActionClass struct {
	*actionClass
}

// actionClass is the struct that's finalized.
type actionClass struct {
	native unsafe.Pointer
}

var GIRInfoActionClass = girepository.MustFind("Gtk", "ActionClass")
