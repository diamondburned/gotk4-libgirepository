// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeRendererCellAccessible = coreglib.Type(girepository.MustFind("Gtk", "RendererCellAccessible").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeRendererCellAccessible, F: marshalRendererCellAccessible},
	})
}

// RendererCellAccessibleOverrides contains methods that are overridable.
type RendererCellAccessibleOverrides struct {
}

func defaultRendererCellAccessibleOverrides(v *RendererCellAccessible) RendererCellAccessibleOverrides {
	return RendererCellAccessibleOverrides{}
}

type RendererCellAccessible struct {
	_ [0]func() // equal guard
	CellAccessible
}

var (
	_ coreglib.Objector = (*RendererCellAccessible)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*RendererCellAccessible, *RendererCellAccessibleClass, RendererCellAccessibleOverrides](
		GTypeRendererCellAccessible,
		initRendererCellAccessibleClass,
		wrapRendererCellAccessible,
		defaultRendererCellAccessibleOverrides,
	)
}

func initRendererCellAccessibleClass(gclass unsafe.Pointer, overrides RendererCellAccessibleOverrides, classInitFunc func(*RendererCellAccessibleClass)) {
	if classInitFunc != nil {
		class := (*RendererCellAccessibleClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapRendererCellAccessible(obj *coreglib.Object) *RendererCellAccessible {
	return &RendererCellAccessible{
		CellAccessible: CellAccessible{
			Accessible: Accessible{
				AtkObject: atk.AtkObject{
					Object: obj,
				},
			},
			Object: obj,
			Action: atk.Action{
				Object: obj,
			},
			AtkObject: atk.AtkObject{
				Object: obj,
			},
			Component: atk.Component{
				Object: obj,
			},
			TableCell: atk.TableCell{
				AtkObject: atk.AtkObject{
					Object: obj,
				},
			},
		},
	}
}

func marshalRendererCellAccessible(p uintptr) (interface{}, error) {
	return wrapRendererCellAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// RendererCellAccessibleClass: instance of this type is always passed by
// reference.
type RendererCellAccessibleClass struct {
	*rendererCellAccessibleClass
}

// rendererCellAccessibleClass is the struct that's finalized.
type rendererCellAccessibleClass struct {
	native unsafe.Pointer
}

var GIRInfoRendererCellAccessibleClass = girepository.MustFind("Gtk", "RendererCellAccessibleClass")
