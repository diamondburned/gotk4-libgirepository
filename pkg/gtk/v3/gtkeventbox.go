// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeEventBox = coreglib.Type(girepository.MustFind("Gtk", "EventBox").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeEventBox, F: marshalEventBox},
	})
}

// EventBoxOverrides contains methods that are overridable.
type EventBoxOverrides struct {
}

func defaultEventBoxOverrides(v *EventBox) EventBoxOverrides {
	return EventBoxOverrides{}
}

// EventBox widget is a subclass of Bin which also has its own window. It is
// useful since it allows you to catch events for widgets which do not have
// their own window.
type EventBox struct {
	_ [0]func() // equal guard
	Bin
}

var (
	_ Binner = (*EventBox)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*EventBox, *EventBoxClass, EventBoxOverrides](
		GTypeEventBox,
		initEventBoxClass,
		wrapEventBox,
		defaultEventBoxOverrides,
	)
}

func initEventBoxClass(gclass unsafe.Pointer, overrides EventBoxOverrides, classInitFunc func(*EventBoxClass)) {
	if classInitFunc != nil {
		class := (*EventBoxClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapEventBox(obj *coreglib.Object) *EventBox {
	return &EventBox{
		Bin: Bin{
			Container: Container{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalEventBox(p uintptr) (interface{}, error) {
	return wrapEventBox(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// EventBoxClass: instance of this type is always passed by reference.
type EventBoxClass struct {
	*eventBoxClass
}

// eventBoxClass is the struct that's finalized.
type eventBoxClass struct {
	native unsafe.Pointer
}

var GIRInfoEventBoxClass = girepository.MustFind("Gtk", "EventBoxClass")
