// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeAspectFrame = coreglib.Type(girepository.MustFind("Gtk", "AspectFrame").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeAspectFrame, F: marshalAspectFrame},
	})
}

// AspectFrameOverrides contains methods that are overridable.
type AspectFrameOverrides struct {
}

func defaultAspectFrameOverrides(v *AspectFrame) AspectFrameOverrides {
	return AspectFrameOverrides{}
}

// AspectFrame is useful when you want pack a widget so that it can resize but
// always retains the same aspect ratio. For instance, one might be drawing a
// small preview of a larger image. AspectFrame derives from Frame, so it can
// draw a label and a frame around the child. The frame will be “shrink-wrapped”
// to the size of the child.
//
//
// CSS nodes
//
// GtkAspectFrame uses a CSS node with name frame.
type AspectFrame struct {
	_ [0]func() // equal guard
	Frame
}

var (
	_ Binner = (*AspectFrame)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*AspectFrame, *AspectFrameClass, AspectFrameOverrides](
		GTypeAspectFrame,
		initAspectFrameClass,
		wrapAspectFrame,
		defaultAspectFrameOverrides,
	)
}

func initAspectFrameClass(gclass unsafe.Pointer, overrides AspectFrameOverrides, classInitFunc func(*AspectFrameClass)) {
	if classInitFunc != nil {
		class := (*AspectFrameClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapAspectFrame(obj *coreglib.Object) *AspectFrame {
	return &AspectFrame{
		Frame: Frame{
			Bin: Bin{
				Container: Container{
					Widget: Widget{
						InitiallyUnowned: coreglib.InitiallyUnowned{
							Object: obj,
						},
						Object: obj,
						ImplementorIface: atk.ImplementorIface{
							Object: obj,
						},
						Buildable: Buildable{
							Object: obj,
						},
					},
				},
			},
		},
	}
}

func marshalAspectFrame(p uintptr) (interface{}, error) {
	return wrapAspectFrame(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// AspectFrameClass: instance of this type is always passed by reference.
type AspectFrameClass struct {
	*aspectFrameClass
}

// aspectFrameClass is the struct that's finalized.
type aspectFrameClass struct {
	native unsafe.Pointer
}

var GIRInfoAspectFrameClass = girepository.MustFind("Gtk", "AspectFrameClass")
