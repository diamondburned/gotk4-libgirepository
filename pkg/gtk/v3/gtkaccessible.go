// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeAccessible = coreglib.Type(girepository.MustFind("Gtk", "Accessible").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeAccessible, F: marshalAccessible},
	})
}

// AccessibleOverrides contains methods that are overridable.
type AccessibleOverrides struct {
}

func defaultAccessibleOverrides(v *Accessible) AccessibleOverrides {
	return AccessibleOverrides{}
}

// Accessible class is the base class for accessible implementations for Widget
// subclasses. It is a thin wrapper around Object, which adds facilities for
// associating a widget with its accessible object.
//
// An accessible implementation for a third-party widget should derive from
// Accessible and implement the suitable interfaces from ATK, such as Text or
// Selection. To establish the connection between the widget class and its
// corresponding acccessible implementation, override the get_accessible vfunc
// in WidgetClass.
type Accessible struct {
	_ [0]func() // equal guard
	atk.AtkObject
}

var (
	_ coreglib.Objector = (*Accessible)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*Accessible, *AccessibleClass, AccessibleOverrides](
		GTypeAccessible,
		initAccessibleClass,
		wrapAccessible,
		defaultAccessibleOverrides,
	)
}

func initAccessibleClass(gclass unsafe.Pointer, overrides AccessibleOverrides, classInitFunc func(*AccessibleClass)) {
	if classInitFunc != nil {
		class := (*AccessibleClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapAccessible(obj *coreglib.Object) *Accessible {
	return &Accessible{
		AtkObject: atk.AtkObject{
			Object: obj,
		},
	}
}

func marshalAccessible(p uintptr) (interface{}, error) {
	return wrapAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// AccessibleClass: instance of this type is always passed by reference.
type AccessibleClass struct {
	*accessibleClass
}

// accessibleClass is the struct that's finalized.
type accessibleClass struct {
	native unsafe.Pointer
}

var GIRInfoAccessibleClass = girepository.MustFind("Gtk", "AccessibleClass")
