// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeFontChooserDialog = coreglib.Type(girepository.MustFind("Gtk", "FontChooserDialog").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeFontChooserDialog, F: marshalFontChooserDialog},
	})
}

// FontChooserDialogOverrides contains methods that are overridable.
type FontChooserDialogOverrides struct {
}

func defaultFontChooserDialogOverrides(v *FontChooserDialog) FontChooserDialogOverrides {
	return FontChooserDialogOverrides{}
}

// FontChooserDialog widget is a dialog for selecting a font. It implements the
// FontChooser interface.
//
//
// GtkFontChooserDialog as GtkBuildable
//
// The GtkFontChooserDialog implementation of the Buildable interface exposes
// the buttons with the names “select_button” and “cancel_button”.
type FontChooserDialog struct {
	_ [0]func() // equal guard
	Dialog

	*coreglib.Object
	FontChooser
}

var (
	_ coreglib.Objector = (*FontChooserDialog)(nil)
	_ Binner            = (*FontChooserDialog)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*FontChooserDialog, *FontChooserDialogClass, FontChooserDialogOverrides](
		GTypeFontChooserDialog,
		initFontChooserDialogClass,
		wrapFontChooserDialog,
		defaultFontChooserDialogOverrides,
	)
}

func initFontChooserDialogClass(gclass unsafe.Pointer, overrides FontChooserDialogOverrides, classInitFunc func(*FontChooserDialogClass)) {
	if classInitFunc != nil {
		class := (*FontChooserDialogClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapFontChooserDialog(obj *coreglib.Object) *FontChooserDialog {
	return &FontChooserDialog{
		Dialog: Dialog{
			Window: Window{
				Bin: Bin{
					Container: Container{
						Widget: Widget{
							InitiallyUnowned: coreglib.InitiallyUnowned{
								Object: obj,
							},
							Object: obj,
							ImplementorIface: atk.ImplementorIface{
								Object: obj,
							},
							Buildable: Buildable{
								Object: obj,
							},
						},
					},
				},
			},
		},
		Object: obj,
		FontChooser: FontChooser{
			Object: obj,
		},
	}
}

func marshalFontChooserDialog(p uintptr) (interface{}, error) {
	return wrapFontChooserDialog(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
