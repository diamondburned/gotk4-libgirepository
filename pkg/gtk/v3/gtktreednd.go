// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeTreeDragDest   = coreglib.Type(girepository.MustFind("Gtk", "TreeDragDest").RegisteredGType())
	GTypeTreeDragSource = coreglib.Type(girepository.MustFind("Gtk", "TreeDragSource").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeTreeDragDest, F: marshalTreeDragDest},
		coreglib.TypeMarshaler{T: GTypeTreeDragSource, F: marshalTreeDragSource},
	})
}

// TreeDragDestOverrider contains methods that are overridable.
type TreeDragDestOverrider interface {
}

//
// TreeDragDest wraps an interface. This means the user can get the
// underlying type by calling Cast().
type TreeDragDest struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*TreeDragDest)(nil)
)

// TreeDragDester describes TreeDragDest's interface methods.
type TreeDragDester interface {
	coreglib.Objector

	baseTreeDragDest() *TreeDragDest
}

var _ TreeDragDester = (*TreeDragDest)(nil)

func ifaceInitTreeDragDester(gifacePtr, data C.gpointer) {
}

func wrapTreeDragDest(obj *coreglib.Object) *TreeDragDest {
	return &TreeDragDest{
		Object: obj,
	}
}

func marshalTreeDragDest(p uintptr) (interface{}, error) {
	return wrapTreeDragDest(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *TreeDragDest) baseTreeDragDest() *TreeDragDest {
	return v
}

// BaseTreeDragDest returns the underlying base object.
func BaseTreeDragDest(obj TreeDragDester) *TreeDragDest {
	return obj.baseTreeDragDest()
}

// TreeDragSourceOverrider contains methods that are overridable.
type TreeDragSourceOverrider interface {
}

//
// TreeDragSource wraps an interface. This means the user can get the
// underlying type by calling Cast().
type TreeDragSource struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*TreeDragSource)(nil)
)

// TreeDragSourcer describes TreeDragSource's interface methods.
type TreeDragSourcer interface {
	coreglib.Objector

	baseTreeDragSource() *TreeDragSource
}

var _ TreeDragSourcer = (*TreeDragSource)(nil)

func ifaceInitTreeDragSourcer(gifacePtr, data C.gpointer) {
}

func wrapTreeDragSource(obj *coreglib.Object) *TreeDragSource {
	return &TreeDragSource{
		Object: obj,
	}
}

func marshalTreeDragSource(p uintptr) (interface{}, error) {
	return wrapTreeDragSource(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *TreeDragSource) baseTreeDragSource() *TreeDragSource {
	return v
}

// BaseTreeDragSource returns the underlying base object.
func BaseTreeDragSource(obj TreeDragSourcer) *TreeDragSource {
	return obj.baseTreeDragSource()
}

// TreeDragDestIface: instance of this type is always passed by reference.
type TreeDragDestIface struct {
	*treeDragDestIface
}

// treeDragDestIface is the struct that's finalized.
type treeDragDestIface struct {
	native unsafe.Pointer
}

var GIRInfoTreeDragDestIface = girepository.MustFind("Gtk", "TreeDragDestIface")

// TreeDragSourceIface: instance of this type is always passed by reference.
type TreeDragSourceIface struct {
	*treeDragSourceIface
}

// treeDragSourceIface is the struct that's finalized.
type treeDragSourceIface struct {
	native unsafe.Pointer
}

var GIRInfoTreeDragSourceIface = girepository.MustFind("Gtk", "TreeDragSourceIface")
