// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gtk3_HandleBox_ConnectChildDetached(gpointer, void*, guintptr);
// extern void _gotk4_gtk3_HandleBox_ConnectChildAttached(gpointer, void*, guintptr);
import "C"

// GType values.
var (
	GTypeHandleBox = coreglib.Type(girepository.MustFind("Gtk", "HandleBox").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeHandleBox, F: marshalHandleBox},
	})
}

// HandleBoxOverrides contains methods that are overridable.
type HandleBoxOverrides struct {
}

func defaultHandleBoxOverrides(v *HandleBox) HandleBoxOverrides {
	return HandleBoxOverrides{}
}

// HandleBox widget allows a portion of a window to be "torn off". It is a bin
// widget which displays its child and a handle that the user can drag to tear
// off a separate window (the “float window”) containing the child widget. A
// thin “ghost” is drawn in the original location of the handlebox. By dragging
// the separate window back to its original location, it can be reattached.
//
// When reattaching, the ghost and float window, must be aligned along one of
// the edges, the “snap edge”. This either can be specified by the application
// programmer explicitly, or GTK+ will pick a reasonable default based on the
// handle position.
//
// To make detaching and reattaching the handlebox as minimally confusing as
// possible to the user, it is important to set the snap edge so that the snap
// edge does not move when the handlebox is deattached. For instance, if the
// handlebox is packed at the bottom of a VBox, then when the handlebox is
// detached, the bottom edge of the handlebox's allocation will remain fixed as
// the height of the handlebox shrinks, so the snap edge should be set to
// GTK_POS_BOTTOM.
//
// > HandleBox has been deprecated. It is very specialized, lacks features > to
// make it useful and most importantly does not fit well into modern >
// application design. Do not use it. There is no replacement.
type HandleBox struct {
	_ [0]func() // equal guard
	Bin
}

var (
	_ Binner = (*HandleBox)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*HandleBox, *HandleBoxClass, HandleBoxOverrides](
		GTypeHandleBox,
		initHandleBoxClass,
		wrapHandleBox,
		defaultHandleBoxOverrides,
	)
}

func initHandleBoxClass(gclass unsafe.Pointer, overrides HandleBoxOverrides, classInitFunc func(*HandleBoxClass)) {
	if classInitFunc != nil {
		class := (*HandleBoxClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapHandleBox(obj *coreglib.Object) *HandleBox {
	return &HandleBox{
		Bin: Bin{
			Container: Container{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalHandleBox(p uintptr) (interface{}, error) {
	return wrapHandleBox(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectChildAttached: this signal is emitted when the contents of the
// handlebox are reattached to the main window.
func (v *HandleBox) ConnectChildAttached(f func(widget Widgetter)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "child-attached", false, unsafe.Pointer(C._gotk4_gtk3_HandleBox_ConnectChildAttached), f)
}

// ConnectChildDetached: this signal is emitted when the contents of the
// handlebox are detached from the main window.
func (v *HandleBox) ConnectChildDetached(f func(widget Widgetter)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "child-detached", false, unsafe.Pointer(C._gotk4_gtk3_HandleBox_ConnectChildDetached), f)
}

// HandleBoxClass: instance of this type is always passed by reference.
type HandleBoxClass struct {
	*handleBoxClass
}

// handleBoxClass is the struct that's finalized.
type handleBoxClass struct {
	native unsafe.Pointer
}

var GIRInfoHandleBoxClass = girepository.MustFind("Gtk", "HandleBoxClass")
