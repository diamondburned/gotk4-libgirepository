// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeContainerAccessible = coreglib.Type(girepository.MustFind("Gtk", "ContainerAccessible").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeContainerAccessible, F: marshalContainerAccessible},
	})
}

// ContainerAccessibleOverrides contains methods that are overridable.
type ContainerAccessibleOverrides struct {
}

func defaultContainerAccessibleOverrides(v *ContainerAccessible) ContainerAccessibleOverrides {
	return ContainerAccessibleOverrides{}
}

type ContainerAccessible struct {
	_ [0]func() // equal guard
	WidgetAccessible
}

var (
	_ coreglib.Objector = (*ContainerAccessible)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*ContainerAccessible, *ContainerAccessibleClass, ContainerAccessibleOverrides](
		GTypeContainerAccessible,
		initContainerAccessibleClass,
		wrapContainerAccessible,
		defaultContainerAccessibleOverrides,
	)
}

func initContainerAccessibleClass(gclass unsafe.Pointer, overrides ContainerAccessibleOverrides, classInitFunc func(*ContainerAccessibleClass)) {
	if classInitFunc != nil {
		class := (*ContainerAccessibleClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapContainerAccessible(obj *coreglib.Object) *ContainerAccessible {
	return &ContainerAccessible{
		WidgetAccessible: WidgetAccessible{
			Accessible: Accessible{
				AtkObject: atk.AtkObject{
					Object: obj,
				},
			},
			Component: atk.Component{
				Object: obj,
			},
		},
	}
}

func marshalContainerAccessible(p uintptr) (interface{}, error) {
	return wrapContainerAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ContainerAccessibleClass: instance of this type is always passed by
// reference.
type ContainerAccessibleClass struct {
	*containerAccessibleClass
}

// containerAccessibleClass is the struct that's finalized.
type containerAccessibleClass struct {
	native unsafe.Pointer
}

var GIRInfoContainerAccessibleClass = girepository.MustFind("Gtk", "ContainerAccessibleClass")
