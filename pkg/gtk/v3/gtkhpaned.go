// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeHPaned = coreglib.Type(girepository.MustFind("Gtk", "HPaned").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeHPaned, F: marshalHPaned},
	})
}

// HPanedOverrides contains methods that are overridable.
type HPanedOverrides struct {
}

func defaultHPanedOverrides(v *HPaned) HPanedOverrides {
	return HPanedOverrides{}
}

// HPaned widget is a container widget with two children arranged horizontally.
// The division between the two panes is adjustable by the user by dragging a
// handle. See Paned for details.
//
// GtkHPaned has been deprecated, use Paned instead.
type HPaned struct {
	_ [0]func() // equal guard
	Paned
}

var (
	_ Containerer       = (*HPaned)(nil)
	_ coreglib.Objector = (*HPaned)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*HPaned, *HPanedClass, HPanedOverrides](
		GTypeHPaned,
		initHPanedClass,
		wrapHPaned,
		defaultHPanedOverrides,
	)
}

func initHPanedClass(gclass unsafe.Pointer, overrides HPanedOverrides, classInitFunc func(*HPanedClass)) {
	if classInitFunc != nil {
		class := (*HPanedClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapHPaned(obj *coreglib.Object) *HPaned {
	return &HPaned{
		Paned: Paned{
			Container: Container{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
			Object: obj,
			Orientable: Orientable{
				Object: obj,
			},
		},
	}
}

func marshalHPaned(p uintptr) (interface{}, error) {
	return wrapHPaned(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// HPanedClass: instance of this type is always passed by reference.
type HPanedClass struct {
	*hPanedClass
}

// hPanedClass is the struct that's finalized.
type hPanedClass struct {
	native unsafe.Pointer
}

var GIRInfoHPanedClass = girepository.MustFind("Gtk", "HPanedClass")
