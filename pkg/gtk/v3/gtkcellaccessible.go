// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeCellAccessible = coreglib.Type(girepository.MustFind("Gtk", "CellAccessible").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeCellAccessible, F: marshalCellAccessible},
	})
}

// CellAccessibleOverrides contains methods that are overridable.
type CellAccessibleOverrides struct {
}

func defaultCellAccessibleOverrides(v *CellAccessible) CellAccessibleOverrides {
	return CellAccessibleOverrides{}
}

type CellAccessible struct {
	_ [0]func() // equal guard
	Accessible

	*coreglib.Object
	atk.Action
	atk.AtkObject
	atk.Component
	atk.TableCell
}

var (
	_ coreglib.Objector = (*CellAccessible)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*CellAccessible, *CellAccessibleClass, CellAccessibleOverrides](
		GTypeCellAccessible,
		initCellAccessibleClass,
		wrapCellAccessible,
		defaultCellAccessibleOverrides,
	)
}

func initCellAccessibleClass(gclass unsafe.Pointer, overrides CellAccessibleOverrides, classInitFunc func(*CellAccessibleClass)) {
	if classInitFunc != nil {
		class := (*CellAccessibleClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapCellAccessible(obj *coreglib.Object) *CellAccessible {
	return &CellAccessible{
		Accessible: Accessible{
			AtkObject: atk.AtkObject{
				Object: obj,
			},
		},
		Object: obj,
		Action: atk.Action{
			Object: obj,
		},
		AtkObject: atk.AtkObject{
			Object: obj,
		},
		Component: atk.Component{
			Object: obj,
		},
		TableCell: atk.TableCell{
			AtkObject: atk.AtkObject{
				Object: obj,
			},
		},
	}
}

func marshalCellAccessible(p uintptr) (interface{}, error) {
	return wrapCellAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// CellAccessibleClass: instance of this type is always passed by reference.
type CellAccessibleClass struct {
	*cellAccessibleClass
}

// cellAccessibleClass is the struct that's finalized.
type cellAccessibleClass struct {
	native unsafe.Pointer
}

var GIRInfoCellAccessibleClass = girepository.MustFind("Gtk", "CellAccessibleClass")
