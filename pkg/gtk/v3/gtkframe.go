// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeFrame = coreglib.Type(girepository.MustFind("Gtk", "Frame").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeFrame, F: marshalFrame},
	})
}

// FrameOverrides contains methods that are overridable.
type FrameOverrides struct {
}

func defaultFrameOverrides(v *Frame) FrameOverrides {
	return FrameOverrides{}
}

// Frame: frame widget is a bin that surrounds its child with a decorative frame
// and an optional label. If present, the label is drawn in a gap in the top
// side of the frame. The position of the label can be controlled with
// gtk_frame_set_label_align().
//
//
// GtkFrame as GtkBuildable
//
// The GtkFrame implementation of the GtkBuildable interface supports placing a
// child in the label position by specifying “label” as the “type” attribute of
// a <child> element. A normal content child can be specified without specifying
// a <child> type attribute.
//
// An example of a UI definition fragment with GtkFrame:
//
//    <object class="GtkFrame">
//      <child type="label">
//        <object class="GtkLabel" id="frame-label"/>
//      </child>
//      <child>
//        <object class="GtkEntry" id="frame-content"/>
//      </child>
//    </object>
//
// CSS nodes
//
//    frame
//    ├── border[.flat]
//    ├── <label widget>
//    ╰── <child>
//
// GtkFrame has a main CSS node named “frame” and a subnode named “border”. The
// “border” node is used to draw the visible border. You can set the appearance
// of the border using CSS properties like “border-style” on the “border” node.
//
// The border node can be given the style class “.flat”, which is used by themes
// to disable drawing of the border. To do this from code, call
// gtk_frame_set_shadow_type() with GTK_SHADOW_NONE to add the “.flat” class or
// any other shadow type to remove it.
type Frame struct {
	_ [0]func() // equal guard
	Bin
}

var (
	_ Binner = (*Frame)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*Frame, *FrameClass, FrameOverrides](
		GTypeFrame,
		initFrameClass,
		wrapFrame,
		defaultFrameOverrides,
	)
}

func initFrameClass(gclass unsafe.Pointer, overrides FrameOverrides, classInitFunc func(*FrameClass)) {
	if classInitFunc != nil {
		class := (*FrameClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapFrame(obj *coreglib.Object) *Frame {
	return &Frame{
		Bin: Bin{
			Container: Container{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalFrame(p uintptr) (interface{}, error) {
	return wrapFrame(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// FrameClass: instance of this type is always passed by reference.
type FrameClass struct {
	*frameClass
}

// frameClass is the struct that's finalized.
type frameClass struct {
	native unsafe.Pointer
}

var GIRInfoFrameClass = girepository.MustFind("Gtk", "FrameClass")
