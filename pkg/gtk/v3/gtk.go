// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"fmt"
	_ "runtime/cgo"
	"strings"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeMovementStep        = coreglib.Type(girepository.MustFind("Gtk", "MovementStep").RegisteredGType())
	GTypeNotebookTab         = coreglib.Type(girepository.MustFind("Gtk", "NotebookTab").RegisteredGType())
	GTypeResizeMode          = coreglib.Type(girepository.MustFind("Gtk", "ResizeMode").RegisteredGType())
	GTypeScrollStep          = coreglib.Type(girepository.MustFind("Gtk", "ScrollStep").RegisteredGType())
	GTypeDebugFlag           = coreglib.Type(girepository.MustFind("Gtk", "DebugFlag").RegisteredGType())
	GTypeEntryIconAccessible = coreglib.Type(girepository.MustFind("Gtk", "EntryIconAccessible").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeMovementStep, F: marshalMovementStep},
		coreglib.TypeMarshaler{T: GTypeNotebookTab, F: marshalNotebookTab},
		coreglib.TypeMarshaler{T: GTypeResizeMode, F: marshalResizeMode},
		coreglib.TypeMarshaler{T: GTypeScrollStep, F: marshalScrollStep},
		coreglib.TypeMarshaler{T: GTypeDebugFlag, F: marshalDebugFlag},
		coreglib.TypeMarshaler{T: GTypeEntryIconAccessible, F: marshalEntryIconAccessible},
	})
}

func init() {
	girepository.Require("Gtk", "3.0", girepository.LoadFlagLazy)
}

type MovementStep C.gint

const (
	// MovementLogicalPositions: move forward or back by graphemes.
	MovementLogicalPositions MovementStep = iota
	// MovementVisualPositions: move left or right by graphemes.
	MovementVisualPositions
	// MovementWords: move forward or back by words.
	MovementWords
	// MovementDisplayLines: move up or down lines (wrapped lines).
	MovementDisplayLines
	// MovementDisplayLineEnds: move to either end of a line.
	MovementDisplayLineEnds
	// MovementParagraphs: move up or down paragraphs (newline-ended lines).
	MovementParagraphs
	// MovementParagraphEnds: move to either end of a paragraph.
	MovementParagraphEnds
	// MovementPages: move by pages.
	MovementPages
	// MovementBufferEnds: move to ends of the buffer.
	MovementBufferEnds
	// MovementHorizontalPages: move horizontally by pages.
	MovementHorizontalPages
)

func marshalMovementStep(p uintptr) (interface{}, error) {
	return MovementStep(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for MovementStep.
func (m MovementStep) String() string {
	switch m {
	case MovementLogicalPositions:
		return "LogicalPositions"
	case MovementVisualPositions:
		return "VisualPositions"
	case MovementWords:
		return "Words"
	case MovementDisplayLines:
		return "DisplayLines"
	case MovementDisplayLineEnds:
		return "DisplayLineEnds"
	case MovementParagraphs:
		return "Paragraphs"
	case MovementParagraphEnds:
		return "ParagraphEnds"
	case MovementPages:
		return "Pages"
	case MovementBufferEnds:
		return "BufferEnds"
	case MovementHorizontalPages:
		return "HorizontalPages"
	default:
		return fmt.Sprintf("MovementStep(%d)", m)
	}
}

type NotebookTab C.gint

const (
	NotebookTabFirst NotebookTab = iota
	NotebookTabLast
)

func marshalNotebookTab(p uintptr) (interface{}, error) {
	return NotebookTab(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for NotebookTab.
func (n NotebookTab) String() string {
	switch n {
	case NotebookTabFirst:
		return "First"
	case NotebookTabLast:
		return "Last"
	default:
		return fmt.Sprintf("NotebookTab(%d)", n)
	}
}

type ResizeMode C.gint

const (
	// ResizeParent pass resize request to the parent.
	ResizeParent ResizeMode = iota
	// ResizeQueue: queue resizes on this widget.
	ResizeQueue
	// ResizeImmediate: resize immediately. Deprecated.
	ResizeImmediate
)

func marshalResizeMode(p uintptr) (interface{}, error) {
	return ResizeMode(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for ResizeMode.
func (r ResizeMode) String() string {
	switch r {
	case ResizeParent:
		return "Parent"
	case ResizeQueue:
		return "Queue"
	case ResizeImmediate:
		return "Immediate"
	default:
		return fmt.Sprintf("ResizeMode(%d)", r)
	}
}

type ScrollStep C.gint

const (
	// ScrollSteps: scroll in steps.
	ScrollSteps ScrollStep = iota
	// ScrollPages: scroll by pages.
	ScrollPages
	// ScrollEnds: scroll to ends.
	ScrollEnds
	// ScrollHorizontalSteps: scroll in horizontal steps.
	ScrollHorizontalSteps
	// ScrollHorizontalPages: scroll by horizontal pages.
	ScrollHorizontalPages
	// ScrollHorizontalEnds: scroll to the horizontal ends.
	ScrollHorizontalEnds
)

func marshalScrollStep(p uintptr) (interface{}, error) {
	return ScrollStep(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for ScrollStep.
func (s ScrollStep) String() string {
	switch s {
	case ScrollSteps:
		return "Steps"
	case ScrollPages:
		return "Pages"
	case ScrollEnds:
		return "Ends"
	case ScrollHorizontalSteps:
		return "HorizontalSteps"
	case ScrollHorizontalPages:
		return "HorizontalPages"
	case ScrollHorizontalEnds:
		return "HorizontalEnds"
	default:
		return fmt.Sprintf("ScrollStep(%d)", s)
	}
}

type DebugFlag C.guint

const (
	DebugMisc         DebugFlag = 0b1
	DebugPlugsocket   DebugFlag = 0b10
	DebugText         DebugFlag = 0b100
	DebugTree         DebugFlag = 0b1000
	DebugUpdates      DebugFlag = 0b10000
	DebugKeybindings  DebugFlag = 0b100000
	DebugMultihead    DebugFlag = 0b1000000
	DebugModules      DebugFlag = 0b10000000
	DebugGeometry     DebugFlag = 0b100000000
	DebugIcontheme    DebugFlag = 0b1000000000
	DebugPrinting     DebugFlag = 0b10000000000
	DebugBuilder      DebugFlag = 0b100000000000
	DebugSizeRequest  DebugFlag = 0b1000000000000
	DebugNoCSSCache   DebugFlag = 0b10000000000000
	DebugBaselines    DebugFlag = 0b100000000000000
	DebugPixelCache   DebugFlag = 0b1000000000000000
	DebugNoPixelCache DebugFlag = 0b10000000000000000
	DebugInteractive  DebugFlag = 0b100000000000000000
	DebugTouchscreen  DebugFlag = 0b1000000000000000000
	DebugActions      DebugFlag = 0b10000000000000000000
	DebugResize       DebugFlag = 0b100000000000000000000
	DebugLayout       DebugFlag = 0b1000000000000000000000
)

func marshalDebugFlag(p uintptr) (interface{}, error) {
	return DebugFlag(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for DebugFlag.
func (d DebugFlag) String() string {
	if d == 0 {
		return "DebugFlag(0)"
	}

	var builder strings.Builder
	builder.Grow(256)

	for d != 0 {
		next := d & (d - 1)
		bit := d - next

		switch bit {
		case DebugMisc:
			builder.WriteString("Misc|")
		case DebugPlugsocket:
			builder.WriteString("Plugsocket|")
		case DebugText:
			builder.WriteString("Text|")
		case DebugTree:
			builder.WriteString("Tree|")
		case DebugUpdates:
			builder.WriteString("Updates|")
		case DebugKeybindings:
			builder.WriteString("Keybindings|")
		case DebugMultihead:
			builder.WriteString("Multihead|")
		case DebugModules:
			builder.WriteString("Modules|")
		case DebugGeometry:
			builder.WriteString("Geometry|")
		case DebugIcontheme:
			builder.WriteString("Icontheme|")
		case DebugPrinting:
			builder.WriteString("Printing|")
		case DebugBuilder:
			builder.WriteString("Builder|")
		case DebugSizeRequest:
			builder.WriteString("SizeRequest|")
		case DebugNoCSSCache:
			builder.WriteString("NoCSSCache|")
		case DebugBaselines:
			builder.WriteString("Baselines|")
		case DebugPixelCache:
			builder.WriteString("PixelCache|")
		case DebugNoPixelCache:
			builder.WriteString("NoPixelCache|")
		case DebugInteractive:
			builder.WriteString("Interactive|")
		case DebugTouchscreen:
			builder.WriteString("Touchscreen|")
		case DebugActions:
			builder.WriteString("Actions|")
		case DebugResize:
			builder.WriteString("Resize|")
		case DebugLayout:
			builder.WriteString("Layout|")
		default:
			builder.WriteString(fmt.Sprintf("DebugFlag(0b%b)|", bit))
		}

		d = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if d contains other.
func (d DebugFlag) Has(other DebugFlag) bool {
	return (d & other) == other
}

type EntryIconAccessible struct {
	_ [0]func() // equal guard
	atk.AtkObject

	*coreglib.Object
	atk.Action
	atk.Component
}

var (
	_ coreglib.Objector = (*EntryIconAccessible)(nil)
)

func wrapEntryIconAccessible(obj *coreglib.Object) *EntryIconAccessible {
	return &EntryIconAccessible{
		AtkObject: atk.AtkObject{
			Object: obj,
		},
		Object: obj,
		Action: atk.Action{
			Object: obj,
		},
		Component: atk.Component{
			Object: obj,
		},
	}
}

func marshalEntryIconAccessible(p uintptr) (interface{}, error) {
	return wrapEntryIconAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Init binds to the gtk_init() function. Argument parsing is not
// supported.
func Init() {
	C.gtk_init(nil, nil)
}
