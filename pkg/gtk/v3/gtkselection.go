// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"fmt"
	"strings"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeTargetFlags = coreglib.Type(girepository.MustFind("Gtk", "TargetFlags").RegisteredGType())
	GTypeTargetEntry = coreglib.Type(girepository.MustFind("Gtk", "TargetEntry").RegisteredGType())
	GTypeTargetList  = coreglib.Type(girepository.MustFind("Gtk", "TargetList").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeTargetFlags, F: marshalTargetFlags},
		coreglib.TypeMarshaler{T: GTypeTargetEntry, F: marshalTargetEntry},
		coreglib.TypeMarshaler{T: GTypeTargetList, F: marshalTargetList},
	})
}

// TargetFlags enumeration is used to specify constraints on a TargetEntry.
type TargetFlags C.guint

const (
	// TargetSameApp: if this is set, the target will only be selected for drags
	// within a single application.
	TargetSameApp TargetFlags = 0b1
	// TargetSameWidget: if this is set, the target will only be selected for
	// drags within a single widget.
	TargetSameWidget TargetFlags = 0b10
	// TargetOtherApp: if this is set, the target will not be selected for drags
	// within a single application.
	TargetOtherApp TargetFlags = 0b100
	// TargetOtherWidget: if this is set, the target will not be selected for
	// drags withing a single widget.
	TargetOtherWidget TargetFlags = 0b1000
)

func marshalTargetFlags(p uintptr) (interface{}, error) {
	return TargetFlags(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for TargetFlags.
func (t TargetFlags) String() string {
	if t == 0 {
		return "TargetFlags(0)"
	}

	var builder strings.Builder
	builder.Grow(63)

	for t != 0 {
		next := t & (t - 1)
		bit := t - next

		switch bit {
		case TargetSameApp:
			builder.WriteString("SameApp|")
		case TargetSameWidget:
			builder.WriteString("SameWidget|")
		case TargetOtherApp:
			builder.WriteString("OtherApp|")
		case TargetOtherWidget:
			builder.WriteString("OtherWidget|")
		default:
			builder.WriteString(fmt.Sprintf("TargetFlags(0b%b)|", bit))
		}

		t = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if t contains other.
func (t TargetFlags) Has(other TargetFlags) bool {
	return (t & other) == other
}

// TargetEntry represents a single type of data than can be supplied for by a
// widget for a selection or for supplied or received during drag-and-drop.
//
// An instance of this type is always passed by reference.
type TargetEntry struct {
	*targetEntry
}

// targetEntry is the struct that's finalized.
type targetEntry struct {
	native unsafe.Pointer
}

var GIRInfoTargetEntry = girepository.MustFind("Gtk", "TargetEntry")

func marshalTargetEntry(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &TargetEntry{&targetEntry{(unsafe.Pointer)(b)}}, nil
}

// Target: string representation of the target type.
func (t *TargetEntry) Target() string {
	offset := GIRInfoTargetEntry.StructFieldOffset("target")
	valptr := (*string)(unsafe.Add(t.native, offset))
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// Flags for DND.
func (t *TargetEntry) Flags() uint {
	offset := GIRInfoTargetEntry.StructFieldOffset("flags")
	valptr := (*uint)(unsafe.Add(t.native, offset))
	var _v uint // out
	_v = uint(*valptr)
	return _v
}

// Info: application-assigned integer ID which will get passed as a parameter to
// e.g the Widget::selection-get signal. It allows the application to identify
// the target type without extensive string compares.
func (t *TargetEntry) Info() uint {
	offset := GIRInfoTargetEntry.StructFieldOffset("info")
	valptr := (*uint)(unsafe.Add(t.native, offset))
	var _v uint // out
	_v = uint(*valptr)
	return _v
}

// Flags for DND.
func (t *TargetEntry) SetFlags(flags uint) {
	offset := GIRInfoTargetEntry.StructFieldOffset("flags")
	valptr := (*C.guint)(unsafe.Add(t.native, offset))
	*valptr = C.guint(flags)
}

// Info: application-assigned integer ID which will get passed as a parameter to
// e.g the Widget::selection-get signal. It allows the application to identify
// the target type without extensive string compares.
func (t *TargetEntry) SetInfo(info uint) {
	offset := GIRInfoTargetEntry.StructFieldOffset("info")
	valptr := (*C.guint)(unsafe.Add(t.native, offset))
	*valptr = C.guint(info)
}

// TargetList is a reference counted list of TargetPair and should be treated as
// opaque.
//
// An instance of this type is always passed by reference.
type TargetList struct {
	*targetList
}

// targetList is the struct that's finalized.
type targetList struct {
	native unsafe.Pointer
}

var GIRInfoTargetList = girepository.MustFind("Gtk", "TargetList")

func marshalTargetList(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &TargetList{&targetList{(unsafe.Pointer)(b)}}, nil
}

// TargetPair is used to represent the same information as a table of
// TargetEntry, but in an efficient form.
//
// An instance of this type is always passed by reference.
type TargetPair struct {
	*targetPair
}

// targetPair is the struct that's finalized.
type targetPair struct {
	native unsafe.Pointer
}

var GIRInfoTargetPair = girepository.MustFind("Gtk", "TargetPair")
