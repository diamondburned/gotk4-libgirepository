// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gtk3_ToolButton_ConnectClicked(gpointer, guintptr);
import "C"

// GType values.
var (
	GTypeToolButton = coreglib.Type(girepository.MustFind("Gtk", "ToolButton").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeToolButton, F: marshalToolButton},
	})
}

// ToolButtonOverrides contains methods that are overridable.
type ToolButtonOverrides struct {
}

func defaultToolButtonOverrides(v *ToolButton) ToolButtonOverrides {
	return ToolButtonOverrides{}
}

// ToolButton are ToolItems containing buttons.
//
// Use gtk_tool_button_new() to create a new ToolButton.
//
// The label of a ToolButton is determined by the properties
// ToolButton:label-widget, ToolButton:label, and ToolButton:stock-id. If
// ToolButton:label-widget is non-NULL, then that widget is used as the label.
// Otherwise, if ToolButton:label is non-NULL, that string is used as the label.
// Otherwise, if ToolButton:stock-id is non-NULL, the label is determined by the
// stock item. Otherwise, the button does not have a label.
//
// The icon of a ToolButton is determined by the properties
// ToolButton:icon-widget and ToolButton:stock-id. If ToolButton:icon-widget is
// non-NULL, then that widget is used as the icon. Otherwise, if
// ToolButton:stock-id is non-NULL, the icon is determined by the stock item.
// Otherwise, the button does not have a icon.
//
//
// CSS nodes
//
// GtkToolButton has a single CSS node with name toolbutton.
type ToolButton struct {
	_ [0]func() // equal guard
	ToolItem

	*coreglib.Object
	Actionable
}

var (
	_ coreglib.Objector = (*ToolButton)(nil)
	_ Binner            = (*ToolButton)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*ToolButton, *ToolButtonClass, ToolButtonOverrides](
		GTypeToolButton,
		initToolButtonClass,
		wrapToolButton,
		defaultToolButtonOverrides,
	)
}

func initToolButtonClass(gclass unsafe.Pointer, overrides ToolButtonOverrides, classInitFunc func(*ToolButtonClass)) {
	if classInitFunc != nil {
		class := (*ToolButtonClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapToolButton(obj *coreglib.Object) *ToolButton {
	return &ToolButton{
		ToolItem: ToolItem{
			Bin: Bin{
				Container: Container{
					Widget: Widget{
						InitiallyUnowned: coreglib.InitiallyUnowned{
							Object: obj,
						},
						Object: obj,
						ImplementorIface: atk.ImplementorIface{
							Object: obj,
						},
						Buildable: Buildable{
							Object: obj,
						},
					},
				},
			},
			Object: obj,
			Activatable: Activatable{
				Object: obj,
			},
		},
		Object: obj,
		Actionable: Actionable{
			Widget: Widget{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				ImplementorIface: atk.ImplementorIface{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
			},
		},
	}
}

func marshalToolButton(p uintptr) (interface{}, error) {
	return wrapToolButton(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectClicked: this signal is emitted when the tool button is clicked with
// the mouse or activated with the keyboard.
func (v *ToolButton) ConnectClicked(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "clicked", false, unsafe.Pointer(C._gotk4_gtk3_ToolButton_ConnectClicked), f)
}

// ToolButtonClass: instance of this type is always passed by reference.
type ToolButtonClass struct {
	*toolButtonClass
}

// toolButtonClass is the struct that's finalized.
type toolButtonClass struct {
	native unsafe.Pointer
}

var GIRInfoToolButtonClass = girepository.MustFind("Gtk", "ToolButtonClass")
