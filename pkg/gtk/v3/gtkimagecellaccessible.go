// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeImageCellAccessible = coreglib.Type(girepository.MustFind("Gtk", "ImageCellAccessible").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeImageCellAccessible, F: marshalImageCellAccessible},
	})
}

// ImageCellAccessibleOverrides contains methods that are overridable.
type ImageCellAccessibleOverrides struct {
}

func defaultImageCellAccessibleOverrides(v *ImageCellAccessible) ImageCellAccessibleOverrides {
	return ImageCellAccessibleOverrides{}
}

type ImageCellAccessible struct {
	_ [0]func() // equal guard
	RendererCellAccessible

	*coreglib.Object
	atk.AtkObject
	atk.Image
}

var (
	_ coreglib.Objector = (*ImageCellAccessible)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*ImageCellAccessible, *ImageCellAccessibleClass, ImageCellAccessibleOverrides](
		GTypeImageCellAccessible,
		initImageCellAccessibleClass,
		wrapImageCellAccessible,
		defaultImageCellAccessibleOverrides,
	)
}

func initImageCellAccessibleClass(gclass unsafe.Pointer, overrides ImageCellAccessibleOverrides, classInitFunc func(*ImageCellAccessibleClass)) {
	if classInitFunc != nil {
		class := (*ImageCellAccessibleClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapImageCellAccessible(obj *coreglib.Object) *ImageCellAccessible {
	return &ImageCellAccessible{
		RendererCellAccessible: RendererCellAccessible{
			CellAccessible: CellAccessible{
				Accessible: Accessible{
					AtkObject: atk.AtkObject{
						Object: obj,
					},
				},
				Object: obj,
				Action: atk.Action{
					Object: obj,
				},
				AtkObject: atk.AtkObject{
					Object: obj,
				},
				Component: atk.Component{
					Object: obj,
				},
				TableCell: atk.TableCell{
					AtkObject: atk.AtkObject{
						Object: obj,
					},
				},
			},
		},
		Object: obj,
		AtkObject: atk.AtkObject{
			Object: obj,
		},
		Image: atk.Image{
			Object: obj,
		},
	}
}

func marshalImageCellAccessible(p uintptr) (interface{}, error) {
	return wrapImageCellAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ImageCellAccessibleClass: instance of this type is always passed by
// reference.
type ImageCellAccessibleClass struct {
	*imageCellAccessibleClass
}

// imageCellAccessibleClass is the struct that's finalized.
type imageCellAccessibleClass struct {
	native unsafe.Pointer
}

var GIRInfoImageCellAccessibleClass = girepository.MustFind("Gtk", "ImageCellAccessibleClass")
