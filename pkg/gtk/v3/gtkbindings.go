// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// BindingArg holds the data associated with an argument for a key binding
// signal emission as stored in BindingSignal.
//
// An instance of this type is always passed by reference.
type BindingArg struct {
	*bindingArg
}

// bindingArg is the struct that's finalized.
type bindingArg struct {
	native unsafe.Pointer
}

var GIRInfoBindingArg = girepository.MustFind("Gtk", "BindingArg")

// ArgType: implementation detail.
func (b *BindingArg) ArgType() coreglib.Type {
	offset := GIRInfoBindingArg.StructFieldOffset("arg_type")
	valptr := (*coreglib.Type)(unsafe.Add(b.native, offset))
	var _v coreglib.Type // out
	_v = coreglib.Type(*valptr)
	return _v
}

// BindingEntry: each key binding element of a binding sets binding list is
// represented by a GtkBindingEntry.
//
// An instance of this type is always passed by reference.
type BindingEntry struct {
	*bindingEntry
}

// bindingEntry is the struct that's finalized.
type bindingEntry struct {
	native unsafe.Pointer
}

var GIRInfoBindingEntry = girepository.MustFind("Gtk", "BindingEntry")

// BindingSet: binding set maintains a list of activatable key bindings. A
// single binding set can match multiple types of widgets. Similar to style
// contexts, can be matched by any information contained in a widgets
// WidgetPath. When a binding within a set is matched upon activation, an action
// signal is emitted on the target widget to carry out the actual activation.
//
// An instance of this type is always passed by reference.
type BindingSet struct {
	*bindingSet
}

// bindingSet is the struct that's finalized.
type bindingSet struct {
	native unsafe.Pointer
}

var GIRInfoBindingSet = girepository.MustFind("Gtk", "BindingSet")

// SetName: unique name of this binding set.
func (b *BindingSet) SetName() string {
	offset := GIRInfoBindingSet.StructFieldOffset("set_name")
	valptr := (*string)(unsafe.Add(b.native, offset))
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// Priority: unused.
func (b *BindingSet) Priority() int {
	offset := GIRInfoBindingSet.StructFieldOffset("priority")
	valptr := (*int)(unsafe.Add(b.native, offset))
	var _v int // out
	_v = int(*valptr)
	return _v
}

// Entries: key binding entries in this binding set.
func (b *BindingSet) Entries() *BindingEntry {
	offset := GIRInfoBindingSet.StructFieldOffset("entries")
	valptr := (**BindingEntry)(unsafe.Add(b.native, offset))
	var _v *BindingEntry // out
	_v = (*BindingEntry)(gextras.NewStructNative(unsafe.Pointer(*valptr)))
	return _v
}

// Current: implementation detail.
func (b *BindingSet) Current() *BindingEntry {
	offset := GIRInfoBindingSet.StructFieldOffset("current")
	valptr := (**BindingEntry)(unsafe.Add(b.native, offset))
	var _v *BindingEntry // out
	_v = (*BindingEntry)(gextras.NewStructNative(unsafe.Pointer(*valptr)))
	return _v
}

// Priority: unused.
func (b *BindingSet) SetPriority(priority int) {
	offset := GIRInfoBindingSet.StructFieldOffset("priority")
	valptr := (*C.gint)(unsafe.Add(b.native, offset))
	*valptr = C.gint(priority)
}

// BindingSignal stores the necessary information to activate a widget in
// response to a key press via a signal emission.
//
// An instance of this type is always passed by reference.
type BindingSignal struct {
	*bindingSignal
}

// bindingSignal is the struct that's finalized.
type bindingSignal struct {
	native unsafe.Pointer
}

var GIRInfoBindingSignal = girepository.MustFind("Gtk", "BindingSignal")
