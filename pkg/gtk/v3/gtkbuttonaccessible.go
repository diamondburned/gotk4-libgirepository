// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeButtonAccessible = coreglib.Type(girepository.MustFind("Gtk", "ButtonAccessible").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeButtonAccessible, F: marshalButtonAccessible},
	})
}

// ButtonAccessibleOverrides contains methods that are overridable.
type ButtonAccessibleOverrides struct {
}

func defaultButtonAccessibleOverrides(v *ButtonAccessible) ButtonAccessibleOverrides {
	return ButtonAccessibleOverrides{}
}

type ButtonAccessible struct {
	_ [0]func() // equal guard
	ContainerAccessible

	*coreglib.Object
	atk.Action
	atk.Image
}

var (
	_ coreglib.Objector = (*ButtonAccessible)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*ButtonAccessible, *ButtonAccessibleClass, ButtonAccessibleOverrides](
		GTypeButtonAccessible,
		initButtonAccessibleClass,
		wrapButtonAccessible,
		defaultButtonAccessibleOverrides,
	)
}

func initButtonAccessibleClass(gclass unsafe.Pointer, overrides ButtonAccessibleOverrides, classInitFunc func(*ButtonAccessibleClass)) {
	if classInitFunc != nil {
		class := (*ButtonAccessibleClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapButtonAccessible(obj *coreglib.Object) *ButtonAccessible {
	return &ButtonAccessible{
		ContainerAccessible: ContainerAccessible{
			WidgetAccessible: WidgetAccessible{
				Accessible: Accessible{
					AtkObject: atk.AtkObject{
						Object: obj,
					},
				},
				Component: atk.Component{
					Object: obj,
				},
			},
		},
		Object: obj,
		Action: atk.Action{
			Object: obj,
		},
		Image: atk.Image{
			Object: obj,
		},
	}
}

func marshalButtonAccessible(p uintptr) (interface{}, error) {
	return wrapButtonAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ButtonAccessibleClass: instance of this type is always passed by reference.
type ButtonAccessibleClass struct {
	*buttonAccessibleClass
}

// buttonAccessibleClass is the struct that's finalized.
type buttonAccessibleClass struct {
	native unsafe.Pointer
}

var GIRInfoButtonAccessibleClass = girepository.MustFind("Gtk", "ButtonAccessibleClass")
