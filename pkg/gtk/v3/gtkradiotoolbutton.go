// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeRadioToolButton = coreglib.Type(girepository.MustFind("Gtk", "RadioToolButton").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeRadioToolButton, F: marshalRadioToolButton},
	})
}

// RadioToolButtonOverrides contains methods that are overridable.
type RadioToolButtonOverrides struct {
}

func defaultRadioToolButtonOverrides(v *RadioToolButton) RadioToolButtonOverrides {
	return RadioToolButtonOverrides{}
}

// RadioToolButton is a ToolItem that contains a radio button, that is, a button
// that is part of a group of toggle buttons where only one button can be active
// at a time.
//
// Use gtk_radio_tool_button_new() to create a new GtkRadioToolButton. Use
// gtk_radio_tool_button_new_from_widget() to create a new GtkRadioToolButton
// that is part of the same group as an existing GtkRadioToolButton.
//
//
// CSS nodes
//
// GtkRadioToolButton has a single CSS node with name toolbutton.
type RadioToolButton struct {
	_ [0]func() // equal guard
	ToggleToolButton
}

var (
	_ coreglib.Objector = (*RadioToolButton)(nil)
	_ Binner            = (*RadioToolButton)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*RadioToolButton, *RadioToolButtonClass, RadioToolButtonOverrides](
		GTypeRadioToolButton,
		initRadioToolButtonClass,
		wrapRadioToolButton,
		defaultRadioToolButtonOverrides,
	)
}

func initRadioToolButtonClass(gclass unsafe.Pointer, overrides RadioToolButtonOverrides, classInitFunc func(*RadioToolButtonClass)) {
	if classInitFunc != nil {
		class := (*RadioToolButtonClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapRadioToolButton(obj *coreglib.Object) *RadioToolButton {
	return &RadioToolButton{
		ToggleToolButton: ToggleToolButton{
			ToolButton: ToolButton{
				ToolItem: ToolItem{
					Bin: Bin{
						Container: Container{
							Widget: Widget{
								InitiallyUnowned: coreglib.InitiallyUnowned{
									Object: obj,
								},
								Object: obj,
								ImplementorIface: atk.ImplementorIface{
									Object: obj,
								},
								Buildable: Buildable{
									Object: obj,
								},
							},
						},
					},
					Object: obj,
					Activatable: Activatable{
						Object: obj,
					},
				},
				Object: obj,
				Actionable: Actionable{
					Widget: Widget{
						InitiallyUnowned: coreglib.InitiallyUnowned{
							Object: obj,
						},
						Object: obj,
						ImplementorIface: atk.ImplementorIface{
							Object: obj,
						},
						Buildable: Buildable{
							Object: obj,
						},
					},
				},
			},
		},
	}
}

func marshalRadioToolButton(p uintptr) (interface{}, error) {
	return wrapRadioToolButton(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// RadioToolButtonClass: instance of this type is always passed by reference.
type RadioToolButtonClass struct {
	*radioToolButtonClass
}

// radioToolButtonClass is the struct that's finalized.
type radioToolButtonClass struct {
	native unsafe.Pointer
}

var GIRInfoRadioToolButtonClass = girepository.MustFind("Gtk", "RadioToolButtonClass")
