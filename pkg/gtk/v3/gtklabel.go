// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gtk3_Label_ConnectPopulatePopup(gpointer, void*, guintptr);
// extern void _gotk4_gtk3_Label_ConnectCopyClipboard(gpointer, guintptr);
// extern void _gotk4_gtk3_Label_ConnectActivateCurrentLink(gpointer, guintptr);
// extern gboolean _gotk4_gtk3_Label_ConnectActivateLink(gpointer, gchar*, guintptr);
import "C"

// GType values.
var (
	GTypeLabel = coreglib.Type(girepository.MustFind("Gtk", "Label").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeLabel, F: marshalLabel},
	})
}

// LabelOverrides contains methods that are overridable.
type LabelOverrides struct {
}

func defaultLabelOverrides(v *Label) LabelOverrides {
	return LabelOverrides{}
}

// Label widget displays a small amount of text. As the name implies, most
// labels are used to label another widget such as a Button, a MenuItem, or a
// ComboBox.
//
// CSS nodes
//
//    const gchar *text =
//    "Go to the"
//    "<a href=\"http://www.gtk.org title=\"&lt;i&gt;Our&lt;/i&gt; website\">"
//    "GTK+ website</a> for more...";
//    GtkWidget *label = gtk_label_new (NULL);
//    gtk_label_set_markup (GTK_LABEL (label), text);
//
// It is possible to implement custom handling for links and their tooltips with
// the Label::activate-link signal and the gtk_label_get_current_uri() function.
type Label struct {
	_ [0]func() // equal guard
	Misc
}

var (
	_ Miscer = (*Label)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*Label, *LabelClass, LabelOverrides](
		GTypeLabel,
		initLabelClass,
		wrapLabel,
		defaultLabelOverrides,
	)
}

func initLabelClass(gclass unsafe.Pointer, overrides LabelOverrides, classInitFunc func(*LabelClass)) {
	if classInitFunc != nil {
		class := (*LabelClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapLabel(obj *coreglib.Object) *Label {
	return &Label{
		Misc: Misc{
			Widget: Widget{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				ImplementorIface: atk.ImplementorIface{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
			},
		},
	}
}

func marshalLabel(p uintptr) (interface{}, error) {
	return wrapLabel(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectActivateCurrentLink: [keybinding signal][GtkBindingSignal] which gets
// emitted when the user activates a link in the label.
//
// Applications may also emit the signal with g_signal_emit_by_name() if they
// need to control activation of URIs programmatically.
//
// The default bindings for this signal are all forms of the Enter key.
func (v *Label) ConnectActivateCurrentLink(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "activate-current-link", false, unsafe.Pointer(C._gotk4_gtk3_Label_ConnectActivateCurrentLink), f)
}

// ConnectActivateLink: signal which gets emitted to activate a URI.
// Applications may connect to it to override the default behaviour, which is to
// call gtk_show_uri_on_window().
func (v *Label) ConnectActivateLink(f func(uri string) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "activate-link", false, unsafe.Pointer(C._gotk4_gtk3_Label_ConnectActivateLink), f)
}

// ConnectCopyClipboard signal is a [keybinding signal][GtkBindingSignal] which
// gets emitted to copy the selection to the clipboard.
//
// The default binding for this signal is Ctrl-c.
func (v *Label) ConnectCopyClipboard(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "copy-clipboard", false, unsafe.Pointer(C._gotk4_gtk3_Label_ConnectCopyClipboard), f)
}

// ConnectPopulatePopup signal gets emitted before showing the context menu of
// the label. Note that only selectable labels have context menus.
//
// If you need to add items to the context menu, connect to this signal and
// append your menuitems to the menu.
func (v *Label) ConnectPopulatePopup(f func(menu *Menu)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "populate-popup", false, unsafe.Pointer(C._gotk4_gtk3_Label_ConnectPopulatePopup), f)
}

// LabelClass: instance of this type is always passed by reference.
type LabelClass struct {
	*labelClass
}

// labelClass is the struct that's finalized.
type labelClass struct {
	native unsafe.Pointer
}

var GIRInfoLabelClass = girepository.MustFind("Gtk", "LabelClass")
