// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gtk3_FileChooserButton_ConnectFileSet(gpointer, guintptr);
import "C"

// GType values.
var (
	GTypeFileChooserButton = coreglib.Type(girepository.MustFind("Gtk", "FileChooserButton").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeFileChooserButton, F: marshalFileChooserButton},
	})
}

// FileChooserButtonOverrides contains methods that are overridable.
type FileChooserButtonOverrides struct {
}

func defaultFileChooserButtonOverrides(v *FileChooserButton) FileChooserButtonOverrides {
	return FileChooserButtonOverrides{}
}

// FileChooserButton is a widget that lets the user select a file. It implements
// the FileChooser interface. Visually, it is a file name with a button to bring
// up a FileChooserDialog. The user can then use that dialog to change the file
// associated with that button. This widget does not support setting the
// FileChooser:select-multiple property to TRUE.
//
// Create a button to let the user select a file in /etc
//
//    {
//      GtkWidget *button;
//
//      button = gtk_file_chooser_button_new (_("Select a file"),
//                                            GTK_FILE_CHOOSER_ACTION_OPEN);
//      gtk_file_chooser_set_current_folder (GTK_FILE_CHOOSER (button),
//                                           "/etc");
//    }
//
// The FileChooserButton supports the FileChooserActions
// GTK_FILE_CHOOSER_ACTION_OPEN and GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER.
//
// > The FileChooserButton will ellipsize the label, and will thus > request
// little horizontal space. To give the button more space, > you should call
// gtk_widget_get_preferred_size(), > gtk_file_chooser_button_set_width_chars(),
// or pack the button in > such a way that other interface elements give space
// to the > widget.
//
//
// CSS nodes
//
// GtkFileChooserButton has a CSS node with name “filechooserbutton”, containing
// a subnode for the internal button with name “button” and style class “.file”.
type FileChooserButton struct {
	_ [0]func() // equal guard
	Box

	*coreglib.Object
	FileChooser
}

var (
	_ coreglib.Objector = (*FileChooserButton)(nil)
	_ Containerer       = (*FileChooserButton)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*FileChooserButton, *FileChooserButtonClass, FileChooserButtonOverrides](
		GTypeFileChooserButton,
		initFileChooserButtonClass,
		wrapFileChooserButton,
		defaultFileChooserButtonOverrides,
	)
}

func initFileChooserButtonClass(gclass unsafe.Pointer, overrides FileChooserButtonOverrides, classInitFunc func(*FileChooserButtonClass)) {
	if classInitFunc != nil {
		class := (*FileChooserButtonClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapFileChooserButton(obj *coreglib.Object) *FileChooserButton {
	return &FileChooserButton{
		Box: Box{
			Container: Container{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
			Object: obj,
			Orientable: Orientable{
				Object: obj,
			},
		},
		Object: obj,
		FileChooser: FileChooser{
			Object: obj,
		},
	}
}

func marshalFileChooserButton(p uintptr) (interface{}, error) {
	return wrapFileChooserButton(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectFileSet signal is emitted when the user selects a file.
//
// Note that this signal is only emitted when the user changes the file.
func (v *FileChooserButton) ConnectFileSet(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "file-set", false, unsafe.Pointer(C._gotk4_gtk3_FileChooserButton_ConnectFileSet), f)
}

// FileChooserButtonClass: instance of this type is always passed by reference.
type FileChooserButtonClass struct {
	*fileChooserButtonClass
}

// fileChooserButtonClass is the struct that's finalized.
type fileChooserButtonClass struct {
	native unsafe.Pointer
}

var GIRInfoFileChooserButtonClass = girepository.MustFind("Gtk", "FileChooserButtonClass")
