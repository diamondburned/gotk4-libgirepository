// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeStyleProvider = coreglib.Type(girepository.MustFind("Gtk", "StyleProvider").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeStyleProvider, F: marshalStyleProvider},
	})
}

// STYLE_PROVIDER_PRIORITY_APPLICATION: priority that can be used when adding a
// StyleProvider for application-specific style information.
const STYLE_PROVIDER_PRIORITY_APPLICATION = 600

// STYLE_PROVIDER_PRIORITY_FALLBACK: priority used for default style information
// that is used in the absence of themes.
//
// Note that this is not very useful for providing default styling for custom
// style classes - themes are likely to override styling provided at this
// priority with catch-all * {...} rules.
const STYLE_PROVIDER_PRIORITY_FALLBACK = 1

// STYLE_PROVIDER_PRIORITY_SETTINGS: priority used for style information
// provided via Settings.
//
// This priority is higher than K_STYLE_PROVIDER_PRIORITY_THEME to let settings
// override themes.
const STYLE_PROVIDER_PRIORITY_SETTINGS = 400

// STYLE_PROVIDER_PRIORITY_THEME: priority used for style information provided
// by themes.
const STYLE_PROVIDER_PRIORITY_THEME = 200

// STYLE_PROVIDER_PRIORITY_USER: priority used for the style information from
// XDG_CONFIG_HOME/gtk-3.0/gtk.css.
//
// You should not use priorities higher than this, to give the user the last
// word.
const STYLE_PROVIDER_PRIORITY_USER = 800

// StyleProviderOverrider contains methods that are overridable.
type StyleProviderOverrider interface {
}

// StyleProvider is an interface used to provide style information to a
// StyleContext. See gtk_style_context_add_provider() and
// gtk_style_context_add_provider_for_screen().
//
// StyleProvider wraps an interface. This means the user can get the
// underlying type by calling Cast().
type StyleProvider struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*StyleProvider)(nil)
)

// StyleProviderer describes StyleProvider's interface methods.
type StyleProviderer interface {
	coreglib.Objector

	baseStyleProvider() *StyleProvider
}

var _ StyleProviderer = (*StyleProvider)(nil)

func ifaceInitStyleProviderer(gifacePtr, data C.gpointer) {
}

func wrapStyleProvider(obj *coreglib.Object) *StyleProvider {
	return &StyleProvider{
		Object: obj,
	}
}

func marshalStyleProvider(p uintptr) (interface{}, error) {
	return wrapStyleProvider(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *StyleProvider) baseStyleProvider() *StyleProvider {
	return v
}

// BaseStyleProvider returns the underlying base object.
func BaseStyleProvider(obj StyleProviderer) *StyleProvider {
	return obj.baseStyleProvider()
}

// StyleProviderIface: instance of this type is always passed by reference.
type StyleProviderIface struct {
	*styleProviderIface
}

// styleProviderIface is the struct that's finalized.
type styleProviderIface struct {
	native unsafe.Pointer
}

var GIRInfoStyleProviderIface = girepository.MustFind("Gtk", "StyleProviderIface")
