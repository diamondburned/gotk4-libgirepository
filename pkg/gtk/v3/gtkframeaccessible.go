// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeFrameAccessible = coreglib.Type(girepository.MustFind("Gtk", "FrameAccessible").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeFrameAccessible, F: marshalFrameAccessible},
	})
}

// FrameAccessibleOverrides contains methods that are overridable.
type FrameAccessibleOverrides struct {
}

func defaultFrameAccessibleOverrides(v *FrameAccessible) FrameAccessibleOverrides {
	return FrameAccessibleOverrides{}
}

type FrameAccessible struct {
	_ [0]func() // equal guard
	ContainerAccessible
}

var (
	_ coreglib.Objector = (*FrameAccessible)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*FrameAccessible, *FrameAccessibleClass, FrameAccessibleOverrides](
		GTypeFrameAccessible,
		initFrameAccessibleClass,
		wrapFrameAccessible,
		defaultFrameAccessibleOverrides,
	)
}

func initFrameAccessibleClass(gclass unsafe.Pointer, overrides FrameAccessibleOverrides, classInitFunc func(*FrameAccessibleClass)) {
	if classInitFunc != nil {
		class := (*FrameAccessibleClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapFrameAccessible(obj *coreglib.Object) *FrameAccessible {
	return &FrameAccessible{
		ContainerAccessible: ContainerAccessible{
			WidgetAccessible: WidgetAccessible{
				Accessible: Accessible{
					AtkObject: atk.AtkObject{
						Object: obj,
					},
				},
				Component: atk.Component{
					Object: obj,
				},
			},
		},
	}
}

func marshalFrameAccessible(p uintptr) (interface{}, error) {
	return wrapFrameAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// FrameAccessibleClass: instance of this type is always passed by reference.
type FrameAccessibleClass struct {
	*frameAccessibleClass
}

// frameAccessibleClass is the struct that's finalized.
type frameAccessibleClass struct {
	native unsafe.Pointer
}

var GIRInfoFrameAccessibleClass = girepository.MustFind("Gtk", "FrameAccessibleClass")
