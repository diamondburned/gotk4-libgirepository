// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeProgressBarAccessible = coreglib.Type(girepository.MustFind("Gtk", "ProgressBarAccessible").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeProgressBarAccessible, F: marshalProgressBarAccessible},
	})
}

// ProgressBarAccessibleOverrides contains methods that are overridable.
type ProgressBarAccessibleOverrides struct {
}

func defaultProgressBarAccessibleOverrides(v *ProgressBarAccessible) ProgressBarAccessibleOverrides {
	return ProgressBarAccessibleOverrides{}
}

type ProgressBarAccessible struct {
	_ [0]func() // equal guard
	WidgetAccessible

	atk.Value
}

var (
	_ coreglib.Objector = (*ProgressBarAccessible)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*ProgressBarAccessible, *ProgressBarAccessibleClass, ProgressBarAccessibleOverrides](
		GTypeProgressBarAccessible,
		initProgressBarAccessibleClass,
		wrapProgressBarAccessible,
		defaultProgressBarAccessibleOverrides,
	)
}

func initProgressBarAccessibleClass(gclass unsafe.Pointer, overrides ProgressBarAccessibleOverrides, classInitFunc func(*ProgressBarAccessibleClass)) {
	if classInitFunc != nil {
		class := (*ProgressBarAccessibleClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapProgressBarAccessible(obj *coreglib.Object) *ProgressBarAccessible {
	return &ProgressBarAccessible{
		WidgetAccessible: WidgetAccessible{
			Accessible: Accessible{
				AtkObject: atk.AtkObject{
					Object: obj,
				},
			},
			Component: atk.Component{
				Object: obj,
			},
		},
		Value: atk.Value{
			Object: obj,
		},
	}
}

func marshalProgressBarAccessible(p uintptr) (interface{}, error) {
	return wrapProgressBarAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ProgressBarAccessibleClass: instance of this type is always passed by
// reference.
type ProgressBarAccessibleClass struct {
	*progressBarAccessibleClass
}

// progressBarAccessibleClass is the struct that's finalized.
type progressBarAccessibleClass struct {
	native unsafe.Pointer
}

var GIRInfoProgressBarAccessibleClass = girepository.MustFind("Gtk", "ProgressBarAccessibleClass")
