// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeRadioMenuItemAccessible = coreglib.Type(girepository.MustFind("Gtk", "RadioMenuItemAccessible").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeRadioMenuItemAccessible, F: marshalRadioMenuItemAccessible},
	})
}

// RadioMenuItemAccessibleOverrides contains methods that are overridable.
type RadioMenuItemAccessibleOverrides struct {
}

func defaultRadioMenuItemAccessibleOverrides(v *RadioMenuItemAccessible) RadioMenuItemAccessibleOverrides {
	return RadioMenuItemAccessibleOverrides{}
}

type RadioMenuItemAccessible struct {
	_ [0]func() // equal guard
	CheckMenuItemAccessible
}

var (
	_ coreglib.Objector = (*RadioMenuItemAccessible)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*RadioMenuItemAccessible, *RadioMenuItemAccessibleClass, RadioMenuItemAccessibleOverrides](
		GTypeRadioMenuItemAccessible,
		initRadioMenuItemAccessibleClass,
		wrapRadioMenuItemAccessible,
		defaultRadioMenuItemAccessibleOverrides,
	)
}

func initRadioMenuItemAccessibleClass(gclass unsafe.Pointer, overrides RadioMenuItemAccessibleOverrides, classInitFunc func(*RadioMenuItemAccessibleClass)) {
	if classInitFunc != nil {
		class := (*RadioMenuItemAccessibleClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapRadioMenuItemAccessible(obj *coreglib.Object) *RadioMenuItemAccessible {
	return &RadioMenuItemAccessible{
		CheckMenuItemAccessible: CheckMenuItemAccessible{
			MenuItemAccessible: MenuItemAccessible{
				ContainerAccessible: ContainerAccessible{
					WidgetAccessible: WidgetAccessible{
						Accessible: Accessible{
							AtkObject: atk.AtkObject{
								Object: obj,
							},
						},
						Component: atk.Component{
							Object: obj,
						},
					},
				},
				Object: obj,
				Action: atk.Action{
					Object: obj,
				},
				Selection: atk.Selection{
					Object: obj,
				},
			},
		},
	}
}

func marshalRadioMenuItemAccessible(p uintptr) (interface{}, error) {
	return wrapRadioMenuItemAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// RadioMenuItemAccessibleClass: instance of this type is always passed by
// reference.
type RadioMenuItemAccessibleClass struct {
	*radioMenuItemAccessibleClass
}

// radioMenuItemAccessibleClass is the struct that's finalized.
type radioMenuItemAccessibleClass struct {
	native unsafe.Pointer
}

var GIRInfoRadioMenuItemAccessibleClass = girepository.MustFind("Gtk", "RadioMenuItemAccessibleClass")
