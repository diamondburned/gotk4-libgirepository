// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeComboBoxAccessible = coreglib.Type(girepository.MustFind("Gtk", "ComboBoxAccessible").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeComboBoxAccessible, F: marshalComboBoxAccessible},
	})
}

// ComboBoxAccessibleOverrides contains methods that are overridable.
type ComboBoxAccessibleOverrides struct {
}

func defaultComboBoxAccessibleOverrides(v *ComboBoxAccessible) ComboBoxAccessibleOverrides {
	return ComboBoxAccessibleOverrides{}
}

type ComboBoxAccessible struct {
	_ [0]func() // equal guard
	ContainerAccessible

	*coreglib.Object
	atk.Action
	atk.Selection
}

var (
	_ coreglib.Objector = (*ComboBoxAccessible)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*ComboBoxAccessible, *ComboBoxAccessibleClass, ComboBoxAccessibleOverrides](
		GTypeComboBoxAccessible,
		initComboBoxAccessibleClass,
		wrapComboBoxAccessible,
		defaultComboBoxAccessibleOverrides,
	)
}

func initComboBoxAccessibleClass(gclass unsafe.Pointer, overrides ComboBoxAccessibleOverrides, classInitFunc func(*ComboBoxAccessibleClass)) {
	if classInitFunc != nil {
		class := (*ComboBoxAccessibleClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapComboBoxAccessible(obj *coreglib.Object) *ComboBoxAccessible {
	return &ComboBoxAccessible{
		ContainerAccessible: ContainerAccessible{
			WidgetAccessible: WidgetAccessible{
				Accessible: Accessible{
					AtkObject: atk.AtkObject{
						Object: obj,
					},
				},
				Component: atk.Component{
					Object: obj,
				},
			},
		},
		Object: obj,
		Action: atk.Action{
			Object: obj,
		},
		Selection: atk.Selection{
			Object: obj,
		},
	}
}

func marshalComboBoxAccessible(p uintptr) (interface{}, error) {
	return wrapComboBoxAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ComboBoxAccessibleClass: instance of this type is always passed by reference.
type ComboBoxAccessibleClass struct {
	*comboBoxAccessibleClass
}

// comboBoxAccessibleClass is the struct that's finalized.
type comboBoxAccessibleClass struct {
	native unsafe.Pointer
}

var GIRInfoComboBoxAccessibleClass = girepository.MustFind("Gtk", "ComboBoxAccessibleClass")
