// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeHeaderBar = coreglib.Type(girepository.MustFind("Gtk", "HeaderBar").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeHeaderBar, F: marshalHeaderBar},
	})
}

// HeaderBarOverrides contains methods that are overridable.
type HeaderBarOverrides struct {
}

func defaultHeaderBarOverrides(v *HeaderBar) HeaderBarOverrides {
	return HeaderBarOverrides{}
}

// HeaderBar is similar to a horizontal Box. It allows children to be placed at
// the start or the end. In addition, it allows a title and subtitle to be
// displayed. The title will be centered with respect to the width of the box,
// even if the children at either side take up different amounts of space. The
// height of the titlebar will be set to provide sufficient space for the
// subtitle, even if none is currently set. If a subtitle is not needed, the
// space reservation can be turned off with gtk_header_bar_set_has_subtitle().
//
// GtkHeaderBar can add typical window frame controls, such as minimize,
// maximize and close buttons, or the window icon.
//
// For these reasons, GtkHeaderBar is the natural choice for use as the custom
// titlebar widget of a Window (see gtk_window_set_titlebar()), as it gives
// features typical of titlebars while allowing the addition of child widgets.
type HeaderBar struct {
	_ [0]func() // equal guard
	Container
}

var (
	_ Containerer = (*HeaderBar)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*HeaderBar, *HeaderBarClass, HeaderBarOverrides](
		GTypeHeaderBar,
		initHeaderBarClass,
		wrapHeaderBar,
		defaultHeaderBarOverrides,
	)
}

func initHeaderBarClass(gclass unsafe.Pointer, overrides HeaderBarOverrides, classInitFunc func(*HeaderBarClass)) {
	if classInitFunc != nil {
		class := (*HeaderBarClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapHeaderBar(obj *coreglib.Object) *HeaderBar {
	return &HeaderBar{
		Container: Container{
			Widget: Widget{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				ImplementorIface: atk.ImplementorIface{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
			},
		},
	}
}

func marshalHeaderBar(p uintptr) (interface{}, error) {
	return wrapHeaderBar(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// HeaderBarClass: instance of this type is always passed by reference.
type HeaderBarClass struct {
	*headerBarClass
}

// headerBarClass is the struct that's finalized.
type headerBarClass struct {
	native unsafe.Pointer
}

var GIRInfoHeaderBarClass = girepository.MustFind("Gtk", "HeaderBarClass")
