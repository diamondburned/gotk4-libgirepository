// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeRangeAccessible = coreglib.Type(girepository.MustFind("Gtk", "RangeAccessible").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeRangeAccessible, F: marshalRangeAccessible},
	})
}

// RangeAccessibleOverrides contains methods that are overridable.
type RangeAccessibleOverrides struct {
}

func defaultRangeAccessibleOverrides(v *RangeAccessible) RangeAccessibleOverrides {
	return RangeAccessibleOverrides{}
}

type RangeAccessible struct {
	_ [0]func() // equal guard
	WidgetAccessible

	atk.Value
}

var (
	_ coreglib.Objector = (*RangeAccessible)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*RangeAccessible, *RangeAccessibleClass, RangeAccessibleOverrides](
		GTypeRangeAccessible,
		initRangeAccessibleClass,
		wrapRangeAccessible,
		defaultRangeAccessibleOverrides,
	)
}

func initRangeAccessibleClass(gclass unsafe.Pointer, overrides RangeAccessibleOverrides, classInitFunc func(*RangeAccessibleClass)) {
	if classInitFunc != nil {
		class := (*RangeAccessibleClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapRangeAccessible(obj *coreglib.Object) *RangeAccessible {
	return &RangeAccessible{
		WidgetAccessible: WidgetAccessible{
			Accessible: Accessible{
				AtkObject: atk.AtkObject{
					Object: obj,
				},
			},
			Component: atk.Component{
				Object: obj,
			},
		},
		Value: atk.Value{
			Object: obj,
		},
	}
}

func marshalRangeAccessible(p uintptr) (interface{}, error) {
	return wrapRangeAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// RangeAccessibleClass: instance of this type is always passed by reference.
type RangeAccessibleClass struct {
	*rangeAccessibleClass
}

// rangeAccessibleClass is the struct that's finalized.
type rangeAccessibleClass struct {
	native unsafe.Pointer
}

var GIRInfoRangeAccessibleClass = girepository.MustFind("Gtk", "RangeAccessibleClass")
