// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"fmt"
	"strings"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeFileFilterFlags = coreglib.Type(girepository.MustFind("Gtk", "FileFilterFlags").RegisteredGType())
	GTypeFileFilter      = coreglib.Type(girepository.MustFind("Gtk", "FileFilter").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeFileFilterFlags, F: marshalFileFilterFlags},
		coreglib.TypeMarshaler{T: GTypeFileFilter, F: marshalFileFilter},
	})
}

// FileFilterFlags: these flags indicate what parts of a FileFilterInfo struct
// are filled or need to be filled.
type FileFilterFlags C.guint

const (
	// FileFilterFilename: filename of the file being tested.
	FileFilterFilename FileFilterFlags = 0b1
	// FileFilterURI: URI for the file being tested.
	FileFilterURI FileFilterFlags = 0b10
	// FileFilterDisplayName: string that will be used to display the file in
	// the file chooser.
	FileFilterDisplayName FileFilterFlags = 0b100
	// FileFilterMIMEType: mime type of the file.
	FileFilterMIMEType FileFilterFlags = 0b1000
)

func marshalFileFilterFlags(p uintptr) (interface{}, error) {
	return FileFilterFlags(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for FileFilterFlags.
func (f FileFilterFlags) String() string {
	if f == 0 {
		return "FileFilterFlags(0)"
	}

	var builder strings.Builder
	builder.Grow(73)

	for f != 0 {
		next := f & (f - 1)
		bit := f - next

		switch bit {
		case FileFilterFilename:
			builder.WriteString("Filename|")
		case FileFilterURI:
			builder.WriteString("URI|")
		case FileFilterDisplayName:
			builder.WriteString("DisplayName|")
		case FileFilterMIMEType:
			builder.WriteString("MIMEType|")
		default:
			builder.WriteString(fmt.Sprintf("FileFilterFlags(0b%b)|", bit))
		}

		f = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if f contains other.
func (f FileFilterFlags) Has(other FileFilterFlags) bool {
	return (f & other) == other
}

// FileFilterFunc: type of function that is used with custom filters, see
// gtk_file_filter_add_custom().
type FileFilterFunc func(filterInfo *FileFilterInfo) (ok bool)

// FileFilter can be used to restrict the files being shown in a FileChooser.
// Files can be filtered based on their name (with
// gtk_file_filter_add_pattern()), on their mime type (with
// gtk_file_filter_add_mime_type()), or by a custom filter function (with
// gtk_file_filter_add_custom()).
//
// Filtering by mime types handles aliasing and subclassing of mime types; e.g.
// a filter for text/plain also matches a file with mime type application/rtf,
// since application/rtf is a subclass of text/plain. Note that FileFilter
// allows wildcards for the subtype of a mime type, so you can e.g. filter for
// image/\*.
//
// Normally, filters are used by adding them to a FileChooser, see
// gtk_file_chooser_add_filter(), but it is also possible to manually use a
// filter on a file with gtk_file_filter_filter().
//
//
// GtkFileFilter as GtkBuildable
//
// The GtkFileFilter implementation of the GtkBuildable interface supports
// adding rules using the <mime-types>, <patterns> and <applications> elements
// and listing the rules within. Specifying a <mime-type> or <pattern> has the
// same effect as as calling gtk_file_filter_add_mime_type() or
// gtk_file_filter_add_pattern().
//
// An example of a UI definition fragment specifying GtkFileFilter rules:
//
//    <object class="GtkFileFilter">
//      <mime-types>
//        <mime-type>text/plain</mime-type>
//        <mime-type>image/ *</mime-type>
//      </mime-types>
//      <patterns>
//        <pattern>*.txt</pattern>
//        <pattern>*.png</pattern>
//      </patterns>
//    </object>.
type FileFilter struct {
	_ [0]func() // equal guard
	coreglib.InitiallyUnowned

	*coreglib.Object
	Buildable
}

var (
	_ coreglib.Objector = (*FileFilter)(nil)
)

func wrapFileFilter(obj *coreglib.Object) *FileFilter {
	return &FileFilter{
		InitiallyUnowned: coreglib.InitiallyUnowned{
			Object: obj,
		},
		Object: obj,
		Buildable: Buildable{
			Object: obj,
		},
	}
}

func marshalFileFilter(p uintptr) (interface{}, error) {
	return wrapFileFilter(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// FileFilterInfo is used to pass information about the tested file to
// gtk_file_filter_filter().
//
// An instance of this type is always passed by reference.
type FileFilterInfo struct {
	*fileFilterInfo
}

// fileFilterInfo is the struct that's finalized.
type fileFilterInfo struct {
	native unsafe.Pointer
}

var GIRInfoFileFilterInfo = girepository.MustFind("Gtk", "FileFilterInfo")
