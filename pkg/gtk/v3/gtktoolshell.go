// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeToolShell = coreglib.Type(girepository.MustFind("Gtk", "ToolShell").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeToolShell, F: marshalToolShell},
	})
}

// ToolShellOverrider contains methods that are overridable.
type ToolShellOverrider interface {
}

// ToolShell interface allows container widgets to provide additional
// information when embedding ToolItem widgets.
//
// ToolShell wraps an interface. This means the user can get the
// underlying type by calling Cast().
type ToolShell struct {
	_ [0]func() // equal guard
	Widget
}

var (
	_ Widgetter = (*ToolShell)(nil)
)

// ToolSheller describes ToolShell's interface methods.
type ToolSheller interface {
	coreglib.Objector

	baseToolShell() *ToolShell
}

var _ ToolSheller = (*ToolShell)(nil)

func ifaceInitToolSheller(gifacePtr, data C.gpointer) {
}

func wrapToolShell(obj *coreglib.Object) *ToolShell {
	return &ToolShell{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			ImplementorIface: atk.ImplementorIface{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
		},
	}
}

func marshalToolShell(p uintptr) (interface{}, error) {
	return wrapToolShell(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *ToolShell) baseToolShell() *ToolShell {
	return v
}

// BaseToolShell returns the underlying base object.
func BaseToolShell(obj ToolSheller) *ToolShell {
	return obj.baseToolShell()
}

// ToolShellIface: virtual function table for the ToolShell interface.
//
// An instance of this type is always passed by reference.
type ToolShellIface struct {
	*toolShellIface
}

// toolShellIface is the struct that's finalized.
type toolShellIface struct {
	native unsafe.Pointer
}

var GIRInfoToolShellIface = girepository.MustFind("Gtk", "ToolShellIface")
