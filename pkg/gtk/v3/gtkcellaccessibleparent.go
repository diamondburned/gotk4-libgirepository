// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeCellAccessibleParent = coreglib.Type(girepository.MustFind("Gtk", "CellAccessibleParent").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeCellAccessibleParent, F: marshalCellAccessibleParent},
	})
}

// CellAccessibleParentOverrider contains methods that are overridable.
type CellAccessibleParentOverrider interface {
}

//
// CellAccessibleParent wraps an interface. This means the user can get the
// underlying type by calling Cast().
type CellAccessibleParent struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*CellAccessibleParent)(nil)
)

// CellAccessibleParenter describes CellAccessibleParent's interface methods.
type CellAccessibleParenter interface {
	coreglib.Objector

	baseCellAccessibleParent() *CellAccessibleParent
}

var _ CellAccessibleParenter = (*CellAccessibleParent)(nil)

func ifaceInitCellAccessibleParenter(gifacePtr, data C.gpointer) {
}

func wrapCellAccessibleParent(obj *coreglib.Object) *CellAccessibleParent {
	return &CellAccessibleParent{
		Object: obj,
	}
}

func marshalCellAccessibleParent(p uintptr) (interface{}, error) {
	return wrapCellAccessibleParent(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *CellAccessibleParent) baseCellAccessibleParent() *CellAccessibleParent {
	return v
}

// BaseCellAccessibleParent returns the underlying base object.
func BaseCellAccessibleParent(obj CellAccessibleParenter) *CellAccessibleParent {
	return obj.baseCellAccessibleParent()
}

// CellAccessibleParentIface: instance of this type is always passed by
// reference.
type CellAccessibleParentIface struct {
	*cellAccessibleParentIface
}

// cellAccessibleParentIface is the struct that's finalized.
type cellAccessibleParentIface struct {
	native unsafe.Pointer
}

var GIRInfoCellAccessibleParentIface = girepository.MustFind("Gtk", "CellAccessibleParentIface")
