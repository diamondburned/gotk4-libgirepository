// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern gboolean _gotk4_gtk3_Paned_ConnectToggleHandleFocus(gpointer, guintptr);
// extern gboolean _gotk4_gtk3_Paned_ConnectCycleHandleFocus(gpointer, gboolean, guintptr);
// extern gboolean _gotk4_gtk3_Paned_ConnectCycleChildFocus(gpointer, gboolean, guintptr);
// extern gboolean _gotk4_gtk3_Paned_ConnectCancelPosition(gpointer, guintptr);
// extern gboolean _gotk4_gtk3_Paned_ConnectAcceptPosition(gpointer, guintptr);
import "C"

// GType values.
var (
	GTypePaned = coreglib.Type(girepository.MustFind("Gtk", "Paned").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypePaned, F: marshalPaned},
	})
}

// PanedOverrides contains methods that are overridable.
type PanedOverrides struct {
}

func defaultPanedOverrides(v *Paned) PanedOverrides {
	return PanedOverrides{}
}

// Paned has two panes, arranged either horizontally or vertically. The division
// between the two panes is adjustable by the user by dragging a handle.
//
// Child widgets are added to the panes of the widget with gtk_paned_pack1() and
// gtk_paned_pack2(). The division between the two children is set by default
// from the size requests of the children, but it can be adjusted by the user.
//
// A paned widget draws a separator between the two child widgets and a small
// handle that the user can drag to adjust the division. It does not draw any
// relief around the children or around the separator. (The space in which the
// separator is called the gutter.) Often, it is useful to put each child inside
// a Frame with the shadow type set to GTK_SHADOW_IN so that the gutter appears
// as a ridge. No separator is drawn if one of the children is missing.
//
// Each child has two options that can be set, resize and shrink. If resize is
// true, then when the Paned is resized, that child will expand or shrink along
// with the paned widget. If shrink is true, then that child can be made smaller
// than its requisition by the user. Setting shrink to FALSE allows the
// application to set a minimum size. If resize is false for both children, then
// this is treated as if resize is true for both children.
//
// The application can set the position of the slider as if it were set by the
// user, by calling gtk_paned_set_position().
//
// CSS nodes
//
//    GtkWidget *hpaned = gtk_paned_new (GTK_ORIENTATION_HORIZONTAL);
//    GtkWidget *frame1 = gtk_frame_new (NULL);
//    GtkWidget *frame2 = gtk_frame_new (NULL);
//    gtk_frame_set_shadow_type (GTK_FRAME (frame1), GTK_SHADOW_IN);
//    gtk_frame_set_shadow_type (GTK_FRAME (frame2), GTK_SHADOW_IN);
//
//    gtk_widget_set_size_request (hpaned, 200, -1);
//
//    gtk_paned_pack1 (GTK_PANED (hpaned), frame1, TRUE, FALSE);
//    gtk_widget_set_size_request (frame1, 50, -1);
//
//    gtk_paned_pack2 (GTK_PANED (hpaned), frame2, FALSE, FALSE);
//    gtk_widget_set_size_request (frame2, 50, -1);.
type Paned struct {
	_ [0]func() // equal guard
	Container

	*coreglib.Object
	Orientable
}

var (
	_ Containerer       = (*Paned)(nil)
	_ coreglib.Objector = (*Paned)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*Paned, *PanedClass, PanedOverrides](
		GTypePaned,
		initPanedClass,
		wrapPaned,
		defaultPanedOverrides,
	)
}

func initPanedClass(gclass unsafe.Pointer, overrides PanedOverrides, classInitFunc func(*PanedClass)) {
	if classInitFunc != nil {
		class := (*PanedClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapPaned(obj *coreglib.Object) *Paned {
	return &Paned{
		Container: Container{
			Widget: Widget{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				ImplementorIface: atk.ImplementorIface{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
			},
		},
		Object: obj,
		Orientable: Orientable{
			Object: obj,
		},
	}
}

func marshalPaned(p uintptr) (interface{}, error) {
	return wrapPaned(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectAcceptPosition signal is a [keybinding signal][GtkBindingSignal] which
// gets emitted to accept the current position of the handle when moving it
// using key bindings.
//
// The default binding for this signal is Return or Space.
func (v *Paned) ConnectAcceptPosition(f func() (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "accept-position", false, unsafe.Pointer(C._gotk4_gtk3_Paned_ConnectAcceptPosition), f)
}

// ConnectCancelPosition signal is a [keybinding signal][GtkBindingSignal] which
// gets emitted to cancel moving the position of the handle using key bindings.
// The position of the handle will be reset to the value prior to moving it.
//
// The default binding for this signal is Escape.
func (v *Paned) ConnectCancelPosition(f func() (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "cancel-position", false, unsafe.Pointer(C._gotk4_gtk3_Paned_ConnectCancelPosition), f)
}

// ConnectCycleChildFocus signal is a [keybinding signal][GtkBindingSignal]
// which gets emitted to cycle the focus between the children of the paned.
//
// The default binding is f6.
func (v *Paned) ConnectCycleChildFocus(f func(reversed bool) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "cycle-child-focus", false, unsafe.Pointer(C._gotk4_gtk3_Paned_ConnectCycleChildFocus), f)
}

// ConnectCycleHandleFocus signal is a [keybinding signal][GtkBindingSignal]
// which gets emitted to cycle whether the paned should grab focus to allow the
// user to change position of the handle by using key bindings.
//
// The default binding for this signal is f8.
func (v *Paned) ConnectCycleHandleFocus(f func(reversed bool) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "cycle-handle-focus", false, unsafe.Pointer(C._gotk4_gtk3_Paned_ConnectCycleHandleFocus), f)
}

// ConnectToggleHandleFocus is a [keybinding signal][GtkBindingSignal] which
// gets emitted to accept the current position of the handle and then move focus
// to the next widget in the focus chain.
//
// The default binding is Tab.
func (v *Paned) ConnectToggleHandleFocus(f func() (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "toggle-handle-focus", false, unsafe.Pointer(C._gotk4_gtk3_Paned_ConnectToggleHandleFocus), f)
}

// PanedClass: instance of this type is always passed by reference.
type PanedClass struct {
	*panedClass
}

// panedClass is the struct that's finalized.
type panedClass struct {
	native unsafe.Pointer
}

var GIRInfoPanedClass = girepository.MustFind("Gtk", "PanedClass")
