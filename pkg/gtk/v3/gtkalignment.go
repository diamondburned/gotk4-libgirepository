// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeAlignment = coreglib.Type(girepository.MustFind("Gtk", "Alignment").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeAlignment, F: marshalAlignment},
	})
}

// AlignmentOverrides contains methods that are overridable.
type AlignmentOverrides struct {
}

func defaultAlignmentOverrides(v *Alignment) AlignmentOverrides {
	return AlignmentOverrides{}
}

// Alignment widget controls the alignment and size of its child widget. It has
// four settings: xscale, yscale, xalign, and yalign.
//
// The scale settings are used to specify how much the child widget should
// expand to fill the space allocated to the Alignment. The values can range
// from 0 (meaning the child doesnâ€™t expand at all) to 1 (meaning the child
// expands to fill all of the available space).
//
// The align settings are used to place the child widget within the available
// area. The values range from 0 (top or left) to 1 (bottom or right). Of
// course, if the scale settings are both set to 1, the alignment settings have
// no effect.
//
// GtkAlignment has been deprecated in 3.14 and should not be used in
// newly-written code. The desired effect can be achieved by using the
// Widget:halign, Widget:valign and Widget:margin properties on the child
// widget.
type Alignment struct {
	_ [0]func() // equal guard
	Bin
}

var (
	_ Binner = (*Alignment)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*Alignment, *AlignmentClass, AlignmentOverrides](
		GTypeAlignment,
		initAlignmentClass,
		wrapAlignment,
		defaultAlignmentOverrides,
	)
}

func initAlignmentClass(gclass unsafe.Pointer, overrides AlignmentOverrides, classInitFunc func(*AlignmentClass)) {
	if classInitFunc != nil {
		class := (*AlignmentClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapAlignment(obj *coreglib.Object) *Alignment {
	return &Alignment{
		Bin: Bin{
			Container: Container{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalAlignment(p uintptr) (interface{}, error) {
	return wrapAlignment(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// AlignmentClass: instance of this type is always passed by reference.
type AlignmentClass struct {
	*alignmentClass
}

// alignmentClass is the struct that's finalized.
type alignmentClass struct {
	native unsafe.Pointer
}

var GIRInfoAlignmentClass = girepository.MustFind("Gtk", "AlignmentClass")
