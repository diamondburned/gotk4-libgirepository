// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeStackAccessible = coreglib.Type(girepository.MustFind("Gtk", "StackAccessible").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeStackAccessible, F: marshalStackAccessible},
	})
}

// StackAccessibleOverrides contains methods that are overridable.
type StackAccessibleOverrides struct {
}

func defaultStackAccessibleOverrides(v *StackAccessible) StackAccessibleOverrides {
	return StackAccessibleOverrides{}
}

type StackAccessible struct {
	_ [0]func() // equal guard
	ContainerAccessible
}

var (
	_ coreglib.Objector = (*StackAccessible)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*StackAccessible, *StackAccessibleClass, StackAccessibleOverrides](
		GTypeStackAccessible,
		initStackAccessibleClass,
		wrapStackAccessible,
		defaultStackAccessibleOverrides,
	)
}

func initStackAccessibleClass(gclass unsafe.Pointer, overrides StackAccessibleOverrides, classInitFunc func(*StackAccessibleClass)) {
	if classInitFunc != nil {
		class := (*StackAccessibleClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapStackAccessible(obj *coreglib.Object) *StackAccessible {
	return &StackAccessible{
		ContainerAccessible: ContainerAccessible{
			WidgetAccessible: WidgetAccessible{
				Accessible: Accessible{
					AtkObject: atk.AtkObject{
						Object: obj,
					},
				},
				Component: atk.Component{
					Object: obj,
				},
			},
		},
	}
}

func marshalStackAccessible(p uintptr) (interface{}, error) {
	return wrapStackAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// StackAccessibleClass: instance of this type is always passed by reference.
type StackAccessibleClass struct {
	*stackAccessibleClass
}

// stackAccessibleClass is the struct that's finalized.
type stackAccessibleClass struct {
	native unsafe.Pointer
}

var GIRInfoStackAccessibleClass = girepository.MustFind("Gtk", "StackAccessibleClass")
