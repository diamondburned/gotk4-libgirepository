// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gtk3_FlowBox_ConnectUnselectAll(gpointer, guintptr);
// extern void _gotk4_gtk3_FlowBox_ConnectToggleCursorChild(gpointer, guintptr);
// extern void _gotk4_gtk3_FlowBox_ConnectSelectedChildrenChanged(gpointer, guintptr);
// extern void _gotk4_gtk3_FlowBox_ConnectSelectAll(gpointer, guintptr);
// extern void _gotk4_gtk3_FlowBox_ConnectChildActivated(gpointer, void*, guintptr);
// extern void _gotk4_gtk3_FlowBox_ConnectActivateCursorChild(gpointer, guintptr);
// extern void _gotk4_gtk3_FlowBoxChild_ConnectActivate(gpointer, guintptr);
import "C"

// GType values.
var (
	GTypeFlowBox      = coreglib.Type(girepository.MustFind("Gtk", "FlowBox").RegisteredGType())
	GTypeFlowBoxChild = coreglib.Type(girepository.MustFind("Gtk", "FlowBoxChild").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeFlowBox, F: marshalFlowBox},
		coreglib.TypeMarshaler{T: GTypeFlowBoxChild, F: marshalFlowBoxChild},
	})
}

// FlowBoxOverrides contains methods that are overridable.
type FlowBoxOverrides struct {
}

func defaultFlowBoxOverrides(v *FlowBox) FlowBoxOverrides {
	return FlowBoxOverrides{}
}

// FlowBox positions child widgets in sequence according to its orientation.
//
// For instance, with the horizontal orientation, the widgets will be arranged
// from left to right, starting a new row under the previous row when necessary.
// Reducing the width in this case will require more rows, so a larger height
// will be requested.
//
// Likewise, with the vertical orientation, the widgets will be arranged from
// top to bottom, starting a new column to the right when necessary. Reducing
// the height will require more columns, so a larger width will be requested.
//
// The size request of a GtkFlowBox alone may not be what you expect; if you
// need to be able to shrink it along both axes and dynamically reflow its
// children, you may have to wrap it in a ScrolledWindow to enable that.
//
// The children of a GtkFlowBox can be dynamically sorted and filtered.
//
// Although a GtkFlowBox must have only FlowBoxChild children, you can add any
// kind of widget to it via gtk_container_add(), and a GtkFlowBoxChild widget
// will automatically be inserted between the box and the widget.
//
// Also see ListBox.
//
// GtkFlowBox was added in GTK+ 3.12.
//
// CSS nodes
//
//    flowbox
//    ├── flowboxchild
//    │   ╰── <child>
//    ├── flowboxchild
//    │   ╰── <child>
//    ┊
//    ╰── [rubberband]
//
// GtkFlowBox uses a single CSS node with name flowbox. GtkFlowBoxChild uses a
// single CSS node with name flowboxchild. For rubberband selection, a subnode
// with name rubberband is used.
type FlowBox struct {
	_ [0]func() // equal guard
	Container

	*coreglib.Object
	Orientable
}

var (
	_ Containerer       = (*FlowBox)(nil)
	_ coreglib.Objector = (*FlowBox)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*FlowBox, *FlowBoxClass, FlowBoxOverrides](
		GTypeFlowBox,
		initFlowBoxClass,
		wrapFlowBox,
		defaultFlowBoxOverrides,
	)
}

func initFlowBoxClass(gclass unsafe.Pointer, overrides FlowBoxOverrides, classInitFunc func(*FlowBoxClass)) {
	if classInitFunc != nil {
		class := (*FlowBoxClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapFlowBox(obj *coreglib.Object) *FlowBox {
	return &FlowBox{
		Container: Container{
			Widget: Widget{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				ImplementorIface: atk.ImplementorIface{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
			},
		},
		Object: obj,
		Orientable: Orientable{
			Object: obj,
		},
	}
}

func marshalFlowBox(p uintptr) (interface{}, error) {
	return wrapFlowBox(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectActivateCursorChild signal is a [keybinding signal][GtkBindingSignal]
// which gets emitted when the user activates the box.
func (v *FlowBox) ConnectActivateCursorChild(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "activate-cursor-child", false, unsafe.Pointer(C._gotk4_gtk3_FlowBox_ConnectActivateCursorChild), f)
}

// ConnectChildActivated signal is emitted when a child has been activated by
// the user.
func (v *FlowBox) ConnectChildActivated(f func(child *FlowBoxChild)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "child-activated", false, unsafe.Pointer(C._gotk4_gtk3_FlowBox_ConnectChildActivated), f)
}

// ConnectSelectAll signal is a [keybinding signal][GtkBindingSignal] which gets
// emitted to select all children of the box, if the selection mode permits it.
//
// The default bindings for this signal is Ctrl-a.
func (v *FlowBox) ConnectSelectAll(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "select-all", false, unsafe.Pointer(C._gotk4_gtk3_FlowBox_ConnectSelectAll), f)
}

// ConnectSelectedChildrenChanged signal is emitted when the set of selected
// children changes.
//
// Use gtk_flow_box_selected_foreach() or gtk_flow_box_get_selected_children()
// to obtain the selected children.
func (v *FlowBox) ConnectSelectedChildrenChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "selected-children-changed", false, unsafe.Pointer(C._gotk4_gtk3_FlowBox_ConnectSelectedChildrenChanged), f)
}

// ConnectToggleCursorChild signal is a [keybinding signal][GtkBindingSignal]
// which toggles the selection of the child that has the focus.
//
// The default binding for this signal is Ctrl-Space.
func (v *FlowBox) ConnectToggleCursorChild(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "toggle-cursor-child", false, unsafe.Pointer(C._gotk4_gtk3_FlowBox_ConnectToggleCursorChild), f)
}

// ConnectUnselectAll signal is a [keybinding signal][GtkBindingSignal] which
// gets emitted to unselect all children of the box, if the selection mode
// permits it.
//
// The default bindings for this signal is Ctrl-Shift-a.
func (v *FlowBox) ConnectUnselectAll(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "unselect-all", false, unsafe.Pointer(C._gotk4_gtk3_FlowBox_ConnectUnselectAll), f)
}

// FlowBoxChildOverrides contains methods that are overridable.
type FlowBoxChildOverrides struct {
}

func defaultFlowBoxChildOverrides(v *FlowBoxChild) FlowBoxChildOverrides {
	return FlowBoxChildOverrides{}
}

type FlowBoxChild struct {
	_ [0]func() // equal guard
	Bin
}

var (
	_ Binner = (*FlowBoxChild)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*FlowBoxChild, *FlowBoxChildClass, FlowBoxChildOverrides](
		GTypeFlowBoxChild,
		initFlowBoxChildClass,
		wrapFlowBoxChild,
		defaultFlowBoxChildOverrides,
	)
}

func initFlowBoxChildClass(gclass unsafe.Pointer, overrides FlowBoxChildOverrides, classInitFunc func(*FlowBoxChildClass)) {
	if classInitFunc != nil {
		class := (*FlowBoxChildClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapFlowBoxChild(obj *coreglib.Object) *FlowBoxChild {
	return &FlowBoxChild{
		Bin: Bin{
			Container: Container{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalFlowBoxChild(p uintptr) (interface{}, error) {
	return wrapFlowBoxChild(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectActivate signal is emitted when the user activates a child widget in a
// FlowBox, either by clicking or double-clicking, or by using the Space or
// Enter key.
//
// While this signal is used as a [keybinding signal][GtkBindingSignal], it can
// be used by applications for their own purposes.
func (v *FlowBoxChild) ConnectActivate(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "activate", false, unsafe.Pointer(C._gotk4_gtk3_FlowBoxChild_ConnectActivate), f)
}

// FlowBoxChildClass: instance of this type is always passed by reference.
type FlowBoxChildClass struct {
	*flowBoxChildClass
}

// flowBoxChildClass is the struct that's finalized.
type flowBoxChildClass struct {
	native unsafe.Pointer
}

var GIRInfoFlowBoxChildClass = girepository.MustFind("Gtk", "FlowBoxChildClass")

// FlowBoxClass: instance of this type is always passed by reference.
type FlowBoxClass struct {
	*flowBoxClass
}

// flowBoxClass is the struct that's finalized.
type flowBoxClass struct {
	native unsafe.Pointer
}

var GIRInfoFlowBoxClass = girepository.MustFind("Gtk", "FlowBoxClass")
