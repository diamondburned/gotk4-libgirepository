// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeHSeparator = coreglib.Type(girepository.MustFind("Gtk", "HSeparator").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeHSeparator, F: marshalHSeparator},
	})
}

// HSeparatorOverrides contains methods that are overridable.
type HSeparatorOverrides struct {
}

func defaultHSeparatorOverrides(v *HSeparator) HSeparatorOverrides {
	return HSeparatorOverrides{}
}

// HSeparator widget is a horizontal separator, used to group the widgets within
// a window. It displays a horizontal line with a shadow to make it appear
// sunken into the interface.
//
// > The HSeparator widget is not used as a separator within menus. > To create
// a separator in a menu create an empty SeparatorMenuItem > widget using
// gtk_separator_menu_item_new() and add it to the menu with >
// gtk_menu_shell_append().
//
// GtkHSeparator has been deprecated, use Separator instead.
type HSeparator struct {
	_ [0]func() // equal guard
	Separator
}

var (
	_ Widgetter         = (*HSeparator)(nil)
	_ coreglib.Objector = (*HSeparator)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*HSeparator, *HSeparatorClass, HSeparatorOverrides](
		GTypeHSeparator,
		initHSeparatorClass,
		wrapHSeparator,
		defaultHSeparatorOverrides,
	)
}

func initHSeparatorClass(gclass unsafe.Pointer, overrides HSeparatorOverrides, classInitFunc func(*HSeparatorClass)) {
	if classInitFunc != nil {
		class := (*HSeparatorClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapHSeparator(obj *coreglib.Object) *HSeparator {
	return &HSeparator{
		Separator: Separator{
			Widget: Widget{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				ImplementorIface: atk.ImplementorIface{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
			},
			Object: obj,
			Orientable: Orientable{
				Object: obj,
			},
		},
	}
}

func marshalHSeparator(p uintptr) (interface{}, error) {
	return wrapHSeparator(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// HSeparatorClass: instance of this type is always passed by reference.
type HSeparatorClass struct {
	*hSeparatorClass
}

// hSeparatorClass is the struct that's finalized.
type hSeparatorClass struct {
	native unsafe.Pointer
}

var GIRInfoHSeparatorClass = girepository.MustFind("Gtk", "HSeparatorClass")
