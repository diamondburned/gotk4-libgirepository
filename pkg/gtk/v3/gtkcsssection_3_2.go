// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"fmt"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeCSSSectionType = coreglib.Type(girepository.MustFind("Gtk", "CssSectionType").RegisteredGType())
	GTypeCSSSection     = coreglib.Type(girepository.MustFind("Gtk", "CssSection").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeCSSSectionType, F: marshalCSSSectionType},
		coreglib.TypeMarshaler{T: GTypeCSSSection, F: marshalCSSSection},
	})
}

// CSSSectionType: different types of sections indicate parts of a CSS document
// as parsed by GTKâ€™s CSS parser. They are oriented towards the CSS Grammar
// (http://www.w3.org/TR/CSS21/grammar.html), but may contain extensions.
//
// More types might be added in the future as the parser incorporates more
// features.
type CSSSectionType C.gint

const (
	// CSSSectionDocument: section describes a complete document. This section
	// time is the only one where gtk_css_section_get_parent() might return
	// NULL.
	CSSSectionDocument CSSSectionType = iota
	// CSSSectionImport: section defines an import rule.
	CSSSectionImport
	// CSSSectionColorDefinition: section defines a color. This is a GTK
	// extension to CSS.
	CSSSectionColorDefinition
	// CSSSectionBindingSet: section defines a binding set. This is a GTK
	// extension to CSS.
	CSSSectionBindingSet
	// CSSSectionRuleset: section defines a CSS ruleset.
	CSSSectionRuleset
	// CSSSectionSelector: section defines a CSS selector.
	CSSSectionSelector
	// CSSSectionDeclaration: section defines the declaration of a CSS variable.
	CSSSectionDeclaration
	// CSSSectionValue: section defines the value of a CSS declaration.
	CSSSectionValue
	// CSSSectionKeyframes: section defines keyframes. See [CSS
	// Animations](http://dev.w3.org/csswg/css3-animations/#keyframes) for
	// details. Since 3.6.
	CSSSectionKeyframes
)

func marshalCSSSectionType(p uintptr) (interface{}, error) {
	return CSSSectionType(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for CSSSectionType.
func (c CSSSectionType) String() string {
	switch c {
	case CSSSectionDocument:
		return "Document"
	case CSSSectionImport:
		return "Import"
	case CSSSectionColorDefinition:
		return "ColorDefinition"
	case CSSSectionBindingSet:
		return "BindingSet"
	case CSSSectionRuleset:
		return "Ruleset"
	case CSSSectionSelector:
		return "Selector"
	case CSSSectionDeclaration:
		return "Declaration"
	case CSSSectionValue:
		return "Value"
	case CSSSectionKeyframes:
		return "Keyframes"
	default:
		return fmt.Sprintf("CSSSectionType(%d)", c)
	}
}

// CSSSection defines a part of a CSS document. Because sections are nested into
// one another, you can use gtk_css_section_get_parent() to get the containing
// region.
//
// An instance of this type is always passed by reference.
type CSSSection struct {
	*cssSection
}

// cssSection is the struct that's finalized.
type cssSection struct {
	native unsafe.Pointer
}

var GIRInfoCSSSection = girepository.MustFind("Gtk", "CssSection")

func marshalCSSSection(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &CSSSection{&cssSection{(unsafe.Pointer)(b)}}, nil
}
