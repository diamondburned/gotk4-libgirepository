// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeFlowBoxAccessible = coreglib.Type(girepository.MustFind("Gtk", "FlowBoxAccessible").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeFlowBoxAccessible, F: marshalFlowBoxAccessible},
	})
}

// FlowBoxAccessibleOverrides contains methods that are overridable.
type FlowBoxAccessibleOverrides struct {
}

func defaultFlowBoxAccessibleOverrides(v *FlowBoxAccessible) FlowBoxAccessibleOverrides {
	return FlowBoxAccessibleOverrides{}
}

type FlowBoxAccessible struct {
	_ [0]func() // equal guard
	ContainerAccessible

	atk.Selection
}

var (
	_ coreglib.Objector = (*FlowBoxAccessible)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*FlowBoxAccessible, *FlowBoxAccessibleClass, FlowBoxAccessibleOverrides](
		GTypeFlowBoxAccessible,
		initFlowBoxAccessibleClass,
		wrapFlowBoxAccessible,
		defaultFlowBoxAccessibleOverrides,
	)
}

func initFlowBoxAccessibleClass(gclass unsafe.Pointer, overrides FlowBoxAccessibleOverrides, classInitFunc func(*FlowBoxAccessibleClass)) {
	if classInitFunc != nil {
		class := (*FlowBoxAccessibleClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapFlowBoxAccessible(obj *coreglib.Object) *FlowBoxAccessible {
	return &FlowBoxAccessible{
		ContainerAccessible: ContainerAccessible{
			WidgetAccessible: WidgetAccessible{
				Accessible: Accessible{
					AtkObject: atk.AtkObject{
						Object: obj,
					},
				},
				Component: atk.Component{
					Object: obj,
				},
			},
		},
		Selection: atk.Selection{
			Object: obj,
		},
	}
}

func marshalFlowBoxAccessible(p uintptr) (interface{}, error) {
	return wrapFlowBoxAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// FlowBoxAccessibleClass: instance of this type is always passed by reference.
type FlowBoxAccessibleClass struct {
	*flowBoxAccessibleClass
}

// flowBoxAccessibleClass is the struct that's finalized.
type flowBoxAccessibleClass struct {
	native unsafe.Pointer
}

var GIRInfoFlowBoxAccessibleClass = girepository.MustFind("Gtk", "FlowBoxAccessibleClass")
