// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeCheckMenuItemAccessible = coreglib.Type(girepository.MustFind("Gtk", "CheckMenuItemAccessible").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeCheckMenuItemAccessible, F: marshalCheckMenuItemAccessible},
	})
}

// CheckMenuItemAccessibleOverrides contains methods that are overridable.
type CheckMenuItemAccessibleOverrides struct {
}

func defaultCheckMenuItemAccessibleOverrides(v *CheckMenuItemAccessible) CheckMenuItemAccessibleOverrides {
	return CheckMenuItemAccessibleOverrides{}
}

type CheckMenuItemAccessible struct {
	_ [0]func() // equal guard
	MenuItemAccessible
}

var (
	_ coreglib.Objector = (*CheckMenuItemAccessible)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*CheckMenuItemAccessible, *CheckMenuItemAccessibleClass, CheckMenuItemAccessibleOverrides](
		GTypeCheckMenuItemAccessible,
		initCheckMenuItemAccessibleClass,
		wrapCheckMenuItemAccessible,
		defaultCheckMenuItemAccessibleOverrides,
	)
}

func initCheckMenuItemAccessibleClass(gclass unsafe.Pointer, overrides CheckMenuItemAccessibleOverrides, classInitFunc func(*CheckMenuItemAccessibleClass)) {
	if classInitFunc != nil {
		class := (*CheckMenuItemAccessibleClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapCheckMenuItemAccessible(obj *coreglib.Object) *CheckMenuItemAccessible {
	return &CheckMenuItemAccessible{
		MenuItemAccessible: MenuItemAccessible{
			ContainerAccessible: ContainerAccessible{
				WidgetAccessible: WidgetAccessible{
					Accessible: Accessible{
						AtkObject: atk.AtkObject{
							Object: obj,
						},
					},
					Component: atk.Component{
						Object: obj,
					},
				},
			},
			Object: obj,
			Action: atk.Action{
				Object: obj,
			},
			Selection: atk.Selection{
				Object: obj,
			},
		},
	}
}

func marshalCheckMenuItemAccessible(p uintptr) (interface{}, error) {
	return wrapCheckMenuItemAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// CheckMenuItemAccessibleClass: instance of this type is always passed by
// reference.
type CheckMenuItemAccessibleClass struct {
	*checkMenuItemAccessibleClass
}

// checkMenuItemAccessibleClass is the struct that's finalized.
type checkMenuItemAccessibleClass struct {
	native unsafe.Pointer
}

var GIRInfoCheckMenuItemAccessibleClass = girepository.MustFind("Gtk", "CheckMenuItemAccessibleClass")
