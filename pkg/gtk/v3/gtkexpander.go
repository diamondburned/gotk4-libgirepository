// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gtk3_Expander_ConnectActivate(gpointer, guintptr);
import "C"

// GType values.
var (
	GTypeExpander = coreglib.Type(girepository.MustFind("Gtk", "Expander").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeExpander, F: marshalExpander},
	})
}

// ExpanderOverrides contains methods that are overridable.
type ExpanderOverrides struct {
}

func defaultExpanderOverrides(v *Expander) ExpanderOverrides {
	return ExpanderOverrides{}
}

// Expander allows the user to hide or show its child by clicking on an expander
// triangle similar to the triangles used in a TreeView.
//
// Normally you use an expander as you would use any other descendant of Bin;
// you create the child widget and use gtk_container_add() to add it to the
// expander. When the expander is toggled, it will take care of showing and
// hiding the child automatically.
//
//
// Special Usage
//
// There are situations in which you may prefer to show and hide the expanded
// widget yourself, such as when you want to actually create the widget at
// expansion time. In this case, create a Expander but do not add a child to it.
// The expander widget has an Expander:expanded property which can be used to
// monitor its expansion state. You should watch this property with a signal
// connection as follows:
//
//    expander
//    ├── title
//    │   ├── arrow
//    │   ╰── <label widget>
//    ╰── <child>
//
// GtkExpander has three CSS nodes, the main node with the name expander, a
// subnode with name title and node below it with name arrow. The arrow of an
// expander that is showing its child gets the :checked pseudoclass added to it.
type Expander struct {
	_ [0]func() // equal guard
	Bin
}

var (
	_ Binner = (*Expander)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*Expander, *ExpanderClass, ExpanderOverrides](
		GTypeExpander,
		initExpanderClass,
		wrapExpander,
		defaultExpanderOverrides,
	)
}

func initExpanderClass(gclass unsafe.Pointer, overrides ExpanderOverrides, classInitFunc func(*ExpanderClass)) {
	if classInitFunc != nil {
		class := (*ExpanderClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapExpander(obj *coreglib.Object) *Expander {
	return &Expander{
		Bin: Bin{
			Container: Container{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalExpander(p uintptr) (interface{}, error) {
	return wrapExpander(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *Expander) ConnectActivate(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "activate", false, unsafe.Pointer(C._gotk4_gtk3_Expander_ConnectActivate), f)
}

// ExpanderClass: instance of this type is always passed by reference.
type ExpanderClass struct {
	*expanderClass
}

// expanderClass is the struct that's finalized.
type expanderClass struct {
	native unsafe.Pointer
}

var GIRInfoExpanderClass = girepository.MustFind("Gtk", "ExpanderClass")
