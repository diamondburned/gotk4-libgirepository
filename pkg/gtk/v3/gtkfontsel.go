// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeFontSelection       = coreglib.Type(girepository.MustFind("Gtk", "FontSelection").RegisteredGType())
	GTypeFontSelectionDialog = coreglib.Type(girepository.MustFind("Gtk", "FontSelectionDialog").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeFontSelection, F: marshalFontSelection},
		coreglib.TypeMarshaler{T: GTypeFontSelectionDialog, F: marshalFontSelectionDialog},
	})
}

// FontSelectionOverrides contains methods that are overridable.
type FontSelectionOverrides struct {
}

func defaultFontSelectionOverrides(v *FontSelection) FontSelectionOverrides {
	return FontSelectionOverrides{}
}

type FontSelection struct {
	_ [0]func() // equal guard
	Box
}

var (
	_ Containerer       = (*FontSelection)(nil)
	_ coreglib.Objector = (*FontSelection)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*FontSelection, *FontSelectionClass, FontSelectionOverrides](
		GTypeFontSelection,
		initFontSelectionClass,
		wrapFontSelection,
		defaultFontSelectionOverrides,
	)
}

func initFontSelectionClass(gclass unsafe.Pointer, overrides FontSelectionOverrides, classInitFunc func(*FontSelectionClass)) {
	if classInitFunc != nil {
		class := (*FontSelectionClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapFontSelection(obj *coreglib.Object) *FontSelection {
	return &FontSelection{
		Box: Box{
			Container: Container{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
			Object: obj,
			Orientable: Orientable{
				Object: obj,
			},
		},
	}
}

func marshalFontSelection(p uintptr) (interface{}, error) {
	return wrapFontSelection(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// FontSelectionDialogOverrides contains methods that are overridable.
type FontSelectionDialogOverrides struct {
}

func defaultFontSelectionDialogOverrides(v *FontSelectionDialog) FontSelectionDialogOverrides {
	return FontSelectionDialogOverrides{}
}

type FontSelectionDialog struct {
	_ [0]func() // equal guard
	Dialog
}

var (
	_ Binner = (*FontSelectionDialog)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*FontSelectionDialog, *FontSelectionDialogClass, FontSelectionDialogOverrides](
		GTypeFontSelectionDialog,
		initFontSelectionDialogClass,
		wrapFontSelectionDialog,
		defaultFontSelectionDialogOverrides,
	)
}

func initFontSelectionDialogClass(gclass unsafe.Pointer, overrides FontSelectionDialogOverrides, classInitFunc func(*FontSelectionDialogClass)) {
	if classInitFunc != nil {
		class := (*FontSelectionDialogClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapFontSelectionDialog(obj *coreglib.Object) *FontSelectionDialog {
	return &FontSelectionDialog{
		Dialog: Dialog{
			Window: Window{
				Bin: Bin{
					Container: Container{
						Widget: Widget{
							InitiallyUnowned: coreglib.InitiallyUnowned{
								Object: obj,
							},
							Object: obj,
							ImplementorIface: atk.ImplementorIface{
								Object: obj,
							},
							Buildable: Buildable{
								Object: obj,
							},
						},
					},
				},
			},
		},
	}
}

func marshalFontSelectionDialog(p uintptr) (interface{}, error) {
	return wrapFontSelectionDialog(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// FontSelectionClass: instance of this type is always passed by reference.
type FontSelectionClass struct {
	*fontSelectionClass
}

// fontSelectionClass is the struct that's finalized.
type fontSelectionClass struct {
	native unsafe.Pointer
}

var GIRInfoFontSelectionClass = girepository.MustFind("Gtk", "FontSelectionClass")

// FontSelectionDialogClass: instance of this type is always passed by
// reference.
type FontSelectionDialogClass struct {
	*fontSelectionDialogClass
}

// fontSelectionDialogClass is the struct that's finalized.
type fontSelectionDialogClass struct {
	native unsafe.Pointer
}

var GIRInfoFontSelectionDialogClass = girepository.MustFind("Gtk", "FontSelectionDialogClass")
