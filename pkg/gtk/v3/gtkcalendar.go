// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"fmt"
	"strings"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gtk3_Calendar_ConnectPrevYear(gpointer, guintptr);
// extern void _gotk4_gtk3_Calendar_ConnectPrevMonth(gpointer, guintptr);
// extern void _gotk4_gtk3_Calendar_ConnectNextYear(gpointer, guintptr);
// extern void _gotk4_gtk3_Calendar_ConnectNextMonth(gpointer, guintptr);
// extern void _gotk4_gtk3_Calendar_ConnectMonthChanged(gpointer, guintptr);
// extern void _gotk4_gtk3_Calendar_ConnectDaySelectedDoubleClick(gpointer, guintptr);
// extern void _gotk4_gtk3_Calendar_ConnectDaySelected(gpointer, guintptr);
import "C"

// GType values.
var (
	GTypeCalendarDisplayOptions = coreglib.Type(girepository.MustFind("Gtk", "CalendarDisplayOptions").RegisteredGType())
	GTypeCalendar               = coreglib.Type(girepository.MustFind("Gtk", "Calendar").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeCalendarDisplayOptions, F: marshalCalendarDisplayOptions},
		coreglib.TypeMarshaler{T: GTypeCalendar, F: marshalCalendar},
	})
}

// CalendarDisplayOptions: these options can be used to influence the display
// and behaviour of a Calendar.
type CalendarDisplayOptions C.guint

const (
	// CalendarShowHeading specifies that the month and year should be
	// displayed.
	CalendarShowHeading CalendarDisplayOptions = 0b1
	// CalendarShowDayNames specifies that three letter day descriptions should
	// be present.
	CalendarShowDayNames CalendarDisplayOptions = 0b10
	// CalendarNoMonthChange prevents the user from switching months with the
	// calendar.
	CalendarNoMonthChange CalendarDisplayOptions = 0b100
	// CalendarShowWeekNumbers displays each week numbers of the current year,
	// down the left side of the calendar.
	CalendarShowWeekNumbers CalendarDisplayOptions = 0b1000
	// CalendarShowDetails: just show an indicator, not the full details text
	// when details are provided. See gtk_calendar_set_detail_func().
	CalendarShowDetails CalendarDisplayOptions = 0b100000
)

func marshalCalendarDisplayOptions(p uintptr) (interface{}, error) {
	return CalendarDisplayOptions(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for CalendarDisplayOptions.
func (c CalendarDisplayOptions) String() string {
	if c == 0 {
		return "CalendarDisplayOptions(0)"
	}

	var builder strings.Builder
	builder.Grow(106)

	for c != 0 {
		next := c & (c - 1)
		bit := c - next

		switch bit {
		case CalendarShowHeading:
			builder.WriteString("ShowHeading|")
		case CalendarShowDayNames:
			builder.WriteString("ShowDayNames|")
		case CalendarNoMonthChange:
			builder.WriteString("NoMonthChange|")
		case CalendarShowWeekNumbers:
			builder.WriteString("ShowWeekNumbers|")
		case CalendarShowDetails:
			builder.WriteString("ShowDetails|")
		default:
			builder.WriteString(fmt.Sprintf("CalendarDisplayOptions(0b%b)|", bit))
		}

		c = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if c contains other.
func (c CalendarDisplayOptions) Has(other CalendarDisplayOptions) bool {
	return (c & other) == other
}

// CalendarOverrides contains methods that are overridable.
type CalendarOverrides struct {
}

func defaultCalendarOverrides(v *Calendar) CalendarOverrides {
	return CalendarOverrides{}
}

// Calendar is a widget that displays a Gregorian calendar, one month at a time.
// It can be created with gtk_calendar_new().
//
// The month and year currently displayed can be altered with
// gtk_calendar_select_month(). The exact day can be selected from the displayed
// month using gtk_calendar_select_day().
//
// To place a visual marker on a particular day, use gtk_calendar_mark_day() and
// to remove the marker, gtk_calendar_unmark_day(). Alternative, all marks can
// be cleared with gtk_calendar_clear_marks().
//
// The way in which the calendar itself is displayed can be altered using
// gtk_calendar_set_display_options().
//
// The selected date can be retrieved from a Calendar using
// gtk_calendar_get_date().
//
// Users should be aware that, although the Gregorian calendar is the legal
// calendar in most countries, it was adopted progressively between 1582 and
// 1929. Display before these dates is likely to be historically incorrect.
type Calendar struct {
	_ [0]func() // equal guard
	Widget
}

var (
	_ Widgetter = (*Calendar)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*Calendar, *CalendarClass, CalendarOverrides](
		GTypeCalendar,
		initCalendarClass,
		wrapCalendar,
		defaultCalendarOverrides,
	)
}

func initCalendarClass(gclass unsafe.Pointer, overrides CalendarOverrides, classInitFunc func(*CalendarClass)) {
	if classInitFunc != nil {
		class := (*CalendarClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapCalendar(obj *coreglib.Object) *Calendar {
	return &Calendar{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			ImplementorIface: atk.ImplementorIface{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
		},
	}
}

func marshalCalendar(p uintptr) (interface{}, error) {
	return wrapCalendar(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectDaySelected is emitted when the user selects a day.
func (v *Calendar) ConnectDaySelected(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "day-selected", false, unsafe.Pointer(C._gotk4_gtk3_Calendar_ConnectDaySelected), f)
}

// ConnectDaySelectedDoubleClick is emitted when the user double-clicks a day.
func (v *Calendar) ConnectDaySelectedDoubleClick(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "day-selected-double-click", false, unsafe.Pointer(C._gotk4_gtk3_Calendar_ConnectDaySelectedDoubleClick), f)
}

// ConnectMonthChanged is emitted when the user clicks a button to change the
// selected month on a calendar.
func (v *Calendar) ConnectMonthChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "month-changed", false, unsafe.Pointer(C._gotk4_gtk3_Calendar_ConnectMonthChanged), f)
}

// ConnectNextMonth is emitted when the user switched to the next month.
func (v *Calendar) ConnectNextMonth(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "next-month", false, unsafe.Pointer(C._gotk4_gtk3_Calendar_ConnectNextMonth), f)
}

// ConnectNextYear is emitted when user switched to the next year.
func (v *Calendar) ConnectNextYear(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "next-year", false, unsafe.Pointer(C._gotk4_gtk3_Calendar_ConnectNextYear), f)
}

// ConnectPrevMonth is emitted when the user switched to the previous month.
func (v *Calendar) ConnectPrevMonth(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "prev-month", false, unsafe.Pointer(C._gotk4_gtk3_Calendar_ConnectPrevMonth), f)
}

// ConnectPrevYear is emitted when user switched to the previous year.
func (v *Calendar) ConnectPrevYear(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "prev-year", false, unsafe.Pointer(C._gotk4_gtk3_Calendar_ConnectPrevYear), f)
}

// CalendarClass: instance of this type is always passed by reference.
type CalendarClass struct {
	*calendarClass
}

// calendarClass is the struct that's finalized.
type calendarClass struct {
	native unsafe.Pointer
}

var GIRInfoCalendarClass = girepository.MustFind("Gtk", "CalendarClass")
