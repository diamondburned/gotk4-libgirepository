// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeStyleProperties = coreglib.Type(girepository.MustFind("Gtk", "StyleProperties").RegisteredGType())
	GTypeGradient        = coreglib.Type(girepository.MustFind("Gtk", "Gradient").RegisteredGType())
	GTypeSymbolicColor   = coreglib.Type(girepository.MustFind("Gtk", "SymbolicColor").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeStyleProperties, F: marshalStyleProperties},
		coreglib.TypeMarshaler{T: GTypeGradient, F: marshalGradient},
		coreglib.TypeMarshaler{T: GTypeSymbolicColor, F: marshalSymbolicColor},
	})
}

// StylePropertiesOverrides contains methods that are overridable.
type StylePropertiesOverrides struct {
}

func defaultStylePropertiesOverrides(v *StyleProperties) StylePropertiesOverrides {
	return StylePropertiesOverrides{}
}

// StyleProperties provides the storage for style information that is used by
// StyleContext and other StyleProvider implementations.
//
// Before style properties can be stored in GtkStyleProperties, they must be
// registered with gtk_style_properties_register_property().
//
// Unless you are writing a StyleProvider implementation, you are unlikely to
// use this API directly, as gtk_style_context_get() and its variants are the
// preferred way to access styling information from widget implementations and
// theming engine implementations should use the APIs provided by ThemingEngine
// instead.
//
// StyleProperties has been deprecated in GTK 3.16. The CSS machinery does not
// use it anymore and all users of this object have been deprecated.
type StyleProperties struct {
	_ [0]func() // equal guard
	*coreglib.Object

	StyleProvider
}

var (
	_ coreglib.Objector = (*StyleProperties)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*StyleProperties, *StylePropertiesClass, StylePropertiesOverrides](
		GTypeStyleProperties,
		initStylePropertiesClass,
		wrapStyleProperties,
		defaultStylePropertiesOverrides,
	)
}

func initStylePropertiesClass(gclass unsafe.Pointer, overrides StylePropertiesOverrides, classInitFunc func(*StylePropertiesClass)) {
	if classInitFunc != nil {
		class := (*StylePropertiesClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapStyleProperties(obj *coreglib.Object) *StyleProperties {
	return &StyleProperties{
		Object: obj,
		StyleProvider: StyleProvider{
			Object: obj,
		},
	}
}

func marshalStyleProperties(p uintptr) (interface{}, error) {
	return wrapStyleProperties(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Gradient is a boxed type that represents a gradient. It is the result of
// parsing a [gradient expression][gtkcssprovider-gradients]. To obtain the
// gradient represented by a GtkGradient, it has to be resolved with
// gtk_gradient_resolve(), which replaces all symbolic color references by the
// colors they refer to (in a given context) and constructs a #cairo_pattern_t
// value.
//
// It is not normally necessary to deal directly with Gradients, since they are
// mostly used behind the scenes by StyleContext and CssProvider.
//
// Gradient is deprecated. It was used internally by GTKâ€™s CSS engine to
// represent gradients. As its handling is not conforming to modern web
// standards, it is not used anymore. If you want to use gradients in your own
// code, please use Cairo directly.
//
// An instance of this type is always passed by reference.
type Gradient struct {
	*gradient
}

// gradient is the struct that's finalized.
type gradient struct {
	native unsafe.Pointer
}

var GIRInfoGradient = girepository.MustFind("Gtk", "Gradient")

func marshalGradient(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &Gradient{&gradient{(unsafe.Pointer)(b)}}, nil
}

// StylePropertiesClass: instance of this type is always passed by reference.
type StylePropertiesClass struct {
	*stylePropertiesClass
}

// stylePropertiesClass is the struct that's finalized.
type stylePropertiesClass struct {
	native unsafe.Pointer
}

var GIRInfoStylePropertiesClass = girepository.MustFind("Gtk", "StylePropertiesClass")

// SymbolicColor is a boxed type that represents a symbolic color. It is the
// result of parsing a [color expression][gtkcssprovider-symbolic-colors]. To
// obtain the color represented by a GtkSymbolicColor, it has to be resolved
// with gtk_symbolic_color_resolve(), which replaces all symbolic color
// references by the colors they refer to (in a given context) and evaluates
// mix, shade and other expressions, resulting in a RGBA value.
//
// It is not normally necessary to deal directly with SymbolicColors, since they
// are mostly used behind the scenes by StyleContext and CssProvider.
//
// SymbolicColor is deprecated. Symbolic colors are considered an implementation
// detail of GTK+.
//
// An instance of this type is always passed by reference.
type SymbolicColor struct {
	*symbolicColor
}

// symbolicColor is the struct that's finalized.
type symbolicColor struct {
	native unsafe.Pointer
}

var GIRInfoSymbolicColor = girepository.MustFind("Gtk", "SymbolicColor")

func marshalSymbolicColor(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &SymbolicColor{&symbolicColor{(unsafe.Pointer)(b)}}, nil
}
