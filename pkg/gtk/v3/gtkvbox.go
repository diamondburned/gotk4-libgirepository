// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeVBox = coreglib.Type(girepository.MustFind("Gtk", "VBox").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeVBox, F: marshalVBox},
	})
}

// VBoxOverrides contains methods that are overridable.
type VBoxOverrides struct {
}

func defaultVBoxOverrides(v *VBox) VBoxOverrides {
	return VBoxOverrides{}
}

// VBox is a container that organizes child widgets into a single column.
//
// Use the Box packing interface to determine the arrangement, spacing, height,
// and alignment of VBox children.
//
// All children are allocated the same width.
//
// GtkVBox has been deprecated. You can use Box with a Orientable:orientation
// set to GTK_ORIENTATION_VERTICAL instead when calling gtk_box_new(), which is
// a very quick and easy change.
//
// If you have derived your own classes from GtkVBox, you can change the
// inheritance to derive directly from Box, and set the Orientable:orientation
// property to GTK_ORIENTATION_VERTICAL in your instance init function, with a
// call like:
//
//    gtk_orientable_set_orientation (GTK_ORIENTABLE (object),
//                                    GTK_ORIENTATION_VERTICAL);
//
// If you have a grid-like layout composed of nested boxes, and you donâ€™t need
// first-child or last-child styling, the recommendation is to switch to Grid.
// For more information about migrating to Grid, see [Migrating from other
// containers to GtkGrid][gtk-migrating-GtkGrid].
type VBox struct {
	_ [0]func() // equal guard
	Box
}

var (
	_ Containerer       = (*VBox)(nil)
	_ coreglib.Objector = (*VBox)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*VBox, *VBoxClass, VBoxOverrides](
		GTypeVBox,
		initVBoxClass,
		wrapVBox,
		defaultVBoxOverrides,
	)
}

func initVBoxClass(gclass unsafe.Pointer, overrides VBoxOverrides, classInitFunc func(*VBoxClass)) {
	if classInitFunc != nil {
		class := (*VBoxClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapVBox(obj *coreglib.Object) *VBox {
	return &VBox{
		Box: Box{
			Container: Container{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
			Object: obj,
			Orientable: Orientable{
				Object: obj,
			},
		},
	}
}

func marshalVBox(p uintptr) (interface{}, error) {
	return wrapVBox(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// VBoxClass: instance of this type is always passed by reference.
type VBoxClass struct {
	*vBoxClass
}

// vBoxClass is the struct that's finalized.
type vBoxClass struct {
	native unsafe.Pointer
}

var GIRInfoVBoxClass = girepository.MustFind("Gtk", "VBoxClass")
