// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gtk3_EntryCompletion_ConnectNoMatches(gpointer, guintptr);
// extern void _gotk4_gtk3_EntryCompletion_ConnectActionActivated(gpointer, gint, guintptr);
// extern gboolean _gotk4_gtk3_EntryCompletion_ConnectMatchSelected(gpointer, void*, void*, guintptr);
// extern gboolean _gotk4_gtk3_EntryCompletion_ConnectInsertPrefix(gpointer, gchar*, guintptr);
// extern gboolean _gotk4_gtk3_EntryCompletion_ConnectCursorOnMatch(gpointer, void*, void*, guintptr);
import "C"

// GType values.
var (
	GTypeEntryCompletion = coreglib.Type(girepository.MustFind("Gtk", "EntryCompletion").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeEntryCompletion, F: marshalEntryCompletion},
	})
}

// EntryCompletionMatchFunc: function which decides whether the row indicated by
// iter matches a given key, and should be displayed as a possible completion
// for key. Note that key is normalized and case-folded (see g_utf8_normalize()
// and g_utf8_casefold()). If this is not appropriate, match functions have
// access to the unmodified key via gtk_entry_get_text (GTK_ENTRY
// (gtk_entry_completion_get_entry ())).
type EntryCompletionMatchFunc func(completion *EntryCompletion, key string, iter *TreeIter) (ok bool)

// EntryCompletionOverrides contains methods that are overridable.
type EntryCompletionOverrides struct {
}

func defaultEntryCompletionOverrides(v *EntryCompletion) EntryCompletionOverrides {
	return EntryCompletionOverrides{}
}

// EntryCompletion is an auxiliary object to be used in conjunction with Entry
// to provide the completion functionality. It implements the CellLayout
// interface, to allow the user to add extra cells to the TreeView with
// completion matches.
//
// “Completion functionality” means that when the user modifies the text in the
// entry, EntryCompletion checks which rows in the model match the current
// content of the entry, and displays a list of matches. By default, the
// matching is done by comparing the entry text case-insensitively against the
// text column of the model (see gtk_entry_completion_set_text_column()), but
// this can be overridden with a custom match function (see
// gtk_entry_completion_set_match_func()).
//
// When the user selects a completion, the content of the entry is updated. By
// default, the content of the entry is replaced by the text column of the
// model, but this can be overridden by connecting to the
// EntryCompletion::match-selected signal and updating the entry in the signal
// handler. Note that you should return TRUE from the signal handler to suppress
// the default behaviour.
//
// To add completion functionality to an entry, use gtk_entry_set_completion().
//
// In addition to regular completion matches, which will be inserted into the
// entry when they are selected, EntryCompletion also allows to display
// “actions” in the popup window. Their appearance is similar to menuitems, to
// differentiate them clearly from completion strings. When an action is
// selected, the EntryCompletion::action-activated signal is emitted.
//
// GtkEntryCompletion uses a TreeModelFilter model to represent the subset of
// the entire model that is currently matching. While the GtkEntryCompletion
// signals EntryCompletion::match-selected and EntryCompletion::cursor-on-match
// take the original model and an iter pointing to that model as arguments,
// other callbacks and signals (such as CellLayoutDataFuncs or
// CellArea::apply-attributes) will generally take the filter model as argument.
// As long as you are only calling gtk_tree_model_get(), this will make no
// difference to you. If for some reason, you need the original model, use
// gtk_tree_model_filter_get_model(). Don’t forget to use
// gtk_tree_model_filter_convert_iter_to_child_iter() to obtain a matching iter.
type EntryCompletion struct {
	_ [0]func() // equal guard
	*coreglib.Object

	Buildable
	CellLayout
}

var (
	_ coreglib.Objector = (*EntryCompletion)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*EntryCompletion, *EntryCompletionClass, EntryCompletionOverrides](
		GTypeEntryCompletion,
		initEntryCompletionClass,
		wrapEntryCompletion,
		defaultEntryCompletionOverrides,
	)
}

func initEntryCompletionClass(gclass unsafe.Pointer, overrides EntryCompletionOverrides, classInitFunc func(*EntryCompletionClass)) {
	if classInitFunc != nil {
		class := (*EntryCompletionClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapEntryCompletion(obj *coreglib.Object) *EntryCompletion {
	return &EntryCompletion{
		Object: obj,
		Buildable: Buildable{
			Object: obj,
		},
		CellLayout: CellLayout{
			Object: obj,
		},
	}
}

func marshalEntryCompletion(p uintptr) (interface{}, error) {
	return wrapEntryCompletion(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectActionActivated gets emitted when an action is activated.
func (v *EntryCompletion) ConnectActionActivated(f func(index int)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "action-activated", false, unsafe.Pointer(C._gotk4_gtk3_EntryCompletion_ConnectActionActivated), f)
}

// ConnectCursorOnMatch gets emitted when a match from the cursor is on a match
// of the list. The default behaviour is to replace the contents of the entry
// with the contents of the text column in the row pointed to by iter.
//
// Note that model is the model that was passed to
// gtk_entry_completion_set_model().
func (v *EntryCompletion) ConnectCursorOnMatch(f func(model TreeModeller, iter *TreeIter) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "cursor-on-match", false, unsafe.Pointer(C._gotk4_gtk3_EntryCompletion_ConnectCursorOnMatch), f)
}

// ConnectInsertPrefix gets emitted when the inline autocompletion is triggered.
// The default behaviour is to make the entry display the whole prefix and
// select the newly inserted part.
//
// Applications may connect to this signal in order to insert only a smaller
// part of the prefix into the entry - e.g. the entry used in the FileChooser
// inserts only the part of the prefix up to the next '/'.
func (v *EntryCompletion) ConnectInsertPrefix(f func(prefix string) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "insert-prefix", false, unsafe.Pointer(C._gotk4_gtk3_EntryCompletion_ConnectInsertPrefix), f)
}

// ConnectMatchSelected gets emitted when a match from the list is selected. The
// default behaviour is to replace the contents of the entry with the contents
// of the text column in the row pointed to by iter.
//
// Note that model is the model that was passed to
// gtk_entry_completion_set_model().
func (v *EntryCompletion) ConnectMatchSelected(f func(model TreeModeller, iter *TreeIter) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "match-selected", false, unsafe.Pointer(C._gotk4_gtk3_EntryCompletion_ConnectMatchSelected), f)
}

// ConnectNoMatches gets emitted when the filter model has zero number of rows
// in completion_complete method. (In other words when GtkEntryCompletion is out
// of suggestions).
func (v *EntryCompletion) ConnectNoMatches(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "no-matches", false, unsafe.Pointer(C._gotk4_gtk3_EntryCompletion_ConnectNoMatches), f)
}

// EntryCompletionClass: instance of this type is always passed by reference.
type EntryCompletionClass struct {
	*entryCompletionClass
}

// entryCompletionClass is the struct that's finalized.
type entryCompletionClass struct {
	native unsafe.Pointer
}

var GIRInfoEntryCompletionClass = girepository.MustFind("Gtk", "EntryCompletionClass")
