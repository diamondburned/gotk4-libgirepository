// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gtk3_GestureMultiPress_ConnectStopped(gpointer, guintptr);
// extern void _gotk4_gtk3_GestureMultiPress_ConnectReleased(gpointer, gint, gdouble, gdouble, guintptr);
// extern void _gotk4_gtk3_GestureMultiPress_ConnectPressed(gpointer, gint, gdouble, gdouble, guintptr);
import "C"

// GType values.
var (
	GTypeGestureMultiPress = coreglib.Type(girepository.MustFind("Gtk", "GestureMultiPress").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeGestureMultiPress, F: marshalGestureMultiPress},
	})
}

// GestureMultiPress is a Gesture implementation able to recognize multiple
// clicks on a nearby zone, which can be listened for through the
// GestureMultiPress::pressed signal. Whenever time or distance between clicks
// exceed the GTK+ defaults, GestureMultiPress::stopped is emitted, and the
// click counter is reset.
//
// Callers may also restrict the area that is considered valid for a >1
// touch/button press through gtk_gesture_multi_press_set_area(), so any click
// happening outside that area is considered to be a first click of its own.
type GestureMultiPress struct {
	_ [0]func() // equal guard
	GestureSingle
}

var (
	_ Gesturer = (*GestureMultiPress)(nil)
)

func wrapGestureMultiPress(obj *coreglib.Object) *GestureMultiPress {
	return &GestureMultiPress{
		GestureSingle: GestureSingle{
			Gesture: Gesture{
				EventController: EventController{
					Object: obj,
				},
			},
		},
	}
}

func marshalGestureMultiPress(p uintptr) (interface{}, error) {
	return wrapGestureMultiPress(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectPressed: this signal is emitted whenever a button or touch press
// happens.
func (v *GestureMultiPress) ConnectPressed(f func(nPress int, x, y float64)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "pressed", false, unsafe.Pointer(C._gotk4_gtk3_GestureMultiPress_ConnectPressed), f)
}

// ConnectReleased: this signal is emitted when a button or touch is released.
// n_press will report the number of press that is paired to this event, note
// that GestureMultiPress::stopped may have been emitted between the press and
// its release, n_press will only start over at the next press.
func (v *GestureMultiPress) ConnectReleased(f func(nPress int, x, y float64)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "released", false, unsafe.Pointer(C._gotk4_gtk3_GestureMultiPress_ConnectReleased), f)
}

// ConnectStopped: this signal is emitted whenever any time/distance threshold
// has been exceeded.
func (v *GestureMultiPress) ConnectStopped(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "stopped", false, unsafe.Pointer(C._gotk4_gtk3_GestureMultiPress_ConnectStopped), f)
}
