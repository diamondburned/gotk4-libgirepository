// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeContainerCellAccessible = coreglib.Type(girepository.MustFind("Gtk", "ContainerCellAccessible").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeContainerCellAccessible, F: marshalContainerCellAccessible},
	})
}

// ContainerCellAccessibleOverrides contains methods that are overridable.
type ContainerCellAccessibleOverrides struct {
}

func defaultContainerCellAccessibleOverrides(v *ContainerCellAccessible) ContainerCellAccessibleOverrides {
	return ContainerCellAccessibleOverrides{}
}

type ContainerCellAccessible struct {
	_ [0]func() // equal guard
	CellAccessible
}

var (
	_ coreglib.Objector = (*ContainerCellAccessible)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*ContainerCellAccessible, *ContainerCellAccessibleClass, ContainerCellAccessibleOverrides](
		GTypeContainerCellAccessible,
		initContainerCellAccessibleClass,
		wrapContainerCellAccessible,
		defaultContainerCellAccessibleOverrides,
	)
}

func initContainerCellAccessibleClass(gclass unsafe.Pointer, overrides ContainerCellAccessibleOverrides, classInitFunc func(*ContainerCellAccessibleClass)) {
	if classInitFunc != nil {
		class := (*ContainerCellAccessibleClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapContainerCellAccessible(obj *coreglib.Object) *ContainerCellAccessible {
	return &ContainerCellAccessible{
		CellAccessible: CellAccessible{
			Accessible: Accessible{
				AtkObject: atk.AtkObject{
					Object: obj,
				},
			},
			Object: obj,
			Action: atk.Action{
				Object: obj,
			},
			AtkObject: atk.AtkObject{
				Object: obj,
			},
			Component: atk.Component{
				Object: obj,
			},
			TableCell: atk.TableCell{
				AtkObject: atk.AtkObject{
					Object: obj,
				},
			},
		},
	}
}

func marshalContainerCellAccessible(p uintptr) (interface{}, error) {
	return wrapContainerCellAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ContainerCellAccessibleClass: instance of this type is always passed by
// reference.
type ContainerCellAccessibleClass struct {
	*containerCellAccessibleClass
}

// containerCellAccessibleClass is the struct that's finalized.
type containerCellAccessibleClass struct {
	native unsafe.Pointer
}

var GIRInfoContainerCellAccessibleClass = girepository.MustFind("Gtk", "ContainerCellAccessibleClass")
