// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeThemingEngine = coreglib.Type(girepository.MustFind("Gtk", "ThemingEngine").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeThemingEngine, F: marshalThemingEngine},
	})
}

// ThemingEngineOverrides contains methods that are overridable.
type ThemingEngineOverrides struct {
}

func defaultThemingEngineOverrides(v *ThemingEngine) ThemingEngineOverrides {
	return ThemingEngineOverrides{}
}

// ThemingEngine was the object used for rendering themed content in GTK+
// widgets. It used to allow overriding GTK+'s default implementation of
// rendering functions by allowing engines to be loaded as modules.
//
// ThemingEngine has been deprecated in GTK+ 3.14 and will be ignored for
// rendering. The advancements in CSS theming are good enough to allow themers
// to achieve their goals without the need to modify source code.
type ThemingEngine struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*ThemingEngine)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*ThemingEngine, *ThemingEngineClass, ThemingEngineOverrides](
		GTypeThemingEngine,
		initThemingEngineClass,
		wrapThemingEngine,
		defaultThemingEngineOverrides,
	)
}

func initThemingEngineClass(gclass unsafe.Pointer, overrides ThemingEngineOverrides, classInitFunc func(*ThemingEngineClass)) {
	if classInitFunc != nil {
		class := (*ThemingEngineClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapThemingEngine(obj *coreglib.Object) *ThemingEngine {
	return &ThemingEngine{
		Object: obj,
	}
}

func marshalThemingEngine(p uintptr) (interface{}, error) {
	return wrapThemingEngine(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ThemingEngineClass: base class for theming engines.
//
// An instance of this type is always passed by reference.
type ThemingEngineClass struct {
	*themingEngineClass
}

// themingEngineClass is the struct that's finalized.
type themingEngineClass struct {
	native unsafe.Pointer
}

var GIRInfoThemingEngineClass = girepository.MustFind("Gtk", "ThemingEngineClass")
