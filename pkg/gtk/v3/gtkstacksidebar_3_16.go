// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeStackSidebar = coreglib.Type(girepository.MustFind("Gtk", "StackSidebar").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeStackSidebar, F: marshalStackSidebar},
	})
}

// StackSidebarOverrides contains methods that are overridable.
type StackSidebarOverrides struct {
}

func defaultStackSidebarOverrides(v *StackSidebar) StackSidebarOverrides {
	return StackSidebarOverrides{}
}

// StackSidebar enables you to quickly and easily provide a consistent "sidebar"
// object for your user interface.
//
// In order to use a GtkStackSidebar, you simply use a GtkStack to organize your
// UI flow, and add the sidebar to your sidebar area. You can use
// gtk_stack_sidebar_set_stack() to connect the StackSidebar to the Stack.
//
//
// CSS nodes
//
// GtkStackSidebar has a single CSS node with name stacksidebar and style class
// .sidebar.
//
// When circumstances require it, GtkStackSidebar adds the .needs-attention
// style class to the widgets representing the stack pages.
type StackSidebar struct {
	_ [0]func() // equal guard
	Bin
}

var (
	_ Binner = (*StackSidebar)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*StackSidebar, *StackSidebarClass, StackSidebarOverrides](
		GTypeStackSidebar,
		initStackSidebarClass,
		wrapStackSidebar,
		defaultStackSidebarOverrides,
	)
}

func initStackSidebarClass(gclass unsafe.Pointer, overrides StackSidebarOverrides, classInitFunc func(*StackSidebarClass)) {
	if classInitFunc != nil {
		class := (*StackSidebarClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapStackSidebar(obj *coreglib.Object) *StackSidebar {
	return &StackSidebar{
		Bin: Bin{
			Container: Container{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalStackSidebar(p uintptr) (interface{}, error) {
	return wrapStackSidebar(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
