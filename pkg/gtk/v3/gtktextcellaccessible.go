// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeTextCellAccessible = coreglib.Type(girepository.MustFind("Gtk", "TextCellAccessible").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeTextCellAccessible, F: marshalTextCellAccessible},
	})
}

// TextCellAccessibleOverrides contains methods that are overridable.
type TextCellAccessibleOverrides struct {
}

func defaultTextCellAccessibleOverrides(v *TextCellAccessible) TextCellAccessibleOverrides {
	return TextCellAccessibleOverrides{}
}

type TextCellAccessible struct {
	_ [0]func() // equal guard
	RendererCellAccessible

	*coreglib.Object
	atk.AtkObject
	atk.Text
}

var (
	_ coreglib.Objector = (*TextCellAccessible)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*TextCellAccessible, *TextCellAccessibleClass, TextCellAccessibleOverrides](
		GTypeTextCellAccessible,
		initTextCellAccessibleClass,
		wrapTextCellAccessible,
		defaultTextCellAccessibleOverrides,
	)
}

func initTextCellAccessibleClass(gclass unsafe.Pointer, overrides TextCellAccessibleOverrides, classInitFunc func(*TextCellAccessibleClass)) {
	if classInitFunc != nil {
		class := (*TextCellAccessibleClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapTextCellAccessible(obj *coreglib.Object) *TextCellAccessible {
	return &TextCellAccessible{
		RendererCellAccessible: RendererCellAccessible{
			CellAccessible: CellAccessible{
				Accessible: Accessible{
					AtkObject: atk.AtkObject{
						Object: obj,
					},
				},
				Object: obj,
				Action: atk.Action{
					Object: obj,
				},
				AtkObject: atk.AtkObject{
					Object: obj,
				},
				Component: atk.Component{
					Object: obj,
				},
				TableCell: atk.TableCell{
					AtkObject: atk.AtkObject{
						Object: obj,
					},
				},
			},
		},
		Object: obj,
		AtkObject: atk.AtkObject{
			Object: obj,
		},
		Text: atk.Text{
			Object: obj,
		},
	}
}

func marshalTextCellAccessible(p uintptr) (interface{}, error) {
	return wrapTextCellAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// TextCellAccessibleClass: instance of this type is always passed by reference.
type TextCellAccessibleClass struct {
	*textCellAccessibleClass
}

// textCellAccessibleClass is the struct that's finalized.
type textCellAccessibleClass struct {
	native unsafe.Pointer
}

var GIRInfoTextCellAccessibleClass = girepository.MustFind("Gtk", "TextCellAccessibleClass")
