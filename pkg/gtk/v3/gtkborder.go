// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeBorder = coreglib.Type(girepository.MustFind("Gtk", "Border").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeBorder, F: marshalBorder},
	})
}

// Border: struct that specifies a border around a rectangular area that can be
// of different width on each side.
//
// An instance of this type is always passed by reference.
type Border struct {
	*border
}

// border is the struct that's finalized.
type border struct {
	native unsafe.Pointer
}

var GIRInfoBorder = girepository.MustFind("Gtk", "Border")

func marshalBorder(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &Border{&border{(unsafe.Pointer)(b)}}, nil
}

// Left: width of the left border.
func (b *Border) Left() int16 {
	offset := GIRInfoBorder.StructFieldOffset("left")
	valptr := (*int16)(unsafe.Add(b.native, offset))
	var _v int16 // out
	_v = int16(*valptr)
	return _v
}

// Right: width of the right border.
func (b *Border) Right() int16 {
	offset := GIRInfoBorder.StructFieldOffset("right")
	valptr := (*int16)(unsafe.Add(b.native, offset))
	var _v int16 // out
	_v = int16(*valptr)
	return _v
}

// Top: width of the top border.
func (b *Border) Top() int16 {
	offset := GIRInfoBorder.StructFieldOffset("top")
	valptr := (*int16)(unsafe.Add(b.native, offset))
	var _v int16 // out
	_v = int16(*valptr)
	return _v
}

// Bottom: width of the bottom border.
func (b *Border) Bottom() int16 {
	offset := GIRInfoBorder.StructFieldOffset("bottom")
	valptr := (*int16)(unsafe.Add(b.native, offset))
	var _v int16 // out
	_v = int16(*valptr)
	return _v
}

// Left: width of the left border.
func (b *Border) SetLeft(left int16) {
	offset := GIRInfoBorder.StructFieldOffset("left")
	valptr := (*C.gint16)(unsafe.Add(b.native, offset))
	*valptr = C.gint16(left)
}

// Right: width of the right border.
func (b *Border) SetRight(right int16) {
	offset := GIRInfoBorder.StructFieldOffset("right")
	valptr := (*C.gint16)(unsafe.Add(b.native, offset))
	*valptr = C.gint16(right)
}

// Top: width of the top border.
func (b *Border) SetTop(top int16) {
	offset := GIRInfoBorder.StructFieldOffset("top")
	valptr := (*C.gint16)(unsafe.Add(b.native, offset))
	*valptr = C.gint16(top)
}

// Bottom: width of the bottom border.
func (b *Border) SetBottom(bottom int16) {
	offset := GIRInfoBorder.StructFieldOffset("bottom")
	valptr := (*C.gint16)(unsafe.Add(b.native, offset))
	*valptr = C.gint16(bottom)
}
