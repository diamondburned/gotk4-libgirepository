// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gtk3_CellEditable_ConnectRemoveWidget(gpointer, guintptr);
// extern void _gotk4_gtk3_CellEditable_ConnectEditingDone(gpointer, guintptr);
import "C"

// GType values.
var (
	GTypeCellEditable = coreglib.Type(girepository.MustFind("Gtk", "CellEditable").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeCellEditable, F: marshalCellEditable},
	})
}

// CellEditableOverrider contains methods that are overridable.
type CellEditableOverrider interface {
}

// CellEditable interface must be implemented for widgets to be usable to edit
// the contents of a TreeView cell. It provides a way to specify how temporary
// widgets should be configured for editing, get the new value, etc.
//
// CellEditable wraps an interface. This means the user can get the
// underlying type by calling Cast().
type CellEditable struct {
	_ [0]func() // equal guard
	Widget
}

var (
	_ Widgetter = (*CellEditable)(nil)
)

// CellEditabler describes CellEditable's interface methods.
type CellEditabler interface {
	coreglib.Objector

	baseCellEditable() *CellEditable
}

var _ CellEditabler = (*CellEditable)(nil)

func ifaceInitCellEditabler(gifacePtr, data C.gpointer) {
}

func wrapCellEditable(obj *coreglib.Object) *CellEditable {
	return &CellEditable{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			ImplementorIface: atk.ImplementorIface{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
		},
	}
}

func marshalCellEditable(p uintptr) (interface{}, error) {
	return wrapCellEditable(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *CellEditable) baseCellEditable() *CellEditable {
	return v
}

// BaseCellEditable returns the underlying base object.
func BaseCellEditable(obj CellEditabler) *CellEditable {
	return obj.baseCellEditable()
}

// ConnectEditingDone: this signal is a sign for the cell renderer to update its
// value from the cell_editable.
//
// Implementations of CellEditable are responsible for emitting this signal when
// they are done editing, e.g. Entry emits this signal when the user presses
// Enter. Typical things to do in a handler for ::editing-done are to capture
// the edited value, disconnect the cell_editable from signals on the
// CellRenderer, etc.
//
// gtk_cell_editable_editing_done() is a convenience method for emitting
// CellEditable::editing-done.
func (v *CellEditable) ConnectEditingDone(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "editing-done", false, unsafe.Pointer(C._gotk4_gtk3_CellEditable_ConnectEditingDone), f)
}

// ConnectRemoveWidget: this signal is meant to indicate that the cell is
// finished editing, and the cell_editable widget is being removed and may
// subsequently be destroyed.
//
// Implementations of CellEditable are responsible for emitting this signal when
// they are done editing. It must be emitted after the
// CellEditable::editing-done signal, to give the cell renderer a chance to
// update the cell's value before the widget is removed.
//
// gtk_cell_editable_remove_widget() is a convenience method for emitting
// CellEditable::remove-widget.
func (v *CellEditable) ConnectRemoveWidget(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "remove-widget", false, unsafe.Pointer(C._gotk4_gtk3_CellEditable_ConnectRemoveWidget), f)
}

// CellEditableIface: instance of this type is always passed by reference.
type CellEditableIface struct {
	*cellEditableIface
}

// cellEditableIface is the struct that's finalized.
type cellEditableIface struct {
	native unsafe.Pointer
}

var GIRInfoCellEditableIface = girepository.MustFind("Gtk", "CellEditableIface")
