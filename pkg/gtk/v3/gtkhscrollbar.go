// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeHScrollbar = coreglib.Type(girepository.MustFind("Gtk", "HScrollbar").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeHScrollbar, F: marshalHScrollbar},
	})
}

// HScrollbarOverrides contains methods that are overridable.
type HScrollbarOverrides struct {
}

func defaultHScrollbarOverrides(v *HScrollbar) HScrollbarOverrides {
	return HScrollbarOverrides{}
}

// HScrollbar widget is a widget arranged horizontally creating a scrollbar. See
// Scrollbar for details on scrollbars. Adjustment pointers may be added to
// handle the adjustment of the scrollbar or it may be left NULL in which case
// one will be created for you. See Scrollbar for a description of what the
// fields in an adjustment represent for a scrollbar.
//
// GtkHScrollbar has been deprecated, use Scrollbar instead.
type HScrollbar struct {
	_ [0]func() // equal guard
	Scrollbar
}

var (
	_ Ranger = (*HScrollbar)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*HScrollbar, *HScrollbarClass, HScrollbarOverrides](
		GTypeHScrollbar,
		initHScrollbarClass,
		wrapHScrollbar,
		defaultHScrollbarOverrides,
	)
}

func initHScrollbarClass(gclass unsafe.Pointer, overrides HScrollbarOverrides, classInitFunc func(*HScrollbarClass)) {
	if classInitFunc != nil {
		class := (*HScrollbarClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapHScrollbar(obj *coreglib.Object) *HScrollbar {
	return &HScrollbar{
		Scrollbar: Scrollbar{
			Range: Range{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
				Object: obj,
				Orientable: Orientable{
					Object: obj,
				},
			},
		},
	}
}

func marshalHScrollbar(p uintptr) (interface{}, error) {
	return wrapHScrollbar(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// HScrollbarClass: instance of this type is always passed by reference.
type HScrollbarClass struct {
	*hScrollbarClass
}

// hScrollbarClass is the struct that's finalized.
type hScrollbarClass struct {
	native unsafe.Pointer
}

var GIRInfoHScrollbarClass = girepository.MustFind("Gtk", "HScrollbarClass")
