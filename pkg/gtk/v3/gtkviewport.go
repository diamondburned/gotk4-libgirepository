// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeViewport = coreglib.Type(girepository.MustFind("Gtk", "Viewport").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeViewport, F: marshalViewport},
	})
}

// ViewportOverrides contains methods that are overridable.
type ViewportOverrides struct {
}

func defaultViewportOverrides(v *Viewport) ViewportOverrides {
	return ViewportOverrides{}
}

// Viewport widget acts as an adaptor class, implementing scrollability for
// child widgets that lack their own scrolling capabilities. Use GtkViewport to
// scroll child widgets such as Grid, Box, and so on.
//
// If a widget has native scrolling abilities, such as TextView, TreeView or
// IconView, it can be added to a ScrolledWindow with gtk_container_add(). If a
// widget does not, you must first add the widget to a Viewport, then add the
// viewport to the scrolled window. gtk_container_add() does this automatically
// if a child that does not implement Scrollable is added to a ScrolledWindow,
// so you can ignore the presence of the viewport.
//
// The GtkViewport will start scrolling content only if allocated less than the
// child widgetâ€™s minimum size in a given orientation.
//
//
// CSS nodes
//
// GtkViewport has a single CSS node with name viewport.
type Viewport struct {
	_ [0]func() // equal guard
	Bin

	*coreglib.Object
	Scrollable
}

var (
	_ Binner            = (*Viewport)(nil)
	_ coreglib.Objector = (*Viewport)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*Viewport, *ViewportClass, ViewportOverrides](
		GTypeViewport,
		initViewportClass,
		wrapViewport,
		defaultViewportOverrides,
	)
}

func initViewportClass(gclass unsafe.Pointer, overrides ViewportOverrides, classInitFunc func(*ViewportClass)) {
	if classInitFunc != nil {
		class := (*ViewportClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapViewport(obj *coreglib.Object) *Viewport {
	return &Viewport{
		Bin: Bin{
			Container: Container{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
		},
		Object: obj,
		Scrollable: Scrollable{
			Object: obj,
		},
	}
}

func marshalViewport(p uintptr) (interface{}, error) {
	return wrapViewport(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ViewportClass: instance of this type is always passed by reference.
type ViewportClass struct {
	*viewportClass
}

// viewportClass is the struct that's finalized.
type viewportClass struct {
	native unsafe.Pointer
}

var GIRInfoViewportClass = girepository.MustFind("Gtk", "ViewportClass")
