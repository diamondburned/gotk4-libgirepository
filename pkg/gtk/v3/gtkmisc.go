// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeMisc = coreglib.Type(girepository.MustFind("Gtk", "Misc").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeMisc, F: marshalMisc},
	})
}

// MiscOverrides contains methods that are overridable.
type MiscOverrides struct {
}

func defaultMiscOverrides(v *Misc) MiscOverrides {
	return MiscOverrides{}
}

// Misc widget is an abstract widget which is not useful itself, but is used to
// derive subclasses which have alignment and padding attributes.
//
// The horizontal and vertical padding attributes allows extra space to be added
// around the widget.
//
// The horizontal and vertical alignment attributes enable the widget to be
// positioned within its allocated area. Note that if the widget is added to a
// container in such a way that it expands automatically to fill its allocated
// area, the alignment settings will not alter the widget's position.
//
// Note that the desired effect can in most cases be achieved by using the
// Widget:halign, Widget:valign and Widget:margin properties on the child
// widget, so GtkMisc should not be used in new code. To reflect this fact, all
// Misc API has been deprecated.
type Misc struct {
	_ [0]func() // equal guard
	Widget
}

var (
	_ Widgetter = (*Misc)(nil)
)

// Miscer describes types inherited from class Misc.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type Miscer interface {
	coreglib.Objector
	baseMisc() *Misc
}

var _ Miscer = (*Misc)(nil)

func init() {
	coreglib.RegisterClassInfo[*Misc, *MiscClass, MiscOverrides](
		GTypeMisc,
		initMiscClass,
		wrapMisc,
		defaultMiscOverrides,
	)
}

func initMiscClass(gclass unsafe.Pointer, overrides MiscOverrides, classInitFunc func(*MiscClass)) {
	if classInitFunc != nil {
		class := (*MiscClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapMisc(obj *coreglib.Object) *Misc {
	return &Misc{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			ImplementorIface: atk.ImplementorIface{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
		},
	}
}

func marshalMisc(p uintptr) (interface{}, error) {
	return wrapMisc(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *Misc) baseMisc() *Misc {
	return v
}

// BaseMisc returns the underlying base object.
func BaseMisc(obj Miscer) *Misc {
	return obj.baseMisc()
}

// MiscClass: instance of this type is always passed by reference.
type MiscClass struct {
	*miscClass
}

// miscClass is the struct that's finalized.
type miscClass struct {
	native unsafe.Pointer
}

var GIRInfoMiscClass = girepository.MustFind("Gtk", "MiscClass")
