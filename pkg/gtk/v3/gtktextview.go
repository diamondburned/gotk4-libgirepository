// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"fmt"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gtk3_TextView_ConnectToggleOverwrite(gpointer, guintptr);
// extern void _gotk4_gtk3_TextView_ConnectToggleCursorVisible(gpointer, guintptr);
// extern void _gotk4_gtk3_TextView_ConnectSetAnchor(gpointer, guintptr);
// extern void _gotk4_gtk3_TextView_ConnectSelectAll(gpointer, gboolean, guintptr);
// extern void _gotk4_gtk3_TextView_ConnectPreeditChanged(gpointer, gchar*, guintptr);
// extern void _gotk4_gtk3_TextView_ConnectPopulatePopup(gpointer, void*, guintptr);
// extern void _gotk4_gtk3_TextView_ConnectPasteClipboard(gpointer, guintptr);
// extern void _gotk4_gtk3_TextView_ConnectInsertEmoji(gpointer, guintptr);
// extern void _gotk4_gtk3_TextView_ConnectInsertAtCursor(gpointer, gchar*, guintptr);
// extern void _gotk4_gtk3_TextView_ConnectCutClipboard(gpointer, guintptr);
// extern void _gotk4_gtk3_TextView_ConnectCopyClipboard(gpointer, guintptr);
// extern void _gotk4_gtk3_TextView_ConnectBackspace(gpointer, guintptr);
import "C"

// GType values.
var (
	GTypeTextViewLayer  = coreglib.Type(girepository.MustFind("Gtk", "TextViewLayer").RegisteredGType())
	GTypeTextWindowType = coreglib.Type(girepository.MustFind("Gtk", "TextWindowType").RegisteredGType())
	GTypeTextView       = coreglib.Type(girepository.MustFind("Gtk", "TextView").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeTextViewLayer, F: marshalTextViewLayer},
		coreglib.TypeMarshaler{T: GTypeTextWindowType, F: marshalTextWindowType},
		coreglib.TypeMarshaler{T: GTypeTextView, F: marshalTextView},
	})
}

// TEXT_VIEW_PRIORITY_VALIDATE: priority at which the text view validates
// onscreen lines in an idle job in the background.
const TEXT_VIEW_PRIORITY_VALIDATE = 125

// TextViewLayer: used to reference the layers of TextView for the purpose of
// customized drawing with the ::draw_layer vfunc.
type TextViewLayer C.gint

const (
	// TextViewLayerBelow: old deprecated layer, use
	// GTK_TEXT_VIEW_LAYER_BELOW_TEXT instead.
	TextViewLayerBelow TextViewLayer = iota
	// TextViewLayerAbove: old deprecated layer, use
	// GTK_TEXT_VIEW_LAYER_ABOVE_TEXT instead.
	TextViewLayerAbove
	// TextViewLayerBelowText: layer rendered below the text (but above the
	// background). Since: 3.20.
	TextViewLayerBelowText
	// TextViewLayerAboveText: layer rendered above the text. Since: 3.20.
	TextViewLayerAboveText
)

func marshalTextViewLayer(p uintptr) (interface{}, error) {
	return TextViewLayer(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for TextViewLayer.
func (t TextViewLayer) String() string {
	switch t {
	case TextViewLayerBelow:
		return "Below"
	case TextViewLayerAbove:
		return "Above"
	case TextViewLayerBelowText:
		return "BelowText"
	case TextViewLayerAboveText:
		return "AboveText"
	default:
		return fmt.Sprintf("TextViewLayer(%d)", t)
	}
}

// TextWindowType: used to reference the parts of TextView.
type TextWindowType C.gint

const (
	// TextWindowPrivate: invalid value, used as a marker.
	TextWindowPrivate TextWindowType = iota
	// TextWindowWidget: window that floats over scrolling areas.
	TextWindowWidget
	// TextWindowText: scrollable text window.
	TextWindowText
	// TextWindowLeft: left side border window.
	TextWindowLeft
	// TextWindowRight: right side border window.
	TextWindowRight
	// TextWindowTop: top border window.
	TextWindowTop
	// TextWindowBottom: bottom border window.
	TextWindowBottom
)

func marshalTextWindowType(p uintptr) (interface{}, error) {
	return TextWindowType(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for TextWindowType.
func (t TextWindowType) String() string {
	switch t {
	case TextWindowPrivate:
		return "Private"
	case TextWindowWidget:
		return "Widget"
	case TextWindowText:
		return "Text"
	case TextWindowLeft:
		return "Left"
	case TextWindowRight:
		return "Right"
	case TextWindowTop:
		return "Top"
	case TextWindowBottom:
		return "Bottom"
	default:
		return fmt.Sprintf("TextWindowType(%d)", t)
	}
}

// TextViewOverrides contains methods that are overridable.
type TextViewOverrides struct {
}

func defaultTextViewOverrides(v *TextView) TextViewOverrides {
	return TextViewOverrides{}
}

// TextView: you may wish to begin by reading the [text widget conceptual
// overview][TextWidget] which gives an overview of all the objects and data
// types related to the text widget and how they work together.
//
// CSS nodes
//
//    textview.view
//    ├── border.top
//    ├── border.left
//    ├── text
//    │   ╰── [selection]
//    ├── border.right
//    ├── border.bottom
//    ╰── [window.popup]
//
// GtkTextView has a main css node with name textview and style class .view, and
// subnodes for each of the border windows, and the main text area, with names
// border and text, respectively. The border nodes each get one of the style
// classes .left, .right, .top or .bottom.
//
// A node representing the selection will appear below the text node.
//
// If a context menu is opened, the window node will appear as a subnode of the
// main node.
type TextView struct {
	_ [0]func() // equal guard
	Container

	*coreglib.Object
	Scrollable
}

var (
	_ Containerer       = (*TextView)(nil)
	_ coreglib.Objector = (*TextView)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*TextView, *TextViewClass, TextViewOverrides](
		GTypeTextView,
		initTextViewClass,
		wrapTextView,
		defaultTextViewOverrides,
	)
}

func initTextViewClass(gclass unsafe.Pointer, overrides TextViewOverrides, classInitFunc func(*TextViewClass)) {
	if classInitFunc != nil {
		class := (*TextViewClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapTextView(obj *coreglib.Object) *TextView {
	return &TextView{
		Container: Container{
			Widget: Widget{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				ImplementorIface: atk.ImplementorIface{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
			},
		},
		Object: obj,
		Scrollable: Scrollable{
			Object: obj,
		},
	}
}

func marshalTextView(p uintptr) (interface{}, error) {
	return wrapTextView(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectBackspace signal is a [keybinding signal][GtkBindingSignal] which gets
// emitted when the user asks for it.
//
// The default bindings for this signal are Backspace and Shift-Backspace.
func (v *TextView) ConnectBackspace(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "backspace", false, unsafe.Pointer(C._gotk4_gtk3_TextView_ConnectBackspace), f)
}

// ConnectCopyClipboard signal is a [keybinding signal][GtkBindingSignal] which
// gets emitted to copy the selection to the clipboard.
//
// The default bindings for this signal are Ctrl-c and Ctrl-Insert.
func (v *TextView) ConnectCopyClipboard(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "copy-clipboard", false, unsafe.Pointer(C._gotk4_gtk3_TextView_ConnectCopyClipboard), f)
}

// ConnectCutClipboard signal is a [keybinding signal][GtkBindingSignal] which
// gets emitted to cut the selection to the clipboard.
//
// The default bindings for this signal are Ctrl-x and Shift-Delete.
func (v *TextView) ConnectCutClipboard(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "cut-clipboard", false, unsafe.Pointer(C._gotk4_gtk3_TextView_ConnectCutClipboard), f)
}

// ConnectInsertAtCursor signal is a [keybinding signal][GtkBindingSignal] which
// gets emitted when the user initiates the insertion of a fixed string at the
// cursor.
//
// This signal has no default bindings.
func (v *TextView) ConnectInsertAtCursor(f func(str string)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "insert-at-cursor", false, unsafe.Pointer(C._gotk4_gtk3_TextView_ConnectInsertAtCursor), f)
}

// ConnectInsertEmoji signal is a [keybinding signal][GtkBindingSignal] which
// gets emitted to present the Emoji chooser for the text_view.
//
// The default bindings for this signal are Ctrl-. and Ctrl-;.
func (v *TextView) ConnectInsertEmoji(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "insert-emoji", false, unsafe.Pointer(C._gotk4_gtk3_TextView_ConnectInsertEmoji), f)
}

// ConnectPasteClipboard signal is a [keybinding signal][GtkBindingSignal] which
// gets emitted to paste the contents of the clipboard into the text view.
//
// The default bindings for this signal are Ctrl-v and Shift-Insert.
func (v *TextView) ConnectPasteClipboard(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "paste-clipboard", false, unsafe.Pointer(C._gotk4_gtk3_TextView_ConnectPasteClipboard), f)
}

// ConnectPopulatePopup signal gets emitted before showing the context menu of
// the text view.
//
// If you need to add items to the context menu, connect to this signal and
// append your items to the popup, which will be a Menu in this case.
//
// If TextView:populate-all is TRUE, this signal will also be emitted to
// populate touch popups. In this case, popup will be a different container,
// e.g. a Toolbar.
//
// The signal handler should not make assumptions about the type of widget, but
// check whether popup is a Menu or Toolbar or another kind of container.
func (v *TextView) ConnectPopulatePopup(f func(popup Widgetter)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "populate-popup", false, unsafe.Pointer(C._gotk4_gtk3_TextView_ConnectPopulatePopup), f)
}

// ConnectPreeditChanged: if an input method is used, the typed text will not
// immediately be committed to the buffer. So if you are interested in the text,
// connect to this signal.
//
// This signal is only emitted if the text at the given position is actually
// editable.
func (v *TextView) ConnectPreeditChanged(f func(preedit string)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "preedit-changed", false, unsafe.Pointer(C._gotk4_gtk3_TextView_ConnectPreeditChanged), f)
}

// ConnectSelectAll signal is a [keybinding signal][GtkBindingSignal] which gets
// emitted to select or unselect the complete contents of the text view.
//
// The default bindings for this signal are Ctrl-a and Ctrl-/ for selecting and
// Shift-Ctrl-a and Ctrl-\ for unselecting.
func (v *TextView) ConnectSelectAll(f func(sel bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "select-all", false, unsafe.Pointer(C._gotk4_gtk3_TextView_ConnectSelectAll), f)
}

// ConnectSetAnchor signal is a [keybinding signal][GtkBindingSignal] which gets
// emitted when the user initiates setting the "anchor" mark. The "anchor" mark
// gets placed at the same position as the "insert" mark.
//
// This signal has no default bindings.
func (v *TextView) ConnectSetAnchor(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "set-anchor", false, unsafe.Pointer(C._gotk4_gtk3_TextView_ConnectSetAnchor), f)
}

// ConnectToggleCursorVisible signal is a [keybinding signal][GtkBindingSignal]
// which gets emitted to toggle the TextView:cursor-visible property.
//
// The default binding for this signal is F7.
func (v *TextView) ConnectToggleCursorVisible(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "toggle-cursor-visible", false, unsafe.Pointer(C._gotk4_gtk3_TextView_ConnectToggleCursorVisible), f)
}

// ConnectToggleOverwrite signal is a [keybinding signal][GtkBindingSignal]
// which gets emitted to toggle the overwrite mode of the text view.
//
// The default bindings for this signal is Insert.
func (v *TextView) ConnectToggleOverwrite(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "toggle-overwrite", false, unsafe.Pointer(C._gotk4_gtk3_TextView_ConnectToggleOverwrite), f)
}

// TextViewClass: instance of this type is always passed by reference.
type TextViewClass struct {
	*textViewClass
}

// textViewClass is the struct that's finalized.
type textViewClass struct {
	native unsafe.Pointer
}

var GIRInfoTextViewClass = girepository.MustFind("Gtk", "TextViewClass")
