// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeScrollbar = coreglib.Type(girepository.MustFind("Gtk", "Scrollbar").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeScrollbar, F: marshalScrollbar},
	})
}

// ScrollbarOverrides contains methods that are overridable.
type ScrollbarOverrides struct {
}

func defaultScrollbarOverrides(v *Scrollbar) ScrollbarOverrides {
	return ScrollbarOverrides{}
}

// Scrollbar widget is a horizontal or vertical scrollbar, depending on the
// value of the Orientable:orientation property.
//
// Its position and movement are controlled by the adjustment that is passed to
// or created by gtk_scrollbar_new(). See Adjustment for more details. The
// Adjustment:value field sets the position of the thumb and must be between
// Adjustment:lower and Adjustment:upper - Adjustment:page-size. The
// Adjustment:page-size represents the size of the visible scrollable area. The
// fields Adjustment:step-increment and Adjustment:page-increment fields are
// added to or subtracted from the Adjustment:value when the user asks to move
// by a step (using e.g. the cursor arrow keys or, if present, the stepper
// buttons) or by a page (using e.g. the Page Down/Up keys).
//
// CSS nodes
//
//    scrollbar[.fine-tune]
//    ╰── contents
//        ├── [button.up]
//        ├── [button.down]
//        ├── trough
//        │   ╰── slider
//        ├── [button.up]
//        ╰── [button.down]
//
// GtkScrollbar has a main CSS node with name scrollbar and a subnode for its
// contents, with subnodes named trough and slider.
//
// The main node gets the style class .fine-tune added when the scrollbar is in
// 'fine-tuning' mode.
//
// If steppers are enabled, they are represented by up to four additional
// subnodes with name button. These get the style classes .up and .down to
// indicate in which direction they are moving.
//
// Other style classes that may be added to scrollbars inside ScrolledWindow
// include the positional classes (.left, .right, .top, .bottom) and style
// classes related to overlay scrolling (.overlay-indicator, .dragging,
// .hovering).
type Scrollbar struct {
	_ [0]func() // equal guard
	Range
}

var (
	_ Ranger = (*Scrollbar)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*Scrollbar, *ScrollbarClass, ScrollbarOverrides](
		GTypeScrollbar,
		initScrollbarClass,
		wrapScrollbar,
		defaultScrollbarOverrides,
	)
}

func initScrollbarClass(gclass unsafe.Pointer, overrides ScrollbarOverrides, classInitFunc func(*ScrollbarClass)) {
	if classInitFunc != nil {
		class := (*ScrollbarClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapScrollbar(obj *coreglib.Object) *Scrollbar {
	return &Scrollbar{
		Range: Range{
			Widget: Widget{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				ImplementorIface: atk.ImplementorIface{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
			},
			Object: obj,
			Orientable: Orientable{
				Object: obj,
			},
		},
	}
}

func marshalScrollbar(p uintptr) (interface{}, error) {
	return wrapScrollbar(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ScrollbarClass: instance of this type is always passed by reference.
type ScrollbarClass struct {
	*scrollbarClass
}

// scrollbarClass is the struct that's finalized.
type scrollbarClass struct {
	native unsafe.Pointer
}

var GIRInfoScrollbarClass = girepository.MustFind("Gtk", "ScrollbarClass")
