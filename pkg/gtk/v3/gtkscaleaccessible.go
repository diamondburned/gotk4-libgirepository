// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeScaleAccessible = coreglib.Type(girepository.MustFind("Gtk", "ScaleAccessible").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeScaleAccessible, F: marshalScaleAccessible},
	})
}

// ScaleAccessibleOverrides contains methods that are overridable.
type ScaleAccessibleOverrides struct {
}

func defaultScaleAccessibleOverrides(v *ScaleAccessible) ScaleAccessibleOverrides {
	return ScaleAccessibleOverrides{}
}

type ScaleAccessible struct {
	_ [0]func() // equal guard
	RangeAccessible
}

var (
	_ coreglib.Objector = (*ScaleAccessible)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*ScaleAccessible, *ScaleAccessibleClass, ScaleAccessibleOverrides](
		GTypeScaleAccessible,
		initScaleAccessibleClass,
		wrapScaleAccessible,
		defaultScaleAccessibleOverrides,
	)
}

func initScaleAccessibleClass(gclass unsafe.Pointer, overrides ScaleAccessibleOverrides, classInitFunc func(*ScaleAccessibleClass)) {
	if classInitFunc != nil {
		class := (*ScaleAccessibleClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapScaleAccessible(obj *coreglib.Object) *ScaleAccessible {
	return &ScaleAccessible{
		RangeAccessible: RangeAccessible{
			WidgetAccessible: WidgetAccessible{
				Accessible: Accessible{
					AtkObject: atk.AtkObject{
						Object: obj,
					},
				},
				Component: atk.Component{
					Object: obj,
				},
			},
			Value: atk.Value{
				Object: obj,
			},
		},
	}
}

func marshalScaleAccessible(p uintptr) (interface{}, error) {
	return wrapScaleAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ScaleAccessibleClass: instance of this type is always passed by reference.
type ScaleAccessibleClass struct {
	*scaleAccessibleClass
}

// scaleAccessibleClass is the struct that's finalized.
type scaleAccessibleClass struct {
	native unsafe.Pointer
}

var GIRInfoScaleAccessibleClass = girepository.MustFind("Gtk", "ScaleAccessibleClass")
