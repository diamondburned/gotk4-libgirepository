// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypePopoverMenu = coreglib.Type(girepository.MustFind("Gtk", "PopoverMenu").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypePopoverMenu, F: marshalPopoverMenu},
	})
}

// PopoverMenuOverrides contains methods that are overridable.
type PopoverMenuOverrides struct {
}

func defaultPopoverMenuOverrides(v *PopoverMenu) PopoverMenuOverrides {
	return PopoverMenuOverrides{}
}

// PopoverMenu is a subclass of Popover that treats its children like menus and
// allows switching between them. It is meant to be used primarily together with
// ModelButton, but any widget can be used, such as SpinButton or Scale. In this
// respect, GtkPopoverMenu is more flexible than popovers that are created from
// a Model with gtk_popover_new_from_model().
//
// To add a child as a submenu, set the PopoverMenu:submenu child property to
// the name of the submenu. To let the user open this submenu, add a ModelButton
// whose ModelButton:menu-name property is set to the name you've given to the
// submenu.
//
// By convention, the first child of a submenu should be a ModelButton to switch
// back to the parent menu. Such a button should use the ModelButton:inverted
// and ModelButton:centered properties to achieve a title-like appearance and
// place the submenu indicator at the opposite side. To switch back to the main
// menu, use "main" as the menu name.
//
// Example
//
//    <object class="GtkPopoverMenu">
//      <child>
//        <object class="GtkBox">
//          <property name="visible">True</property>
//          <property name="margin">10</property>
//          <child>
//            <object class="GtkModelButton">
//              <property name="visible">True</property>
//              <property name="action-name">win.frob</property>
//              <property name="text" translatable="yes">Frob</property>
//            </object>
//          </child>
//          <child>
//            <object class="GtkModelButton">
//              <property name="visible">True</property>
//              <property name="menu-name">more</property>
//              <property name="text" translatable="yes">More</property>
//            </object>
//          </child>
//        </object>
//      </child>
//      <child>
//        <object class="GtkBox">
//          <property name="visible">True</property>
//          <property name="margin">10</property>
//          <child>
//            <object class="GtkModelButton">
//              <property name="visible">True</property>
//              <property name="action-name">win.foo</property>
//              <property name="text" translatable="yes">Foo</property>
//            </object>
//          </child>
//          <child>
//            <object class="GtkModelButton">
//              <property name="visible">True</property>
//              <property name="action-name">win.bar</property>
//              <property name="text" translatable="yes">Bar</property>
//            </object>
//          </child>
//        </object>
//        <packing>
//          <property name="submenu">more</property>
//        </packing>
//      </child>
//    </object>
//
// Just like normal popovers created using gtk_popover_new_from_model,
// PopoverMenu instances have a single css node called "popover" and get the
// .menu style class.
type PopoverMenu struct {
	_ [0]func() // equal guard
	Popover
}

var (
	_ Binner = (*PopoverMenu)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*PopoverMenu, *PopoverMenuClass, PopoverMenuOverrides](
		GTypePopoverMenu,
		initPopoverMenuClass,
		wrapPopoverMenu,
		defaultPopoverMenuOverrides,
	)
}

func initPopoverMenuClass(gclass unsafe.Pointer, overrides PopoverMenuOverrides, classInitFunc func(*PopoverMenuClass)) {
	if classInitFunc != nil {
		class := (*PopoverMenuClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapPopoverMenu(obj *coreglib.Object) *PopoverMenu {
	return &PopoverMenu{
		Popover: Popover{
			Bin: Bin{
				Container: Container{
					Widget: Widget{
						InitiallyUnowned: coreglib.InitiallyUnowned{
							Object: obj,
						},
						Object: obj,
						ImplementorIface: atk.ImplementorIface{
							Object: obj,
						},
						Buildable: Buildable{
							Object: obj,
						},
					},
				},
			},
		},
	}
}

func marshalPopoverMenu(p uintptr) (interface{}, error) {
	return wrapPopoverMenu(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// PopoverMenuClass: instance of this type is always passed by reference.
type PopoverMenuClass struct {
	*popoverMenuClass
}

// popoverMenuClass is the struct that's finalized.
type popoverMenuClass struct {
	native unsafe.Pointer
}

var GIRInfoPopoverMenuClass = girepository.MustFind("Gtk", "PopoverMenuClass")
