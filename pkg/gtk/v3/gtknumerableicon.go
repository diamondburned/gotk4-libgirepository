// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeNumerableIcon = coreglib.Type(girepository.MustFind("Gtk", "NumerableIcon").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeNumerableIcon, F: marshalNumerableIcon},
	})
}

// NumerableIconOverrides contains methods that are overridable.
type NumerableIconOverrides struct {
}

func defaultNumerableIconOverrides(v *NumerableIcon) NumerableIconOverrides {
	return NumerableIconOverrides{}
}

// NumerableIcon is a subclass of Icon that can show a number or short string as
// an emblem. The number can be overlayed on top of another emblem, if desired.
//
// It supports theming by taking font and color information from a provided
// StyleContext; see gtk_numerable_icon_set_style_context().
//
// Typical numerable icons: ! (numerableicon.png) ! (numerableicon2.png).
type NumerableIcon struct {
	_ [0]func() // equal guard
	gio.EmblemedIcon
}

var (
	_ coreglib.Objector = (*NumerableIcon)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*NumerableIcon, *NumerableIconClass, NumerableIconOverrides](
		GTypeNumerableIcon,
		initNumerableIconClass,
		wrapNumerableIcon,
		defaultNumerableIconOverrides,
	)
}

func initNumerableIconClass(gclass unsafe.Pointer, overrides NumerableIconOverrides, classInitFunc func(*NumerableIconClass)) {
	if classInitFunc != nil {
		class := (*NumerableIconClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapNumerableIcon(obj *coreglib.Object) *NumerableIcon {
	return &NumerableIcon{
		EmblemedIcon: gio.EmblemedIcon{
			Object: obj,
			Icon: gio.Icon{
				Object: obj,
			},
		},
	}
}

func marshalNumerableIcon(p uintptr) (interface{}, error) {
	return wrapNumerableIcon(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NumerableIconClass: instance of this type is always passed by reference.
type NumerableIconClass struct {
	*numerableIconClass
}

// numerableIconClass is the struct that's finalized.
type numerableIconClass struct {
	native unsafe.Pointer
}

var GIRInfoNumerableIconClass = girepository.MustFind("Gtk", "NumerableIconClass")
