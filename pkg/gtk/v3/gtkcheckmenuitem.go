// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gtk3_CheckMenuItem_ConnectToggled(gpointer, guintptr);
import "C"

// GType values.
var (
	GTypeCheckMenuItem = coreglib.Type(girepository.MustFind("Gtk", "CheckMenuItem").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeCheckMenuItem, F: marshalCheckMenuItem},
	})
}

// CheckMenuItemOverrides contains methods that are overridable.
type CheckMenuItemOverrides struct {
}

func defaultCheckMenuItemOverrides(v *CheckMenuItem) CheckMenuItemOverrides {
	return CheckMenuItemOverrides{}
}

// CheckMenuItem is a menu item that maintains the state of a boolean value in
// addition to a MenuItem usual role in activating application code.
//
// A check box indicating the state of the boolean value is displayed at the
// left side of the MenuItem. Activating the MenuItem toggles the value.
//
// CSS nodes
//
//    menuitem
//    ├── check.left
//    ╰── <child>
//
// GtkCheckMenuItem has a main CSS node with name menuitem, and a subnode with
// name check, which gets the .left or .right style class.
type CheckMenuItem struct {
	_ [0]func() // equal guard
	MenuItem
}

var (
	_ Binner            = (*CheckMenuItem)(nil)
	_ coreglib.Objector = (*CheckMenuItem)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*CheckMenuItem, *CheckMenuItemClass, CheckMenuItemOverrides](
		GTypeCheckMenuItem,
		initCheckMenuItemClass,
		wrapCheckMenuItem,
		defaultCheckMenuItemOverrides,
	)
}

func initCheckMenuItemClass(gclass unsafe.Pointer, overrides CheckMenuItemOverrides, classInitFunc func(*CheckMenuItemClass)) {
	if classInitFunc != nil {
		class := (*CheckMenuItemClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapCheckMenuItem(obj *coreglib.Object) *CheckMenuItem {
	return &CheckMenuItem{
		MenuItem: MenuItem{
			Bin: Bin{
				Container: Container{
					Widget: Widget{
						InitiallyUnowned: coreglib.InitiallyUnowned{
							Object: obj,
						},
						Object: obj,
						ImplementorIface: atk.ImplementorIface{
							Object: obj,
						},
						Buildable: Buildable{
							Object: obj,
						},
					},
				},
			},
			Object: obj,
			Actionable: Actionable{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
			Activatable: Activatable{
				Object: obj,
			},
		},
	}
}

func marshalCheckMenuItem(p uintptr) (interface{}, error) {
	return wrapCheckMenuItem(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectToggled: this signal is emitted when the state of the check box is
// changed.
//
// A signal handler can use gtk_check_menu_item_get_active() to discover the new
// state.
func (v *CheckMenuItem) ConnectToggled(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "toggled", false, unsafe.Pointer(C._gotk4_gtk3_CheckMenuItem_ConnectToggled), f)
}

// CheckMenuItemClass: instance of this type is always passed by reference.
type CheckMenuItemClass struct {
	*checkMenuItemClass
}

// checkMenuItemClass is the struct that's finalized.
type checkMenuItemClass struct {
	native unsafe.Pointer
}

var GIRInfoCheckMenuItemClass = girepository.MustFind("Gtk", "CheckMenuItemClass")
