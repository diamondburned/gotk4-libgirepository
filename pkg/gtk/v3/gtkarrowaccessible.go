// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeArrowAccessible = coreglib.Type(girepository.MustFind("Gtk", "ArrowAccessible").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeArrowAccessible, F: marshalArrowAccessible},
	})
}

// ArrowAccessibleOverrides contains methods that are overridable.
type ArrowAccessibleOverrides struct {
}

func defaultArrowAccessibleOverrides(v *ArrowAccessible) ArrowAccessibleOverrides {
	return ArrowAccessibleOverrides{}
}

type ArrowAccessible struct {
	_ [0]func() // equal guard
	WidgetAccessible

	atk.Image
}

var (
	_ coreglib.Objector = (*ArrowAccessible)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*ArrowAccessible, *ArrowAccessibleClass, ArrowAccessibleOverrides](
		GTypeArrowAccessible,
		initArrowAccessibleClass,
		wrapArrowAccessible,
		defaultArrowAccessibleOverrides,
	)
}

func initArrowAccessibleClass(gclass unsafe.Pointer, overrides ArrowAccessibleOverrides, classInitFunc func(*ArrowAccessibleClass)) {
	if classInitFunc != nil {
		class := (*ArrowAccessibleClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapArrowAccessible(obj *coreglib.Object) *ArrowAccessible {
	return &ArrowAccessible{
		WidgetAccessible: WidgetAccessible{
			Accessible: Accessible{
				AtkObject: atk.AtkObject{
					Object: obj,
				},
			},
			Component: atk.Component{
				Object: obj,
			},
		},
		Image: atk.Image{
			Object: obj,
		},
	}
}

func marshalArrowAccessible(p uintptr) (interface{}, error) {
	return wrapArrowAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ArrowAccessibleClass: instance of this type is always passed by reference.
type ArrowAccessibleClass struct {
	*arrowAccessibleClass
}

// arrowAccessibleClass is the struct that's finalized.
type arrowAccessibleClass struct {
	native unsafe.Pointer
}

var GIRInfoArrowAccessibleClass = girepository.MustFind("Gtk", "ArrowAccessibleClass")
