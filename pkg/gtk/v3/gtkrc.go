// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"fmt"
	"strings"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypePathPriorityType = coreglib.Type(girepository.MustFind("Gtk", "PathPriorityType").RegisteredGType())
	GTypePathType         = coreglib.Type(girepository.MustFind("Gtk", "PathType").RegisteredGType())
	GTypeRCTokenType      = coreglib.Type(girepository.MustFind("Gtk", "RcTokenType").RegisteredGType())
	GTypeRCFlags          = coreglib.Type(girepository.MustFind("Gtk", "RcFlags").RegisteredGType())
	GTypeRCStyle          = coreglib.Type(girepository.MustFind("Gtk", "RcStyle").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypePathPriorityType, F: marshalPathPriorityType},
		coreglib.TypeMarshaler{T: GTypePathType, F: marshalPathType},
		coreglib.TypeMarshaler{T: GTypeRCTokenType, F: marshalRCTokenType},
		coreglib.TypeMarshaler{T: GTypeRCFlags, F: marshalRCFlags},
		coreglib.TypeMarshaler{T: GTypeRCStyle, F: marshalRCStyle},
	})
}

const PATH_PRIO_MASK = 15

// PathPriorityType priorities for path lookups. See also
// gtk_binding_set_add_path().
//
// Deprecated: since version 3.0.
type PathPriorityType C.gint

const (
	// PathPrioLowest: deprecated.
	PathPrioLowest PathPriorityType = 0
	// PathPrioGTK: deprecated.
	PathPrioGTK PathPriorityType = 4
	// PathPrioApplication: deprecated.
	PathPrioApplication PathPriorityType = 8
	// PathPrioTheme: deprecated.
	PathPrioTheme PathPriorityType = 10
	// PathPrioRC: deprecated.
	PathPrioRC PathPriorityType = 12
	// PathPrioHighest: deprecated.
	PathPrioHighest PathPriorityType = 15
)

func marshalPathPriorityType(p uintptr) (interface{}, error) {
	return PathPriorityType(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for PathPriorityType.
func (p PathPriorityType) String() string {
	switch p {
	case PathPrioLowest:
		return "Lowest"
	case PathPrioGTK:
		return "GTK"
	case PathPrioApplication:
		return "Application"
	case PathPrioTheme:
		return "Theme"
	case PathPrioRC:
		return "RC"
	case PathPrioHighest:
		return "Highest"
	default:
		return fmt.Sprintf("PathPriorityType(%d)", p)
	}
}

// PathType: widget path types. See also gtk_binding_set_add_path().
//
// Deprecated: since version 3.0.
type PathType C.gint

const (
	// PathWidget: deprecated.
	PathWidget PathType = iota
	// PathWidgetClass: deprecated.
	PathWidgetClass
	// PathClass: deprecated.
	PathClass
)

func marshalPathType(p uintptr) (interface{}, error) {
	return PathType(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for PathType.
func (p PathType) String() string {
	switch p {
	case PathWidget:
		return "Widget"
	case PathWidgetClass:
		return "WidgetClass"
	case PathClass:
		return "Class"
	default:
		return fmt.Sprintf("PathType(%d)", p)
	}
}

// RCTokenType enumeration represents the tokens in the RC file. It is exposed
// so that theme engines can reuse these tokens when parsing the theme-engine
// specific portions of a RC file.
//
// Deprecated: Use CssProvider instead.
type RCTokenType C.gint

const (
	// RCTokenInvalid: deprecated.
	RCTokenInvalid RCTokenType = 270
	// RCTokenInclude: deprecated.
	RCTokenInclude RCTokenType = 271
	// RCTokenNormal: deprecated.
	RCTokenNormal RCTokenType = 272
	// RCTokenActive: deprecated.
	RCTokenActive RCTokenType = 273
	// RCTokenPrelight: deprecated.
	RCTokenPrelight RCTokenType = 274
	// RCTokenSelected: deprecated.
	RCTokenSelected RCTokenType = 275
	// RCTokenInsensitive: deprecated.
	RCTokenInsensitive RCTokenType = 276
	// RCTokenFg: deprecated.
	RCTokenFg RCTokenType = 277
	// RCTokenBg: deprecated.
	RCTokenBg RCTokenType = 278
	// RCTokenText: deprecated.
	RCTokenText RCTokenType = 279
	// RCTokenBase: deprecated.
	RCTokenBase RCTokenType = 280
	// RCTokenXthickness: deprecated.
	RCTokenXthickness RCTokenType = 281
	// RCTokenYthickness: deprecated.
	RCTokenYthickness RCTokenType = 282
	// RCTokenFont: deprecated.
	RCTokenFont RCTokenType = 283
	// RCTokenFontset: deprecated.
	RCTokenFontset RCTokenType = 284
	// RCTokenFontName: deprecated.
	RCTokenFontName RCTokenType = 285
	// RCTokenBgPixmap: deprecated.
	RCTokenBgPixmap RCTokenType = 286
	// RCTokenPixmapPath: deprecated.
	RCTokenPixmapPath RCTokenType = 287
	// RCTokenStyle: deprecated.
	RCTokenStyle RCTokenType = 288
	// RCTokenBinding: deprecated.
	RCTokenBinding RCTokenType = 289
	// RCTokenBind: deprecated.
	RCTokenBind RCTokenType = 290
	// RCTokenWidget: deprecated.
	RCTokenWidget RCTokenType = 291
	// RCTokenWidgetClass: deprecated.
	RCTokenWidgetClass RCTokenType = 292
	// RCTokenClass: deprecated.
	RCTokenClass RCTokenType = 293
	// RCTokenLowest: deprecated.
	RCTokenLowest RCTokenType = 294
	// RCTokenGTK: deprecated.
	RCTokenGTK RCTokenType = 295
	// RCTokenApplication: deprecated.
	RCTokenApplication RCTokenType = 296
	// RCTokenTheme: deprecated.
	RCTokenTheme RCTokenType = 297
	// RCTokenRC: deprecated.
	RCTokenRC RCTokenType = 298
	// RCTokenHighest: deprecated.
	RCTokenHighest RCTokenType = 299
	// RCTokenEngine: deprecated.
	RCTokenEngine RCTokenType = 300
	// RCTokenModulePath: deprecated.
	RCTokenModulePath RCTokenType = 301
	// RCTokenIMModulePath: deprecated.
	RCTokenIMModulePath RCTokenType = 302
	// RCTokenIMModuleFile: deprecated.
	RCTokenIMModuleFile RCTokenType = 303
	// RCTokenStock: deprecated.
	RCTokenStock RCTokenType = 304
	// RCTokenLTR: deprecated.
	RCTokenLTR RCTokenType = 305
	// RCTokenRTL: deprecated.
	RCTokenRTL RCTokenType = 306
	// RCTokenColor: deprecated.
	RCTokenColor RCTokenType = 307
	// RCTokenUnbind: deprecated.
	RCTokenUnbind RCTokenType = 308
	// RCTokenLast: deprecated.
	RCTokenLast RCTokenType = 309
)

func marshalRCTokenType(p uintptr) (interface{}, error) {
	return RCTokenType(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for RCTokenType.
func (r RCTokenType) String() string {
	switch r {
	case RCTokenInvalid:
		return "Invalid"
	case RCTokenInclude:
		return "Include"
	case RCTokenNormal:
		return "Normal"
	case RCTokenActive:
		return "Active"
	case RCTokenPrelight:
		return "Prelight"
	case RCTokenSelected:
		return "Selected"
	case RCTokenInsensitive:
		return "Insensitive"
	case RCTokenFg:
		return "Fg"
	case RCTokenBg:
		return "Bg"
	case RCTokenText:
		return "Text"
	case RCTokenBase:
		return "Base"
	case RCTokenXthickness:
		return "Xthickness"
	case RCTokenYthickness:
		return "Ythickness"
	case RCTokenFont:
		return "Font"
	case RCTokenFontset:
		return "Fontset"
	case RCTokenFontName:
		return "FontName"
	case RCTokenBgPixmap:
		return "BgPixmap"
	case RCTokenPixmapPath:
		return "PixmapPath"
	case RCTokenStyle:
		return "Style"
	case RCTokenBinding:
		return "Binding"
	case RCTokenBind:
		return "Bind"
	case RCTokenWidget:
		return "Widget"
	case RCTokenWidgetClass:
		return "WidgetClass"
	case RCTokenClass:
		return "Class"
	case RCTokenLowest:
		return "Lowest"
	case RCTokenGTK:
		return "GTK"
	case RCTokenApplication:
		return "Application"
	case RCTokenTheme:
		return "Theme"
	case RCTokenRC:
		return "RC"
	case RCTokenHighest:
		return "Highest"
	case RCTokenEngine:
		return "Engine"
	case RCTokenModulePath:
		return "ModulePath"
	case RCTokenIMModulePath:
		return "IMModulePath"
	case RCTokenIMModuleFile:
		return "IMModuleFile"
	case RCTokenStock:
		return "Stock"
	case RCTokenLTR:
		return "LTR"
	case RCTokenRTL:
		return "RTL"
	case RCTokenColor:
		return "Color"
	case RCTokenUnbind:
		return "Unbind"
	case RCTokenLast:
		return "Last"
	default:
		return fmt.Sprintf("RCTokenType(%d)", r)
	}
}

// RCFlags: deprecated.
type RCFlags C.guint

const (
	// RCFg: deprecated.
	RCFg RCFlags = 0b1
	// RCBg: deprecated.
	RCBg RCFlags = 0b10
	// RCText: deprecated.
	RCText RCFlags = 0b100
	// RCBase: deprecated.
	RCBase RCFlags = 0b1000
)

func marshalRCFlags(p uintptr) (interface{}, error) {
	return RCFlags(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for RCFlags.
func (r RCFlags) String() string {
	if r == 0 {
		return "RCFlags(0)"
	}

	var builder strings.Builder
	builder.Grow(23)

	for r != 0 {
		next := r & (r - 1)
		bit := r - next

		switch bit {
		case RCFg:
			builder.WriteString("Fg|")
		case RCBg:
			builder.WriteString("Bg|")
		case RCText:
			builder.WriteString("Text|")
		case RCBase:
			builder.WriteString("Base|")
		default:
			builder.WriteString(fmt.Sprintf("RCFlags(0b%b)|", bit))
		}

		r = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if r contains other.
func (r RCFlags) Has(other RCFlags) bool {
	return (r & other) == other
}

// RCStyleOverrides contains methods that are overridable.
type RCStyleOverrides struct {
}

func defaultRCStyleOverrides(v *RCStyle) RCStyleOverrides {
	return RCStyleOverrides{}
}

// RCStyle is used to represent a set of information about the appearance of a
// widget. This can later be composited together with other RcStyle-struct<!--
// -->s to form a Style.
type RCStyle struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*RCStyle)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*RCStyle, *RCStyleClass, RCStyleOverrides](
		GTypeRCStyle,
		initRCStyleClass,
		wrapRCStyle,
		defaultRCStyleOverrides,
	)
}

func initRCStyleClass(gclass unsafe.Pointer, overrides RCStyleOverrides, classInitFunc func(*RCStyleClass)) {
	if classInitFunc != nil {
		class := (*RCStyleClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapRCStyle(obj *coreglib.Object) *RCStyle {
	return &RCStyle{
		Object: obj,
	}
}

func marshalRCStyle(p uintptr) (interface{}, error) {
	return wrapRCStyle(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// RCProperty: deprecated
//
// An instance of this type is always passed by reference.
type RCProperty struct {
	*rcProperty
}

// rcProperty is the struct that's finalized.
type rcProperty struct {
	native unsafe.Pointer
}

var GIRInfoRCProperty = girepository.MustFind("Gtk", "RcProperty")

// TypeName: quark-ified type identifier.
func (r *RCProperty) TypeName() glib.Quark {
	offset := GIRInfoRCProperty.StructFieldOffset("type_name")
	valptr := (*glib.Quark)(unsafe.Add(r.native, offset))
	var _v glib.Quark // out
	_v = uint32(*valptr)
	type _ = glib.Quark
	type _ = uint32
	return _v
}

// PropertyName: quark-ified property identifier like “GtkScrollbar::spacing”.
func (r *RCProperty) PropertyName() glib.Quark {
	offset := GIRInfoRCProperty.StructFieldOffset("property_name")
	valptr := (*glib.Quark)(unsafe.Add(r.native, offset))
	var _v glib.Quark // out
	_v = uint32(*valptr)
	type _ = glib.Quark
	type _ = uint32
	return _v
}

// Origin: field similar to one found in SettingsValue.
func (r *RCProperty) Origin() string {
	offset := GIRInfoRCProperty.StructFieldOffset("origin")
	valptr := (*string)(unsafe.Add(r.native, offset))
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// RCStyleClass: instance of this type is always passed by reference.
type RCStyleClass struct {
	*rcStyleClass
}

// rcStyleClass is the struct that's finalized.
type rcStyleClass struct {
	native unsafe.Pointer
}

var GIRInfoRCStyleClass = girepository.MustFind("Gtk", "RcStyleClass")
