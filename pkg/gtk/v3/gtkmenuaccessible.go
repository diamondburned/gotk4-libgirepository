// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeMenuAccessible = coreglib.Type(girepository.MustFind("Gtk", "MenuAccessible").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeMenuAccessible, F: marshalMenuAccessible},
	})
}

// MenuAccessibleOverrides contains methods that are overridable.
type MenuAccessibleOverrides struct {
}

func defaultMenuAccessibleOverrides(v *MenuAccessible) MenuAccessibleOverrides {
	return MenuAccessibleOverrides{}
}

type MenuAccessible struct {
	_ [0]func() // equal guard
	MenuShellAccessible
}

var (
	_ coreglib.Objector = (*MenuAccessible)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*MenuAccessible, *MenuAccessibleClass, MenuAccessibleOverrides](
		GTypeMenuAccessible,
		initMenuAccessibleClass,
		wrapMenuAccessible,
		defaultMenuAccessibleOverrides,
	)
}

func initMenuAccessibleClass(gclass unsafe.Pointer, overrides MenuAccessibleOverrides, classInitFunc func(*MenuAccessibleClass)) {
	if classInitFunc != nil {
		class := (*MenuAccessibleClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapMenuAccessible(obj *coreglib.Object) *MenuAccessible {
	return &MenuAccessible{
		MenuShellAccessible: MenuShellAccessible{
			ContainerAccessible: ContainerAccessible{
				WidgetAccessible: WidgetAccessible{
					Accessible: Accessible{
						AtkObject: atk.AtkObject{
							Object: obj,
						},
					},
					Component: atk.Component{
						Object: obj,
					},
				},
			},
			Selection: atk.Selection{
				Object: obj,
			},
		},
	}
}

func marshalMenuAccessible(p uintptr) (interface{}, error) {
	return wrapMenuAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// MenuAccessibleClass: instance of this type is always passed by reference.
type MenuAccessibleClass struct {
	*menuAccessibleClass
}

// menuAccessibleClass is the struct that's finalized.
type menuAccessibleClass struct {
	native unsafe.Pointer
}

var GIRInfoMenuAccessibleClass = girepository.MustFind("Gtk", "MenuAccessibleClass")
