// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeBin = coreglib.Type(girepository.MustFind("Gtk", "Bin").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeBin, F: marshalBin},
	})
}

// BinOverrides contains methods that are overridable.
type BinOverrides struct {
}

func defaultBinOverrides(v *Bin) BinOverrides {
	return BinOverrides{}
}

// Bin widget is a container with just one child. It is not very useful itself,
// but it is useful for deriving subclasses, since it provides common code
// needed for handling a single child widget.
//
// Many GTK+ widgets are subclasses of Bin, including Window, Button, Frame,
// HandleBox or ScrolledWindow.
type Bin struct {
	_ [0]func() // equal guard
	Container
}

var (
	_ Containerer = (*Bin)(nil)
)

// Binner describes types inherited from class Bin.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type Binner interface {
	coreglib.Objector
	baseBin() *Bin
}

var _ Binner = (*Bin)(nil)

func init() {
	coreglib.RegisterClassInfo[*Bin, *BinClass, BinOverrides](
		GTypeBin,
		initBinClass,
		wrapBin,
		defaultBinOverrides,
	)
}

func initBinClass(gclass unsafe.Pointer, overrides BinOverrides, classInitFunc func(*BinClass)) {
	if classInitFunc != nil {
		class := (*BinClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapBin(obj *coreglib.Object) *Bin {
	return &Bin{
		Container: Container{
			Widget: Widget{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				ImplementorIface: atk.ImplementorIface{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
			},
		},
	}
}

func marshalBin(p uintptr) (interface{}, error) {
	return wrapBin(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *Bin) baseBin() *Bin {
	return v
}

// BaseBin returns the underlying base object.
func BaseBin(obj Binner) *Bin {
	return obj.baseBin()
}

// BinClass: instance of this type is always passed by reference.
type BinClass struct {
	*binClass
}

// binClass is the struct that's finalized.
type binClass struct {
	native unsafe.Pointer
}

var GIRInfoBinClass = girepository.MustFind("Gtk", "BinClass")
