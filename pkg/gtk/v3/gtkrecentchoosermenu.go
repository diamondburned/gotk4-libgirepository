// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeRecentChooserMenu = coreglib.Type(girepository.MustFind("Gtk", "RecentChooserMenu").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeRecentChooserMenu, F: marshalRecentChooserMenu},
	})
}

// RecentChooserMenuOverrides contains methods that are overridable.
type RecentChooserMenuOverrides struct {
}

func defaultRecentChooserMenuOverrides(v *RecentChooserMenu) RecentChooserMenuOverrides {
	return RecentChooserMenuOverrides{}
}

// RecentChooserMenu is a widget suitable for displaying recently used files
// inside a menu. It can be used to set a sub-menu of a MenuItem using
// gtk_menu_item_set_submenu(), or as the menu of a MenuToolButton.
//
// Note that RecentChooserMenu does not have any methods of its own. Instead,
// you should use the functions that work on a RecentChooser.
//
// Note also that RecentChooserMenu does not support multiple filters, as it has
// no way to let the user choose between them as the RecentChooserWidget and
// RecentChooserDialog widgets do. Thus using gtk_recent_chooser_add_filter() on
// a RecentChooserMenu widget will yield the same effects as using
// gtk_recent_chooser_set_filter(), replacing any currently set filter with the
// supplied filter; gtk_recent_chooser_remove_filter() will remove any currently
// set RecentFilter object and will unset the current filter;
// gtk_recent_chooser_list_filters() will return a list containing a single
// RecentFilter object.
//
// Recently used files are supported since GTK+ 2.10.
type RecentChooserMenu struct {
	_ [0]func() // equal guard
	Menu

	*coreglib.Object
	Activatable
	RecentChooser
}

var (
	_ coreglib.Objector = (*RecentChooserMenu)(nil)
	_ MenuSheller       = (*RecentChooserMenu)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*RecentChooserMenu, *RecentChooserMenuClass, RecentChooserMenuOverrides](
		GTypeRecentChooserMenu,
		initRecentChooserMenuClass,
		wrapRecentChooserMenu,
		defaultRecentChooserMenuOverrides,
	)
}

func initRecentChooserMenuClass(gclass unsafe.Pointer, overrides RecentChooserMenuOverrides, classInitFunc func(*RecentChooserMenuClass)) {
	if classInitFunc != nil {
		class := (*RecentChooserMenuClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapRecentChooserMenu(obj *coreglib.Object) *RecentChooserMenu {
	return &RecentChooserMenu{
		Menu: Menu{
			MenuShell: MenuShell{
				Container: Container{
					Widget: Widget{
						InitiallyUnowned: coreglib.InitiallyUnowned{
							Object: obj,
						},
						Object: obj,
						ImplementorIface: atk.ImplementorIface{
							Object: obj,
						},
						Buildable: Buildable{
							Object: obj,
						},
					},
				},
			},
		},
		Object: obj,
		Activatable: Activatable{
			Object: obj,
		},
		RecentChooser: RecentChooser{
			Object: obj,
		},
	}
}

func marshalRecentChooserMenu(p uintptr) (interface{}, error) {
	return wrapRecentChooserMenu(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// RecentChooserMenuClass: instance of this type is always passed by reference.
type RecentChooserMenuClass struct {
	*recentChooserMenuClass
}

// recentChooserMenuClass is the struct that's finalized.
type recentChooserMenuClass struct {
	native unsafe.Pointer
}

var GIRInfoRecentChooserMenuClass = girepository.MustFind("Gtk", "RecentChooserMenuClass")
