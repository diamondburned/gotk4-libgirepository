// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gtk3_HSV_ConnectChanged(gpointer, guintptr);
import "C"

// GType values.
var (
	GTypeHSV = coreglib.Type(girepository.MustFind("Gtk", "HSV").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeHSV, F: marshalHSV},
	})
}

// HSVOverrides contains methods that are overridable.
type HSVOverrides struct {
}

func defaultHSVOverrides(v *HSV) HSVOverrides {
	return HSVOverrides{}
}

// HSV is the “color wheel” part of a complete color selector widget. It allows
// to select a color by determining its HSV components in an intuitive way.
// Moving the selection around the outer ring changes the hue, and moving the
// selection point inside the inner triangle changes value and saturation.
//
// HSV has been deprecated together with ColorSelection, where it was used.
type HSV struct {
	_ [0]func() // equal guard
	Widget
}

var (
	_ Widgetter = (*HSV)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*HSV, *HSVClass, HSVOverrides](
		GTypeHSV,
		initHSVClass,
		wrapHSV,
		defaultHSVOverrides,
	)
}

func initHSVClass(gclass unsafe.Pointer, overrides HSVOverrides, classInitFunc func(*HSVClass)) {
	if classInitFunc != nil {
		class := (*HSVClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapHSV(obj *coreglib.Object) *HSV {
	return &HSV{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			ImplementorIface: atk.ImplementorIface{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
		},
	}
}

func marshalHSV(p uintptr) (interface{}, error) {
	return wrapHSV(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *HSV) ConnectChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "changed", false, unsafe.Pointer(C._gotk4_gtk3_HSV_ConnectChanged), f)
}

// HSVClass: instance of this type is always passed by reference.
type HSVClass struct {
	*hsvClass
}

// hsvClass is the struct that's finalized.
type hsvClass struct {
	native unsafe.Pointer
}

var GIRInfoHSVClass = girepository.MustFind("Gtk", "HSVClass")
