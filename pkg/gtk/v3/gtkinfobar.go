// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gtk3_InfoBar_ConnectResponse(gpointer, gint, guintptr);
// extern void _gotk4_gtk3_InfoBar_ConnectClose(gpointer, guintptr);
import "C"

// GType values.
var (
	GTypeInfoBar = coreglib.Type(girepository.MustFind("Gtk", "InfoBar").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeInfoBar, F: marshalInfoBar},
	})
}

// InfoBarOverrides contains methods that are overridable.
type InfoBarOverrides struct {
}

func defaultInfoBarOverrides(v *InfoBar) InfoBarOverrides {
	return InfoBarOverrides{}
}

// InfoBar is a widget that can be used to show messages to the user without
// showing a dialog. It is often temporarily shown at the top or bottom of a
// document. In contrast to Dialog, which has a action area at the bottom,
// InfoBar has an action area at the side.
//
// The API of InfoBar is very similar to Dialog, allowing you to add buttons to
// the action area with gtk_info_bar_add_button() or
// gtk_info_bar_new_with_buttons(). The sensitivity of action widgets can be
// controlled with gtk_info_bar_set_response_sensitive(). To add widgets to the
// main content area of a InfoBar, use gtk_info_bar_get_content_area() and add
// your widgets to the container.
//
// Similar to MessageDialog, the contents of a InfoBar can by classified as
// error message, warning, informational message, etc, by using
// gtk_info_bar_set_message_type(). GTK+ may use the message type to determine
// how the message is displayed.
//
// A simple example for using a InfoBar:
//
//    GtkWidget *widget, *message_label, *content_area;
//    GtkWidget *grid;
//    GtkInfoBar *bar;
//
//    // set up info bar
//    widget = gtk_info_bar_new ();
//    bar = GTK_INFO_BAR (widget);
//    grid = gtk_grid_new ();
//
//    gtk_widget_set_no_show_all (widget, TRUE);
//    message_label = gtk_label_new ("");
//    content_area = gtk_info_bar_get_content_area (bar);
//    gtk_container_add (GTK_CONTAINER (content_area),
//                       message_label);
//    gtk_info_bar_add_button (bar,
//                             _("_OK"),
//                             GTK_RESPONSE_OK);
//    g_signal_connect (bar,
//                      "response",
//                      G_CALLBACK (gtk_widget_hide),
//                      NULL);
//    gtk_grid_attach (GTK_GRID (grid),
//                     widget,
//                     0, 2, 1, 1);
//
//    // ...
//
//    // show an error message
//    gtk_label_set_text (GTK_LABEL (message_label), "An error occurred!");
//    gtk_info_bar_set_message_type (bar,
//                                   GTK_MESSAGE_ERROR);
//    gtk_widget_show (bar);
//
//
// GtkInfoBar as GtkBuildable
//
// The GtkInfoBar implementation of the GtkBuildable interface exposes the
// content area and action area as internal children with the names
// “content_area” and “action_area”.
//
// GtkInfoBar supports a custom <action-widgets> element, which can contain
// multiple <action-widget> elements. The “response” attribute specifies a
// numeric response, and the content of the element is the id of widget (which
// should be a child of the dialogs action_area).
//
//
// CSS nodes
//
// GtkInfoBar has a single CSS node with name infobar. The node may get one of
// the style classes .info, .warning, .error or .question, depending on the
// message type.
type InfoBar struct {
	_ [0]func() // equal guard
	Box
}

var (
	_ Containerer       = (*InfoBar)(nil)
	_ coreglib.Objector = (*InfoBar)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*InfoBar, *InfoBarClass, InfoBarOverrides](
		GTypeInfoBar,
		initInfoBarClass,
		wrapInfoBar,
		defaultInfoBarOverrides,
	)
}

func initInfoBarClass(gclass unsafe.Pointer, overrides InfoBarOverrides, classInitFunc func(*InfoBarClass)) {
	if classInitFunc != nil {
		class := (*InfoBarClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapInfoBar(obj *coreglib.Object) *InfoBar {
	return &InfoBar{
		Box: Box{
			Container: Container{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
				},
			},
			Object: obj,
			Orientable: Orientable{
				Object: obj,
			},
		},
	}
}

func marshalInfoBar(p uintptr) (interface{}, error) {
	return wrapInfoBar(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectClose signal is a [keybinding signal][GtkBindingSignal] which gets
// emitted when the user uses a keybinding to dismiss the info bar.
//
// The default binding for this signal is the Escape key.
func (v *InfoBar) ConnectClose(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "close", false, unsafe.Pointer(C._gotk4_gtk3_InfoBar_ConnectClose), f)
}

// ConnectResponse is emitted when an action widget is clicked or the
// application programmer calls gtk_dialog_response(). The response_id depends
// on which action widget was clicked.
func (v *InfoBar) ConnectResponse(f func(responseId int)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "response", false, unsafe.Pointer(C._gotk4_gtk3_InfoBar_ConnectResponse), f)
}

// InfoBarClass: instance of this type is always passed by reference.
type InfoBarClass struct {
	*infoBarClass
}

// infoBarClass is the struct that's finalized.
type infoBarClass struct {
	native unsafe.Pointer
}

var GIRInfoInfoBarClass = girepository.MustFind("Gtk", "InfoBarClass")
