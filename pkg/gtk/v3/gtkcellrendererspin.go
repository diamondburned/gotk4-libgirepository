// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeCellRendererSpin = coreglib.Type(girepository.MustFind("Gtk", "CellRendererSpin").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeCellRendererSpin, F: marshalCellRendererSpin},
	})
}

// CellRendererSpinOverrides contains methods that are overridable.
type CellRendererSpinOverrides struct {
}

func defaultCellRendererSpinOverrides(v *CellRendererSpin) CellRendererSpinOverrides {
	return CellRendererSpinOverrides{}
}

// CellRendererSpin renders text in a cell like CellRendererText from which it
// is derived. But while CellRendererText offers a simple entry to edit the
// text, CellRendererSpin offers a SpinButton widget. Of course, that means that
// the text has to be parseable as a floating point number.
//
// The range of the spinbutton is taken from the adjustment property of the cell
// renderer, which can be set explicitly or mapped to a column in the tree
// model, like all properties of cell renders. CellRendererSpin also has
// properties for the CellRendererSpin:climb-rate and the number of
// CellRendererSpin:digits to display. Other SpinButton properties can be set in
// a handler for the CellRenderer::editing-started signal.
//
// The CellRendererSpin cell renderer was added in GTK+ 2.10.
type CellRendererSpin struct {
	_ [0]func() // equal guard
	CellRendererText
}

var (
	_ CellRendererer = (*CellRendererSpin)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*CellRendererSpin, *CellRendererSpinClass, CellRendererSpinOverrides](
		GTypeCellRendererSpin,
		initCellRendererSpinClass,
		wrapCellRendererSpin,
		defaultCellRendererSpinOverrides,
	)
}

func initCellRendererSpinClass(gclass unsafe.Pointer, overrides CellRendererSpinOverrides, classInitFunc func(*CellRendererSpinClass)) {
	if classInitFunc != nil {
		class := (*CellRendererSpinClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapCellRendererSpin(obj *coreglib.Object) *CellRendererSpin {
	return &CellRendererSpin{
		CellRendererText: CellRendererText{
			CellRenderer: CellRenderer{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
			},
		},
	}
}

func marshalCellRendererSpin(p uintptr) (interface{}, error) {
	return wrapCellRendererSpin(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// CellRendererSpinClass: instance of this type is always passed by reference.
type CellRendererSpinClass struct {
	*cellRendererSpinClass
}

// cellRendererSpinClass is the struct that's finalized.
type cellRendererSpinClass struct {
	native unsafe.Pointer
}

var GIRInfoCellRendererSpinClass = girepository.MustFind("Gtk", "CellRendererSpinClass")
