// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypePopoverAccessible = coreglib.Type(girepository.MustFind("Gtk", "PopoverAccessible").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypePopoverAccessible, F: marshalPopoverAccessible},
	})
}

// PopoverAccessibleOverrides contains methods that are overridable.
type PopoverAccessibleOverrides struct {
}

func defaultPopoverAccessibleOverrides(v *PopoverAccessible) PopoverAccessibleOverrides {
	return PopoverAccessibleOverrides{}
}

type PopoverAccessible struct {
	_ [0]func() // equal guard
	ContainerAccessible
}

var (
	_ coreglib.Objector = (*PopoverAccessible)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*PopoverAccessible, *PopoverAccessibleClass, PopoverAccessibleOverrides](
		GTypePopoverAccessible,
		initPopoverAccessibleClass,
		wrapPopoverAccessible,
		defaultPopoverAccessibleOverrides,
	)
}

func initPopoverAccessibleClass(gclass unsafe.Pointer, overrides PopoverAccessibleOverrides, classInitFunc func(*PopoverAccessibleClass)) {
	if classInitFunc != nil {
		class := (*PopoverAccessibleClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapPopoverAccessible(obj *coreglib.Object) *PopoverAccessible {
	return &PopoverAccessible{
		ContainerAccessible: ContainerAccessible{
			WidgetAccessible: WidgetAccessible{
				Accessible: Accessible{
					AtkObject: atk.AtkObject{
						Object: obj,
					},
				},
				Component: atk.Component{
					Object: obj,
				},
			},
		},
	}
}

func marshalPopoverAccessible(p uintptr) (interface{}, error) {
	return wrapPopoverAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// PopoverAccessibleClass: instance of this type is always passed by reference.
type PopoverAccessibleClass struct {
	*popoverAccessibleClass
}

// popoverAccessibleClass is the struct that's finalized.
type popoverAccessibleClass struct {
	native unsafe.Pointer
}

var GIRInfoPopoverAccessibleClass = girepository.MustFind("Gtk", "PopoverAccessibleClass")
