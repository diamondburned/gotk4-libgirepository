// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeTreeListRowSorter = coreglib.Type(girepository.MustFind("Gtk", "TreeListRowSorter").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeTreeListRowSorter, F: marshalTreeListRowSorter},
	})
}

// TreeListRowSorterOverrides contains methods that are overridable.
type TreeListRowSorterOverrides struct {
}

func defaultTreeListRowSorterOverrides(v *TreeListRowSorter) TreeListRowSorterOverrides {
	return TreeListRowSorterOverrides{}
}

// TreeListRowSorter: GtkTreeListRowSorter is a special-purpose sorter that will
// apply a given sorter to the levels in a tree.
//
// Here is an example for setting up a column view with a tree model and a
// GtkTreeListSorter:
//
//    column_sorter = gtk_column_view_get_sorter (view);
//    sorter = gtk_tree_list_row_sorter_new (g_object_ref (column_sorter));
//    sort_model = gtk_sort_list_model_new (tree_model, sorter);
//    selection = gtk_single_selection_new (sort_model);
//    gtk_column_view_set_model (view, G_LIST_MODEL (selection));.
type TreeListRowSorter struct {
	_ [0]func() // equal guard
	Sorter
}

var (
	_ coreglib.Objector = (*TreeListRowSorter)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*TreeListRowSorter, *TreeListRowSorterClass, TreeListRowSorterOverrides](
		GTypeTreeListRowSorter,
		initTreeListRowSorterClass,
		wrapTreeListRowSorter,
		defaultTreeListRowSorterOverrides,
	)
}

func initTreeListRowSorterClass(gclass unsafe.Pointer, overrides TreeListRowSorterOverrides, classInitFunc func(*TreeListRowSorterClass)) {
	if classInitFunc != nil {
		class := (*TreeListRowSorterClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapTreeListRowSorter(obj *coreglib.Object) *TreeListRowSorter {
	return &TreeListRowSorter{
		Sorter: Sorter{
			Object: obj,
		},
	}
}

func marshalTreeListRowSorter(p uintptr) (interface{}, error) {
	return wrapTreeListRowSorter(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// TreeListRowSorterClass: instance of this type is always passed by reference.
type TreeListRowSorterClass struct {
	*treeListRowSorterClass
}

// treeListRowSorterClass is the struct that's finalized.
type treeListRowSorterClass struct {
	native unsafe.Pointer
}

var GIRInfoTreeListRowSorterClass = girepository.MustFind("Gtk", "TreeListRowSorterClass")
