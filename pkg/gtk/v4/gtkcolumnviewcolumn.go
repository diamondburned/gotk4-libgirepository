// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeColumnViewColumn = coreglib.Type(girepository.MustFind("Gtk", "ColumnViewColumn").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeColumnViewColumn, F: marshalColumnViewColumn},
	})
}

// ColumnViewColumn: GtkColumnViewColumn represents the columns being added to
// GtkColumnView.
//
// The main ingredient for a GtkColumnViewColumn is the GtkListItemFactory that
// tells the columnview how to create cells for this column from items in the
// model.
//
// Columns have a title, and can optionally have a header menu set with
// gtk.ColumnViewColumn.SetHeaderMenu().
//
// A sorter can be associated with a column using
// gtk.ColumnViewColumn.SetSorter(), to let users influence sorting by clicking
// on the column header.
type ColumnViewColumn struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*ColumnViewColumn)(nil)
)

func wrapColumnViewColumn(obj *coreglib.Object) *ColumnViewColumn {
	return &ColumnViewColumn{
		Object: obj,
	}
}

func marshalColumnViewColumn(p uintptr) (interface{}, error) {
	return wrapColumnViewColumn(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
