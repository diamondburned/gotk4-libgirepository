// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/cairo"
	"github.com/diamondburned/gotk4/pkg/core/gbox"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

//export _gotk4_gtk4_DrawingAreaDrawFunc
func _gotk4_gtk4_DrawingAreaDrawFunc(arg1 *C.void, arg2 *C.void, arg3 C.int, arg4 C.int, arg5 C.gpointer) {
	var fn DrawingAreaDrawFunc
	{
		v := gbox.Get(uintptr(arg5))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(DrawingAreaDrawFunc)
	}

	var _drawingArea *DrawingArea // out
	var _cr *cairo.Context        // out
	var _width int                // out
	var _height int               // out

	_drawingArea = wrapDrawingArea(coreglib.Take(unsafe.Pointer(arg1)))
	_cr = cairo.WrapContext(uintptr(unsafe.Pointer(arg2)))
	C.cairo_reference(arg2)
	runtime.SetFinalizer(_cr, func(v *cairo.Context) {
		C.cairo_destroy((*C.void)(unsafe.Pointer(v.Native())))
	})
	_width = int(arg3)
	_height = int(arg4)

	fn(_drawingArea, _cr, _width, _height)
}

//export _gotk4_gtk4_DrawingArea_ConnectResize
func _gotk4_gtk4_DrawingArea_ConnectResize(arg0 C.gpointer, arg1 C.gint, arg2 C.gint, arg3 C.guintptr) {
	var f func(width, height int)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(width, height int))
	}

	var _width int  // out
	var _height int // out

	_width = int(arg1)
	_height = int(arg2)

	f(_width, _height)
}
