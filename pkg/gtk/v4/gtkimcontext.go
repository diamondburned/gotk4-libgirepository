// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gtk4_IMContext_ConnectPreeditStart(gpointer, guintptr);
// extern void _gotk4_gtk4_IMContext_ConnectPreeditEnd(gpointer, guintptr);
// extern void _gotk4_gtk4_IMContext_ConnectPreeditChanged(gpointer, guintptr);
// extern void _gotk4_gtk4_IMContext_ConnectCommit(gpointer, gchar*, guintptr);
// extern gboolean _gotk4_gtk4_IMContext_ConnectRetrieveSurrounding(gpointer, guintptr);
// extern gboolean _gotk4_gtk4_IMContext_ConnectDeleteSurrounding(gpointer, gint, gint, guintptr);
import "C"

// GType values.
var (
	GTypeIMContext = coreglib.Type(girepository.MustFind("Gtk", "IMContext").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeIMContext, F: marshalIMContext},
	})
}

// IMContextOverrides contains methods that are overridable.
type IMContextOverrides struct {
}

func defaultIMContextOverrides(v *IMContext) IMContextOverrides {
	return IMContextOverrides{}
}

// IMContext: GtkIMContext defines the interface for GTK input methods.
//
// GtkIMContext is used by GTK text input widgets like GtkText to map from key
// events to Unicode character strings.
//
// By default, GTK uses a platform-dependent default input method. On Windows,
// the default implementation is IME-based and on Wayland, it is using the
// Wayland text protocol. The choice can be overridden programmatically via the
// gtk.Settings:gtk-im-module setting. Users may set the GTK_IM_MODULE
// environment variable to override the default.
//
// Text widgets have a :im-module property (e.g. gtk.TextView:im-module) that
// may also be used to set input methods for specific widget instances. For
// instance, a certain entry widget might be expected to contain certain
// characters which would be easier to input with a specific input method.
//
// An input method may consume multiple key events in sequence before finally
// outputting the composed result. This is called *preediting*, and an input
// method may provide feedback about this process by displaying the intermediate
// composition states as preedit text.
//
// For instance, the built-in GTK input method GtkIMContextSimple implements the
// input of arbitrary Unicode code points by holding down the <kbd>Control</kbd>
// and <kbd>Shift</kbd> keys and then typing <kbd>U</kbd> followed by the
// hexadecimal digits of the code point. When releasing the <kbd>Control</kbd>
// and <kbd>Shift</kbd> keys, preediting ends and the character is inserted as
// text. For example,
//
//    Ctrl+Shift+u 2 0 A C
//
// results in the â‚¬ sign.
//
// Additional input methods can be made available for use by GTK widgets as
// loadable modules. An input method module is a small shared library which
// provides a GIOExtension for the extension point named "gtk-im-module".
type IMContext struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*IMContext)(nil)
)

// IMContexter describes types inherited from class IMContext.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type IMContexter interface {
	coreglib.Objector
	baseIMContext() *IMContext
}

var _ IMContexter = (*IMContext)(nil)

func init() {
	coreglib.RegisterClassInfo[*IMContext, *IMContextClass, IMContextOverrides](
		GTypeIMContext,
		initIMContextClass,
		wrapIMContext,
		defaultIMContextOverrides,
	)
}

func initIMContextClass(gclass unsafe.Pointer, overrides IMContextOverrides, classInitFunc func(*IMContextClass)) {
	if classInitFunc != nil {
		class := (*IMContextClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapIMContext(obj *coreglib.Object) *IMContext {
	return &IMContext{
		Object: obj,
	}
}

func marshalIMContext(p uintptr) (interface{}, error) {
	return wrapIMContext(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *IMContext) baseIMContext() *IMContext {
	return v
}

// BaseIMContext returns the underlying base object.
func BaseIMContext(obj IMContexter) *IMContext {
	return obj.baseIMContext()
}

// ConnectCommit signal is emitted when a complete input sequence has been
// entered by the user. This can be a single character immediately after a key
// press or the final result of preediting.
func (v *IMContext) ConnectCommit(f func(str string)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "commit", false, unsafe.Pointer(C._gotk4_gtk4_IMContext_ConnectCommit), f)
}

// ConnectDeleteSurrounding signal is emitted when the input method needs to
// delete all or part of the context surrounding the cursor.
func (v *IMContext) ConnectDeleteSurrounding(f func(offset, nChars int) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "delete-surrounding", false, unsafe.Pointer(C._gotk4_gtk4_IMContext_ConnectDeleteSurrounding), f)
}

// ConnectPreeditChanged signal is emitted whenever the preedit sequence
// currently being entered has changed. It is also emitted at the end of a
// preedit sequence, in which case gtk_im_context_get_preedit_string() returns
// the empty string.
func (v *IMContext) ConnectPreeditChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "preedit-changed", false, unsafe.Pointer(C._gotk4_gtk4_IMContext_ConnectPreeditChanged), f)
}

// ConnectPreeditEnd signal is emitted when a preediting sequence has been
// completed or canceled.
func (v *IMContext) ConnectPreeditEnd(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "preedit-end", false, unsafe.Pointer(C._gotk4_gtk4_IMContext_ConnectPreeditEnd), f)
}

// ConnectPreeditStart signal is emitted when a new preediting sequence starts.
func (v *IMContext) ConnectPreeditStart(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "preedit-start", false, unsafe.Pointer(C._gotk4_gtk4_IMContext_ConnectPreeditStart), f)
}

// ConnectRetrieveSurrounding signal is emitted when the input method requires
// the context surrounding the cursor. The callback should set the input method
// surrounding context by calling the gtk_im_context_set_surrounding() method.
func (v *IMContext) ConnectRetrieveSurrounding(f func() (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "retrieve-surrounding", false, unsafe.Pointer(C._gotk4_gtk4_IMContext_ConnectRetrieveSurrounding), f)
}

// IMContextClass: instance of this type is always passed by reference.
type IMContextClass struct {
	*imContextClass
}

// imContextClass is the struct that's finalized.
type imContextClass struct {
	native unsafe.Pointer
}

var GIRInfoIMContextClass = girepository.MustFind("Gtk", "IMContextClass")
