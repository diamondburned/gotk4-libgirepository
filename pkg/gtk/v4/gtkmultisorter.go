// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeMultiSorter = coreglib.Type(girepository.MustFind("Gtk", "MultiSorter").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeMultiSorter, F: marshalMultiSorter},
	})
}

// MultiSorterOverrides contains methods that are overridable.
type MultiSorterOverrides struct {
}

func defaultMultiSorterOverrides(v *MultiSorter) MultiSorterOverrides {
	return MultiSorterOverrides{}
}

// MultiSorter: GtkMultiSorter combines multiple sorters by trying them in turn.
//
// If the first sorter compares two items as equal, the second is tried next,
// and so on.
type MultiSorter struct {
	_ [0]func() // equal guard
	Sorter

	*coreglib.Object
	gio.ListModel
	Buildable
}

var (
	_ coreglib.Objector = (*MultiSorter)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*MultiSorter, *MultiSorterClass, MultiSorterOverrides](
		GTypeMultiSorter,
		initMultiSorterClass,
		wrapMultiSorter,
		defaultMultiSorterOverrides,
	)
}

func initMultiSorterClass(gclass unsafe.Pointer, overrides MultiSorterOverrides, classInitFunc func(*MultiSorterClass)) {
	if classInitFunc != nil {
		class := (*MultiSorterClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapMultiSorter(obj *coreglib.Object) *MultiSorter {
	return &MultiSorter{
		Sorter: Sorter{
			Object: obj,
		},
		Object: obj,
		ListModel: gio.ListModel{
			Object: obj,
		},
		Buildable: Buildable{
			Object: obj,
		},
	}
}

func marshalMultiSorter(p uintptr) (interface{}, error) {
	return wrapMultiSorter(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// MultiSorterClass: instance of this type is always passed by reference.
type MultiSorterClass struct {
	*multiSorterClass
}

// multiSorterClass is the struct that's finalized.
type multiSorterClass struct {
	native unsafe.Pointer
}

var GIRInfoMultiSorterClass = girepository.MustFind("Gtk", "MultiSorterClass")
