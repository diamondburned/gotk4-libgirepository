// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeNoSelection = coreglib.Type(girepository.MustFind("Gtk", "NoSelection").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeNoSelection, F: marshalNoSelection},
	})
}

// NoSelectionOverrides contains methods that are overridable.
type NoSelectionOverrides struct {
}

func defaultNoSelectionOverrides(v *NoSelection) NoSelectionOverrides {
	return NoSelectionOverrides{}
}

// NoSelection: GtkNoSelection is a GtkSelectionModel that does not allow
// selecting anything.
//
// This model is meant to be used as a simple wrapper around a GListModel when a
// GtkSelectionModel is required.
type NoSelection struct {
	_ [0]func() // equal guard
	*coreglib.Object

	SelectionModel
}

var (
	_ coreglib.Objector = (*NoSelection)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*NoSelection, *NoSelectionClass, NoSelectionOverrides](
		GTypeNoSelection,
		initNoSelectionClass,
		wrapNoSelection,
		defaultNoSelectionOverrides,
	)
}

func initNoSelectionClass(gclass unsafe.Pointer, overrides NoSelectionOverrides, classInitFunc func(*NoSelectionClass)) {
	if classInitFunc != nil {
		class := (*NoSelectionClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapNoSelection(obj *coreglib.Object) *NoSelection {
	return &NoSelection{
		Object: obj,
		SelectionModel: SelectionModel{
			ListModel: gio.ListModel{
				Object: obj,
			},
		},
	}
}

func marshalNoSelection(p uintptr) (interface{}, error) {
	return wrapNoSelection(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NoSelectionClass: instance of this type is always passed by reference.
type NoSelectionClass struct {
	*noSelectionClass
}

// noSelectionClass is the struct that's finalized.
type noSelectionClass struct {
	native unsafe.Pointer
}

var GIRInfoNoSelectionClass = girepository.MustFind("Gtk", "NoSelectionClass")
