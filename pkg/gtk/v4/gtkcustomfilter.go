// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeCustomFilter = coreglib.Type(girepository.MustFind("Gtk", "CustomFilter").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeCustomFilter, F: marshalCustomFilter},
	})
}

// CustomFilterFunc: user function that is called to determine if the item
// should be matched.
//
// If the filter matches the item, this function must return TRUE. If the item
// should be filtered out, FALSE must be returned.
type CustomFilterFunc func(item *coreglib.Object) (ok bool)

// CustomFilterOverrides contains methods that are overridable.
type CustomFilterOverrides struct {
}

func defaultCustomFilterOverrides(v *CustomFilter) CustomFilterOverrides {
	return CustomFilterOverrides{}
}

// CustomFilter: GtkCustomFilter determines whether to include items with a
// callback.
type CustomFilter struct {
	_ [0]func() // equal guard
	Filter
}

var (
	_ coreglib.Objector = (*CustomFilter)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*CustomFilter, *CustomFilterClass, CustomFilterOverrides](
		GTypeCustomFilter,
		initCustomFilterClass,
		wrapCustomFilter,
		defaultCustomFilterOverrides,
	)
}

func initCustomFilterClass(gclass unsafe.Pointer, overrides CustomFilterOverrides, classInitFunc func(*CustomFilterClass)) {
	if classInitFunc != nil {
		class := (*CustomFilterClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapCustomFilter(obj *coreglib.Object) *CustomFilter {
	return &CustomFilter{
		Filter: Filter{
			Object: obj,
		},
	}
}

func marshalCustomFilter(p uintptr) (interface{}, error) {
	return wrapCustomFilter(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// CustomFilterClass: instance of this type is always passed by reference.
type CustomFilterClass struct {
	*customFilterClass
}

// customFilterClass is the struct that's finalized.
type customFilterClass struct {
	native unsafe.Pointer
}

var GIRInfoCustomFilterClass = girepository.MustFind("Gtk", "CustomFilterClass")
