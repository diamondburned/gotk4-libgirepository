// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeSelectionFilterModel = coreglib.Type(girepository.MustFind("Gtk", "SelectionFilterModel").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeSelectionFilterModel, F: marshalSelectionFilterModel},
	})
}

// SelectionFilterModelOverrides contains methods that are overridable.
type SelectionFilterModelOverrides struct {
}

func defaultSelectionFilterModelOverrides(v *SelectionFilterModel) SelectionFilterModelOverrides {
	return SelectionFilterModelOverrides{}
}

// SelectionFilterModel: GtkSelectionFilterModel is a list model that presents
// the selection from a GtkSelectionModel.
type SelectionFilterModel struct {
	_ [0]func() // equal guard
	*coreglib.Object

	gio.ListModel
}

var (
	_ coreglib.Objector = (*SelectionFilterModel)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*SelectionFilterModel, *SelectionFilterModelClass, SelectionFilterModelOverrides](
		GTypeSelectionFilterModel,
		initSelectionFilterModelClass,
		wrapSelectionFilterModel,
		defaultSelectionFilterModelOverrides,
	)
}

func initSelectionFilterModelClass(gclass unsafe.Pointer, overrides SelectionFilterModelOverrides, classInitFunc func(*SelectionFilterModelClass)) {
	if classInitFunc != nil {
		class := (*SelectionFilterModelClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapSelectionFilterModel(obj *coreglib.Object) *SelectionFilterModel {
	return &SelectionFilterModel{
		Object: obj,
		ListModel: gio.ListModel{
			Object: obj,
		},
	}
}

func marshalSelectionFilterModel(p uintptr) (interface{}, error) {
	return wrapSelectionFilterModel(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// SelectionFilterModelClass: instance of this type is always passed by
// reference.
type SelectionFilterModelClass struct {
	*selectionFilterModelClass
}

// selectionFilterModelClass is the struct that's finalized.
type selectionFilterModelClass struct {
	native unsafe.Pointer
}

var GIRInfoSelectionFilterModelClass = girepository.MustFind("Gtk", "SelectionFilterModelClass")
