// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeStringSorter = coreglib.Type(girepository.MustFind("Gtk", "StringSorter").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeStringSorter, F: marshalStringSorter},
	})
}

// StringSorterOverrides contains methods that are overridable.
type StringSorterOverrides struct {
}

func defaultStringSorterOverrides(v *StringSorter) StringSorterOverrides {
	return StringSorterOverrides{}
}

// StringSorter: GtkStringSorter is a GtkSorter that compares strings.
//
// It does the comparison in a linguistically correct way using the current
// locale by normalizing Unicode strings and possibly case-folding them before
// performing the comparison.
//
// To obtain the strings to compare, this sorter evaluates a gtk.Expression.
type StringSorter struct {
	_ [0]func() // equal guard
	Sorter
}

var (
	_ coreglib.Objector = (*StringSorter)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*StringSorter, *StringSorterClass, StringSorterOverrides](
		GTypeStringSorter,
		initStringSorterClass,
		wrapStringSorter,
		defaultStringSorterOverrides,
	)
}

func initStringSorterClass(gclass unsafe.Pointer, overrides StringSorterOverrides, classInitFunc func(*StringSorterClass)) {
	if classInitFunc != nil {
		class := (*StringSorterClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapStringSorter(obj *coreglib.Object) *StringSorter {
	return &StringSorter{
		Sorter: Sorter{
			Object: obj,
		},
	}
}

func marshalStringSorter(p uintptr) (interface{}, error) {
	return wrapStringSorter(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// StringSorterClass: instance of this type is always passed by reference.
type StringSorterClass struct {
	*stringSorterClass
}

// stringSorterClass is the struct that's finalized.
type stringSorterClass struct {
	native unsafe.Pointer
}

var GIRInfoStringSorterClass = girepository.MustFind("Gtk", "StringSorterClass")
