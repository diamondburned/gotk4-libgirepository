// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeSingleSelection = coreglib.Type(girepository.MustFind("Gtk", "SingleSelection").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeSingleSelection, F: marshalSingleSelection},
	})
}

// SingleSelectionOverrides contains methods that are overridable.
type SingleSelectionOverrides struct {
}

func defaultSingleSelectionOverrides(v *SingleSelection) SingleSelectionOverrides {
	return SingleSelectionOverrides{}
}

// SingleSelection: GtkSingleSelection is a GtkSelectionModel that allows
// selecting a single item.
//
// Note that the selection is *persistent* -- if the selected item is removed
// and re-added in the same ::items-changed emission, it stays selected. In
// particular, this means that changing the sort order of an underlying sort
// model will preserve the selection.
type SingleSelection struct {
	_ [0]func() // equal guard
	*coreglib.Object

	SelectionModel
}

var (
	_ coreglib.Objector = (*SingleSelection)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*SingleSelection, *SingleSelectionClass, SingleSelectionOverrides](
		GTypeSingleSelection,
		initSingleSelectionClass,
		wrapSingleSelection,
		defaultSingleSelectionOverrides,
	)
}

func initSingleSelectionClass(gclass unsafe.Pointer, overrides SingleSelectionOverrides, classInitFunc func(*SingleSelectionClass)) {
	if classInitFunc != nil {
		class := (*SingleSelectionClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapSingleSelection(obj *coreglib.Object) *SingleSelection {
	return &SingleSelection{
		Object: obj,
		SelectionModel: SelectionModel{
			ListModel: gio.ListModel{
				Object: obj,
			},
		},
	}
}

func marshalSingleSelection(p uintptr) (interface{}, error) {
	return wrapSingleSelection(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// SingleSelectionClass: instance of this type is always passed by reference.
type SingleSelectionClass struct {
	*singleSelectionClass
}

// singleSelectionClass is the struct that's finalized.
type singleSelectionClass struct {
	native unsafe.Pointer
}

var GIRInfoSingleSelectionClass = girepository.MustFind("Gtk", "SingleSelectionClass")
