// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeWindowHandle = coreglib.Type(girepository.MustFind("Gtk", "WindowHandle").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeWindowHandle, F: marshalWindowHandle},
	})
}

// WindowHandleOverrides contains methods that are overridable.
type WindowHandleOverrides struct {
}

func defaultWindowHandleOverrides(v *WindowHandle) WindowHandleOverrides {
	return WindowHandleOverrides{}
}

// WindowHandle: GtkWindowHandle is a titlebar area widget.
//
// When added into a window, it can be dragged to move the window, and handles
// right click, double click and middle click as expected of a titlebar.
//
//
// CSS nodes
//
// GtkWindowHandle has a single CSS node with the name windowhandle.
//
//
// Accessibility
//
// GtkWindowHandle uses the GTK_ACCESSIBLE_ROLE_GROUP role.
type WindowHandle struct {
	_ [0]func() // equal guard
	Widget
}

var (
	_ Widgetter = (*WindowHandle)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*WindowHandle, *WindowHandleClass, WindowHandleOverrides](
		GTypeWindowHandle,
		initWindowHandleClass,
		wrapWindowHandle,
		defaultWindowHandleOverrides,
	)
}

func initWindowHandleClass(gclass unsafe.Pointer, overrides WindowHandleOverrides, classInitFunc func(*WindowHandleClass)) {
	if classInitFunc != nil {
		class := (*WindowHandleClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapWindowHandle(obj *coreglib.Object) *WindowHandle {
	return &WindowHandle{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			Accessible: Accessible{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
			ConstraintTarget: ConstraintTarget{
				Object: obj,
			},
		},
	}
}

func marshalWindowHandle(p uintptr) (interface{}, error) {
	return wrapWindowHandle(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// WindowHandleClass: instance of this type is always passed by reference.
type WindowHandleClass struct {
	*windowHandleClass
}

// windowHandleClass is the struct that's finalized.
type windowHandleClass struct {
	native unsafe.Pointer
}

var GIRInfoWindowHandleClass = girepository.MustFind("Gtk", "WindowHandleClass")
