// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeAnyFilter   = coreglib.Type(girepository.MustFind("Gtk", "AnyFilter").RegisteredGType())
	GTypeEveryFilter = coreglib.Type(girepository.MustFind("Gtk", "EveryFilter").RegisteredGType())
	GTypeMultiFilter = coreglib.Type(girepository.MustFind("Gtk", "MultiFilter").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeAnyFilter, F: marshalAnyFilter},
		coreglib.TypeMarshaler{T: GTypeEveryFilter, F: marshalEveryFilter},
		coreglib.TypeMarshaler{T: GTypeMultiFilter, F: marshalMultiFilter},
	})
}

// AnyFilter: GtkAnyFilter matches an item when at least one of its filters
// matches.
//
// To add filters to a GtkAnyFilter, use gtk.MultiFilter.Append().
type AnyFilter struct {
	_ [0]func() // equal guard
	MultiFilter
}

var (
	_ MultiFilterer = (*AnyFilter)(nil)
)

func wrapAnyFilter(obj *coreglib.Object) *AnyFilter {
	return &AnyFilter{
		MultiFilter: MultiFilter{
			Filter: Filter{
				Object: obj,
			},
			Object: obj,
			ListModel: gio.ListModel{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
		},
	}
}

func marshalAnyFilter(p uintptr) (interface{}, error) {
	return wrapAnyFilter(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// EveryFilter: GtkEveryFilter matches an item when each of its filters matches.
//
// To add filters to a GtkEveryFilter, use gtk.MultiFilter.Append().
type EveryFilter struct {
	_ [0]func() // equal guard
	MultiFilter
}

var (
	_ MultiFilterer = (*EveryFilter)(nil)
)

func wrapEveryFilter(obj *coreglib.Object) *EveryFilter {
	return &EveryFilter{
		MultiFilter: MultiFilter{
			Filter: Filter{
				Object: obj,
			},
			Object: obj,
			ListModel: gio.ListModel{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
		},
	}
}

func marshalEveryFilter(p uintptr) (interface{}, error) {
	return wrapEveryFilter(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// MultiFilter: GtkMultiFilter is the base class for filters that combine
// multiple filters.
type MultiFilter struct {
	_ [0]func() // equal guard
	Filter

	*coreglib.Object
	gio.ListModel
	Buildable
}

var (
	_ coreglib.Objector = (*MultiFilter)(nil)
)

// MultiFilterer describes types inherited from class MultiFilter.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type MultiFilterer interface {
	coreglib.Objector
	baseMultiFilter() *MultiFilter
}

var _ MultiFilterer = (*MultiFilter)(nil)

func wrapMultiFilter(obj *coreglib.Object) *MultiFilter {
	return &MultiFilter{
		Filter: Filter{
			Object: obj,
		},
		Object: obj,
		ListModel: gio.ListModel{
			Object: obj,
		},
		Buildable: Buildable{
			Object: obj,
		},
	}
}

func marshalMultiFilter(p uintptr) (interface{}, error) {
	return wrapMultiFilter(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *MultiFilter) baseMultiFilter() *MultiFilter {
	return v
}

// BaseMultiFilter returns the underlying base object.
func BaseMultiFilter(obj MultiFilterer) *MultiFilter {
	return obj.baseMultiFilter()
}
