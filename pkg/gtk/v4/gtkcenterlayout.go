// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeCenterLayout = coreglib.Type(girepository.MustFind("Gtk", "CenterLayout").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeCenterLayout, F: marshalCenterLayout},
	})
}

// CenterLayoutOverrides contains methods that are overridable.
type CenterLayoutOverrides struct {
}

func defaultCenterLayoutOverrides(v *CenterLayout) CenterLayoutOverrides {
	return CenterLayoutOverrides{}
}

// CenterLayout: GtkCenterLayout is a layout manager that manages up to three
// children.
//
// The start widget is allocated at the start of the layout (left in
// left-to-right locales and right in right-to-left ones), and the end widget at
// the end.
//
// The center widget is centered regarding the full width of the layout's.
type CenterLayout struct {
	_ [0]func() // equal guard
	LayoutManager
}

var (
	_ LayoutManagerer = (*CenterLayout)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*CenterLayout, *CenterLayoutClass, CenterLayoutOverrides](
		GTypeCenterLayout,
		initCenterLayoutClass,
		wrapCenterLayout,
		defaultCenterLayoutOverrides,
	)
}

func initCenterLayoutClass(gclass unsafe.Pointer, overrides CenterLayoutOverrides, classInitFunc func(*CenterLayoutClass)) {
	if classInitFunc != nil {
		class := (*CenterLayoutClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapCenterLayout(obj *coreglib.Object) *CenterLayout {
	return &CenterLayout{
		LayoutManager: LayoutManager{
			Object: obj,
		},
	}
}

func marshalCenterLayout(p uintptr) (interface{}, error) {
	return wrapCenterLayout(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// CenterLayoutClass: instance of this type is always passed by reference.
type CenterLayoutClass struct {
	*centerLayoutClass
}

// centerLayoutClass is the struct that's finalized.
type centerLayoutClass struct {
	native unsafe.Pointer
}

var GIRInfoCenterLayoutClass = girepository.MustFind("Gtk", "CenterLayoutClass")
