// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

//export _gotk4_gtk4_DragSource_ConnectDragBegin
func _gotk4_gtk4_DragSource_ConnectDragBegin(arg0 C.gpointer, arg1 *C.void, arg2 C.guintptr) {
	var f func(drag gdk.Dragger)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(drag gdk.Dragger))
	}

	var _drag gdk.Dragger // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gdk.Dragger is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(gdk.Dragger)
			return ok
		})
		rv, ok := casted.(gdk.Dragger)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.Dragger")
		}
		_drag = rv
	}

	f(_drag)
}

//export _gotk4_gtk4_DragSource_ConnectDragEnd
func _gotk4_gtk4_DragSource_ConnectDragEnd(arg0 C.gpointer, arg1 *C.void, arg2 C.gboolean, arg3 C.guintptr) {
	var f func(drag gdk.Dragger, deleteData bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(drag gdk.Dragger, deleteData bool))
	}

	var _drag gdk.Dragger // out
	var _deleteData bool  // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gdk.Dragger is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(gdk.Dragger)
			return ok
		})
		rv, ok := casted.(gdk.Dragger)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.Dragger")
		}
		_drag = rv
	}
	if arg2 != 0 {
		_deleteData = true
	}

	f(_drag, _deleteData)
}

//export _gotk4_gtk4_DragSource_ConnectPrepare
func _gotk4_gtk4_DragSource_ConnectPrepare(arg0 C.gpointer, arg1 C.gdouble, arg2 C.gdouble, arg3 C.guintptr) (cret *C.void) {
	var f func(x, y float64) (contentProvider *gdk.ContentProvider)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(x, y float64) (contentProvider *gdk.ContentProvider))
	}

	var _x float64 // out
	var _y float64 // out

	_x = float64(arg1)
	_y = float64(arg2)

	contentProvider := f(_x, _y)

	var _ *gdk.ContentProvider

	if contentProvider != nil {
		cret = (*C.void)(unsafe.Pointer(coreglib.InternObject(contentProvider).Native()))
		C.g_object_ref(C.gpointer(coreglib.InternObject(contentProvider).Native()))
	}

	return cret
}
