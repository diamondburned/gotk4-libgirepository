// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeMediaFile = coreglib.Type(girepository.MustFind("Gtk", "MediaFile").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeMediaFile, F: marshalMediaFile},
	})
}

const MEDIA_FILE_EXTENSION_POINT_NAME = "gtk-media-file"

// MediaFileOverrides contains methods that are overridable.
type MediaFileOverrides struct {
}

func defaultMediaFileOverrides(v *MediaFile) MediaFileOverrides {
	return MediaFileOverrides{}
}

// MediaFile: GtkMediaFile implements GtkMediaStream for files.
//
// This provides a simple way to play back video files with GTK.
//
// GTK provides a GIO extension point for GtkMediaFile implementations to allow
// for external implementations using various media frameworks.
//
// GTK itself includes implementations using GStreamer and ffmpeg.
type MediaFile struct {
	_ [0]func() // equal guard
	MediaStream
}

var (
	_ MediaStreamer = (*MediaFile)(nil)
)

// MediaFiler describes types inherited from class MediaFile.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type MediaFiler interface {
	coreglib.Objector
	baseMediaFile() *MediaFile
}

var _ MediaFiler = (*MediaFile)(nil)

func init() {
	coreglib.RegisterClassInfo[*MediaFile, *MediaFileClass, MediaFileOverrides](
		GTypeMediaFile,
		initMediaFileClass,
		wrapMediaFile,
		defaultMediaFileOverrides,
	)
}

func initMediaFileClass(gclass unsafe.Pointer, overrides MediaFileOverrides, classInitFunc func(*MediaFileClass)) {
	if classInitFunc != nil {
		class := (*MediaFileClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapMediaFile(obj *coreglib.Object) *MediaFile {
	return &MediaFile{
		MediaStream: MediaStream{
			Object: obj,
			Paintable: gdk.Paintable{
				Object: obj,
			},
		},
	}
}

func marshalMediaFile(p uintptr) (interface{}, error) {
	return wrapMediaFile(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *MediaFile) baseMediaFile() *MediaFile {
	return v
}

// BaseMediaFile returns the underlying base object.
func BaseMediaFile(obj MediaFiler) *MediaFile {
	return obj.baseMediaFile()
}

// MediaFileClass: instance of this type is always passed by reference.
type MediaFileClass struct {
	*mediaFileClass
}

// mediaFileClass is the struct that's finalized.
type mediaFileClass struct {
	native unsafe.Pointer
}

var GIRInfoMediaFileClass = girepository.MustFind("Gtk", "MediaFileClass")
