// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeCustomSorter = coreglib.Type(girepository.MustFind("Gtk", "CustomSorter").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeCustomSorter, F: marshalCustomSorter},
	})
}

// CustomSorterOverrides contains methods that are overridable.
type CustomSorterOverrides struct {
}

func defaultCustomSorterOverrides(v *CustomSorter) CustomSorterOverrides {
	return CustomSorterOverrides{}
}

// CustomSorter: GtkCustomSorter is a GtkSorter implementation that sorts via a
// callback function.
type CustomSorter struct {
	_ [0]func() // equal guard
	Sorter
}

var (
	_ coreglib.Objector = (*CustomSorter)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*CustomSorter, *CustomSorterClass, CustomSorterOverrides](
		GTypeCustomSorter,
		initCustomSorterClass,
		wrapCustomSorter,
		defaultCustomSorterOverrides,
	)
}

func initCustomSorterClass(gclass unsafe.Pointer, overrides CustomSorterOverrides, classInitFunc func(*CustomSorterClass)) {
	if classInitFunc != nil {
		class := (*CustomSorterClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapCustomSorter(obj *coreglib.Object) *CustomSorter {
	return &CustomSorter{
		Sorter: Sorter{
			Object: obj,
		},
	}
}

func marshalCustomSorter(p uintptr) (interface{}, error) {
	return wrapCustomSorter(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// CustomSorterClass: instance of this type is always passed by reference.
type CustomSorterClass struct {
	*customSorterClass
}

// customSorterClass is the struct that's finalized.
type customSorterClass struct {
	native unsafe.Pointer
}

var GIRInfoCustomSorterClass = girepository.MustFind("Gtk", "CustomSorterClass")
