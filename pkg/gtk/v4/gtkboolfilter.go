// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeBoolFilter = coreglib.Type(girepository.MustFind("Gtk", "BoolFilter").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeBoolFilter, F: marshalBoolFilter},
	})
}

// BoolFilterOverrides contains methods that are overridable.
type BoolFilterOverrides struct {
}

func defaultBoolFilterOverrides(v *BoolFilter) BoolFilterOverrides {
	return BoolFilterOverrides{}
}

// BoolFilter: GtkBoolFilter evaluates a boolean GtkExpression to determine
// whether to include items.
type BoolFilter struct {
	_ [0]func() // equal guard
	Filter
}

var (
	_ coreglib.Objector = (*BoolFilter)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*BoolFilter, *BoolFilterClass, BoolFilterOverrides](
		GTypeBoolFilter,
		initBoolFilterClass,
		wrapBoolFilter,
		defaultBoolFilterOverrides,
	)
}

func initBoolFilterClass(gclass unsafe.Pointer, overrides BoolFilterOverrides, classInitFunc func(*BoolFilterClass)) {
	if classInitFunc != nil {
		class := (*BoolFilterClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapBoolFilter(obj *coreglib.Object) *BoolFilter {
	return &BoolFilter{
		Filter: Filter{
			Object: obj,
		},
	}
}

func marshalBoolFilter(p uintptr) (interface{}, error) {
	return wrapBoolFilter(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// BoolFilterClass: instance of this type is always passed by reference.
type BoolFilterClass struct {
	*boolFilterClass
}

// boolFilterClass is the struct that's finalized.
type boolFilterClass struct {
	native unsafe.Pointer
}

var GIRInfoBoolFilterClass = girepository.MustFind("Gtk", "BoolFilterClass")
