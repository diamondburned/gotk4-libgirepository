// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gtk4_SearchEntry_ConnectStopSearch(gpointer, guintptr);
// extern void _gotk4_gtk4_SearchEntry_ConnectSearchStarted(gpointer, guintptr);
// extern void _gotk4_gtk4_SearchEntry_ConnectSearchChanged(gpointer, guintptr);
// extern void _gotk4_gtk4_SearchEntry_ConnectPreviousMatch(gpointer, guintptr);
// extern void _gotk4_gtk4_SearchEntry_ConnectNextMatch(gpointer, guintptr);
// extern void _gotk4_gtk4_SearchEntry_ConnectActivate(gpointer, guintptr);
import "C"

// GType values.
var (
	GTypeSearchEntry = coreglib.Type(girepository.MustFind("Gtk", "SearchEntry").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeSearchEntry, F: marshalSearchEntry},
	})
}

// SearchEntry: GtkSearchEntry is an entry widget that has been tailored for use
// as a search entry.
//
// The main API for interacting with a GtkSearchEntry as entry is the
// GtkEditable interface.
//
// !An example GtkSearchEntry (search-entry.png)
//
// It will show an inactive symbolic “find” icon when the search entry is empty,
// and a symbolic “clear” icon when there is text. Clicking on the “clear” icon
// will empty the search entry.
//
// To make filtering appear more reactive, it is a good idea to not react to
// every change in the entry text immediately, but only after a short delay. To
// support this, GtkSearchEntry emits the gtk.SearchEntry::search-changed signal
// which can be used instead of the gtk.Editable::changed signal.
//
// The gtk.SearchEntry::previous-match, gtk.SearchEntry::next-match and
// gtk.SearchEntry::stop-search signals can be used to implement moving between
// search results and ending the search.
//
// Often, GtkSearchEntry will be fed events by means of being placed inside a
// gtk.SearchBar. If that is not the case, you can use
// gtk.SearchEntry.SetKeyCaptureWidget() to let it capture key input from
// another widget.
//
// GtkSearchEntry provides only minimal API and should be used with the
// gtk.Editable API.
//
// CSS Nodes
//
//    entry.search
//    ╰── text
//
//
// GtkSearchEntry has a single CSS node with name entry that carries a .search
// style class, and the text node is a child of that.
//
//
// Accessibility
//
// GtkSearchEntry uses the GTK_ACCESSIBLE_ROLE_SEARCH_BOX role.
type SearchEntry struct {
	_ [0]func() // equal guard
	Widget

	*coreglib.Object
	Editable
}

var (
	_ Widgetter         = (*SearchEntry)(nil)
	_ coreglib.Objector = (*SearchEntry)(nil)
)

func wrapSearchEntry(obj *coreglib.Object) *SearchEntry {
	return &SearchEntry{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			Accessible: Accessible{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
			ConstraintTarget: ConstraintTarget{
				Object: obj,
			},
		},
		Object: obj,
		Editable: Editable{
			Widget: Widget{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				Accessible: Accessible{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
				ConstraintTarget: ConstraintTarget{
					Object: obj,
				},
			},
		},
	}
}

func marshalSearchEntry(p uintptr) (interface{}, error) {
	return wrapSearchEntry(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectActivate is emitted when the entry is activated.
//
// The keybindings for this signal are all forms of the Enter key.
func (v *SearchEntry) ConnectActivate(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "activate", false, unsafe.Pointer(C._gotk4_gtk4_SearchEntry_ConnectActivate), f)
}

// ConnectNextMatch is emitted when the user initiates a move to the next match
// for the current search string.
//
// This is a keybinding signal (class.SignalAction.html).
//
// Applications should connect to it, to implement moving between matches.
//
// The default bindings for this signal is Ctrl-g.
func (v *SearchEntry) ConnectNextMatch(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "next-match", false, unsafe.Pointer(C._gotk4_gtk4_SearchEntry_ConnectNextMatch), f)
}

// ConnectPreviousMatch is emitted when the user initiates a move to the
// previous match for the current search string.
//
// This is a keybinding signal (class.SignalAction.html).
//
// Applications should connect to it, to implement moving between matches.
//
// The default bindings for this signal is Ctrl-Shift-g.
func (v *SearchEntry) ConnectPreviousMatch(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "previous-match", false, unsafe.Pointer(C._gotk4_gtk4_SearchEntry_ConnectPreviousMatch), f)
}

// ConnectSearchChanged is emitted with a short delay of 150 milliseconds after
// the last change to the entry text.
func (v *SearchEntry) ConnectSearchChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "search-changed", false, unsafe.Pointer(C._gotk4_gtk4_SearchEntry_ConnectSearchChanged), f)
}

// ConnectSearchStarted is emitted when the user initiated a search on the
// entry.
func (v *SearchEntry) ConnectSearchStarted(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "search-started", false, unsafe.Pointer(C._gotk4_gtk4_SearchEntry_ConnectSearchStarted), f)
}

// ConnectStopSearch is emitted when the user stops a search via keyboard input.
//
// This is a keybinding signal (class.SignalAction.html).
//
// Applications should connect to it, to implement hiding the search entry in
// this case.
//
// The default bindings for this signal is Escape.
func (v *SearchEntry) ConnectStopSearch(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "stop-search", false, unsafe.Pointer(C._gotk4_gtk4_SearchEntry_ConnectStopSearch), f)
}
