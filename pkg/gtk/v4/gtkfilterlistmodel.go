// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeFilterListModel = coreglib.Type(girepository.MustFind("Gtk", "FilterListModel").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeFilterListModel, F: marshalFilterListModel},
	})
}

// FilterListModelOverrides contains methods that are overridable.
type FilterListModelOverrides struct {
}

func defaultFilterListModelOverrides(v *FilterListModel) FilterListModelOverrides {
	return FilterListModelOverrides{}
}

// FilterListModel: GtkFilterListModel is a list model that filters the elements
// of the underlying model according to a GtkFilter.
//
// It hides some elements from the other model according to criteria given by a
// GtkFilter.
//
// The model can be set up to do incremental searching, so that filtering long
// lists doesn't block the UI. See gtk.FilterListModel.SetIncremental() for
// details.
type FilterListModel struct {
	_ [0]func() // equal guard
	*coreglib.Object

	gio.ListModel
}

var (
	_ coreglib.Objector = (*FilterListModel)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*FilterListModel, *FilterListModelClass, FilterListModelOverrides](
		GTypeFilterListModel,
		initFilterListModelClass,
		wrapFilterListModel,
		defaultFilterListModelOverrides,
	)
}

func initFilterListModelClass(gclass unsafe.Pointer, overrides FilterListModelOverrides, classInitFunc func(*FilterListModelClass)) {
	if classInitFunc != nil {
		class := (*FilterListModelClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapFilterListModel(obj *coreglib.Object) *FilterListModel {
	return &FilterListModel{
		Object: obj,
		ListModel: gio.ListModel{
			Object: obj,
		},
	}
}

func marshalFilterListModel(p uintptr) (interface{}, error) {
	return wrapFilterListModel(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// FilterListModelClass: instance of this type is always passed by reference.
type FilterListModelClass struct {
	*filterListModelClass
}

// filterListModelClass is the struct that's finalized.
type filterListModelClass struct {
	native unsafe.Pointer
}

var GIRInfoFilterListModelClass = girepository.MustFind("Gtk", "FilterListModelClass")
