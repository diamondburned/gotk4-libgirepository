// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeDropDown = coreglib.Type(girepository.MustFind("Gtk", "DropDown").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDropDown, F: marshalDropDown},
	})
}

// DropDownOverrides contains methods that are overridable.
type DropDownOverrides struct {
}

func defaultDropDownOverrides(v *DropDown) DropDownOverrides {
	return DropDownOverrides{}
}

// DropDown: GtkDropDown is a widget that allows the user to choose an item from
// a list of options.
//
// !An example GtkDropDown (drop-down.png)
//
// The GtkDropDown displays the selected choice.
//
// The options are given to GtkDropDown in the form of GListModel and how the
// individual options are represented is determined by a gtk.ListItemFactory.
// The default factory displays simple strings.
//
// GtkDropDown knows how to obtain strings from the items in a gtk.StringList;
// for other models, you have to provide an expression to find the strings via
// gtk.DropDown.SetExpression().
//
// GtkDropDown can optionally allow search in the popup, which is useful if the
// list of options is long. To enable the search entry, use
// gtk.DropDown.SetEnableSearch().
//
//
// CSS nodes
//
// GtkDropDown has a single CSS node with name dropdown, with the button and
// popover nodes as children.
//
//
// Accessibility
//
// GtkDropDown uses the GTK_ACCESSIBLE_ROLE_COMBO_BOX role.
type DropDown struct {
	_ [0]func() // equal guard
	Widget
}

var (
	_ Widgetter = (*DropDown)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DropDown, *DropDownClass, DropDownOverrides](
		GTypeDropDown,
		initDropDownClass,
		wrapDropDown,
		defaultDropDownOverrides,
	)
}

func initDropDownClass(gclass unsafe.Pointer, overrides DropDownOverrides, classInitFunc func(*DropDownClass)) {
	if classInitFunc != nil {
		class := (*DropDownClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDropDown(obj *coreglib.Object) *DropDown {
	return &DropDown{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			Accessible: Accessible{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
			ConstraintTarget: ConstraintTarget{
				Object: obj,
			},
		},
	}
}

func marshalDropDown(p uintptr) (interface{}, error) {
	return wrapDropDown(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// DropDownClass: instance of this type is always passed by reference.
type DropDownClass struct {
	*dropDownClass
}

// dropDownClass is the struct that's finalized.
type dropDownClass struct {
	native unsafe.Pointer
}

var GIRInfoDropDownClass = girepository.MustFind("Gtk", "DropDownClass")
