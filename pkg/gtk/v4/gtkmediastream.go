// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeMediaStream = coreglib.Type(girepository.MustFind("Gtk", "MediaStream").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeMediaStream, F: marshalMediaStream},
	})
}

// MediaStreamOverrides contains methods that are overridable.
type MediaStreamOverrides struct {
}

func defaultMediaStreamOverrides(v *MediaStream) MediaStreamOverrides {
	return MediaStreamOverrides{}
}

// MediaStream: GtkMediaStream is the integration point for media playback
// inside GTK.
//
// GTK provides an implementation of the GtkMediaStream interface that is called
// gtk.MediaFile.
//
// Apart from application-facing API for stream playback, GtkMediaStream has a
// number of APIs that are only useful for implementations and should not be
// used in applications: gtk.MediaStream.Prepared(),
// gtk.MediaStream.Unprepared(), gtk.MediaStream.Update(),
// gtk.MediaStream.Ended(), gtk.MediaStream.SeekSuccess(),
// gtk.MediaStream.SeekFailed(), gtk.MediaStream.GError(),
// gtk.MediaStream.Error(), gtk.MediaStream.ErrorValist().
type MediaStream struct {
	_ [0]func() // equal guard
	*coreglib.Object

	gdk.Paintable
}

var (
	_ coreglib.Objector = (*MediaStream)(nil)
)

// MediaStreamer describes types inherited from class MediaStream.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type MediaStreamer interface {
	coreglib.Objector
	baseMediaStream() *MediaStream
}

var _ MediaStreamer = (*MediaStream)(nil)

func init() {
	coreglib.RegisterClassInfo[*MediaStream, *MediaStreamClass, MediaStreamOverrides](
		GTypeMediaStream,
		initMediaStreamClass,
		wrapMediaStream,
		defaultMediaStreamOverrides,
	)
}

func initMediaStreamClass(gclass unsafe.Pointer, overrides MediaStreamOverrides, classInitFunc func(*MediaStreamClass)) {
	if classInitFunc != nil {
		class := (*MediaStreamClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapMediaStream(obj *coreglib.Object) *MediaStream {
	return &MediaStream{
		Object: obj,
		Paintable: gdk.Paintable{
			Object: obj,
		},
	}
}

func marshalMediaStream(p uintptr) (interface{}, error) {
	return wrapMediaStream(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *MediaStream) baseMediaStream() *MediaStream {
	return v
}

// BaseMediaStream returns the underlying base object.
func BaseMediaStream(obj MediaStreamer) *MediaStream {
	return obj.baseMediaStream()
}

// MediaStreamClass: instance of this type is always passed by reference.
type MediaStreamClass struct {
	*mediaStreamClass
}

// mediaStreamClass is the struct that's finalized.
type mediaStreamClass struct {
	native unsafe.Pointer
}

var GIRInfoMediaStreamClass = girepository.MustFind("Gtk", "MediaStreamClass")
