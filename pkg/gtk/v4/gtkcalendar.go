// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gtk4_Calendar_ConnectPrevYear(gpointer, guintptr);
// extern void _gotk4_gtk4_Calendar_ConnectPrevMonth(gpointer, guintptr);
// extern void _gotk4_gtk4_Calendar_ConnectNextYear(gpointer, guintptr);
// extern void _gotk4_gtk4_Calendar_ConnectNextMonth(gpointer, guintptr);
// extern void _gotk4_gtk4_Calendar_ConnectDaySelected(gpointer, guintptr);
import "C"

// GType values.
var (
	GTypeCalendar = coreglib.Type(girepository.MustFind("Gtk", "Calendar").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeCalendar, F: marshalCalendar},
	})
}

// Calendar: GtkCalendar is a widget that displays a Gregorian calendar, one
// month at a time.
//
// !An example GtkCalendar (calendar.png)
//
// A GtkCalendar can be created with gtk.Calendar.New.
//
// The date that is currently displayed can be altered with
// gtk.Calendar.SelectDay().
//
// To place a visual marker on a particular day, use gtk.Calendar.MarkDay() and
// to remove the marker, gtk.Calendar.UnmarkDay(). Alternative, all marks can be
// cleared with gtk.Calendar.ClearMarks().
//
// The selected date can be retrieved from a GtkCalendar using
// gtk.Calendar.GetDate().
//
// Users should be aware that, although the Gregorian calendar is the legal
// calendar in most countries, it was adopted progressively between 1582 and
// 1929. Display before these dates is likely to be historically incorrect.
//
// CSS nodes
//
//    calendar.view
//    ├── header
//    │   ├── button
//    │   ├── stack.month
//    │   ├── button
//    │   ├── button
//    │   ├── label.year
//    │   ╰── button
//    ╰── grid
//        ╰── label[.day-name][.week-number][.day-number][.other-month][.today]
//
//
// GtkCalendar has a main node with name calendar. It contains a subnode called
// header containing the widgets for switching between years and months.
//
// The grid subnode contains all day labels, including week numbers on the left
// (marked with the .week-number css class) and day names on top (marked with
// the .day-name css class).
//
// Day labels that belong to the previous or next month get the .other-month
// style class. The label of the current day get the .today style class.
//
// Marked day labels get the :selected state assigned.
type Calendar struct {
	_ [0]func() // equal guard
	Widget
}

var (
	_ Widgetter = (*Calendar)(nil)
)

func wrapCalendar(obj *coreglib.Object) *Calendar {
	return &Calendar{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			Accessible: Accessible{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
			ConstraintTarget: ConstraintTarget{
				Object: obj,
			},
		},
	}
}

func marshalCalendar(p uintptr) (interface{}, error) {
	return wrapCalendar(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectDaySelected is emitted when the user selects a day.
func (v *Calendar) ConnectDaySelected(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "day-selected", false, unsafe.Pointer(C._gotk4_gtk4_Calendar_ConnectDaySelected), f)
}

// ConnectNextMonth is emitted when the user switched to the next month.
func (v *Calendar) ConnectNextMonth(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "next-month", false, unsafe.Pointer(C._gotk4_gtk4_Calendar_ConnectNextMonth), f)
}

// ConnectNextYear is emitted when user switched to the next year.
func (v *Calendar) ConnectNextYear(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "next-year", false, unsafe.Pointer(C._gotk4_gtk4_Calendar_ConnectNextYear), f)
}

// ConnectPrevMonth is emitted when the user switched to the previous month.
func (v *Calendar) ConnectPrevMonth(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "prev-month", false, unsafe.Pointer(C._gotk4_gtk4_Calendar_ConnectPrevMonth), f)
}

// ConnectPrevYear is emitted when user switched to the previous year.
func (v *Calendar) ConnectPrevYear(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "prev-year", false, unsafe.Pointer(C._gotk4_gtk4_Calendar_ConnectPrevYear), f)
}
