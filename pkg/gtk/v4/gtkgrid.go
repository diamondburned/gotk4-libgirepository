// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeGrid = coreglib.Type(girepository.MustFind("Gtk", "Grid").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeGrid, F: marshalGrid},
	})
}

// GridOverrides contains methods that are overridable.
type GridOverrides struct {
}

func defaultGridOverrides(v *Grid) GridOverrides {
	return GridOverrides{}
}

// Grid: GtkGrid is a container which arranges its child widgets in rows and
// columns.
//
// !An example GtkGrid (grid.png)
//
// It supports arbitrary positions and horizontal/vertical spans.
//
// Children are added using gtk.Grid.Attach(). They can span multiple rows or
// columns. It is also possible to add a child next to an existing child, using
// gtk.Grid.AttachNextTo(). To remove a child from the grid, use
// gtk.Grid.Remove().
//
// The behaviour of GtkGrid when several children occupy the same grid cell is
// undefined.
//
//
// GtkGrid as GtkBuildable
//
// Every child in a GtkGrid has access to a custom gtk.Buildable element, called
// ´<layout>´. It can by used to specify a position in the grid and optionally
// spans. All properties that can be used in the ´<layout>´ element are
// implemented by gtk.GridLayoutChild.
//
// It is implemented by GtkWidget using gtk.LayoutManager.
//
// To showcase it, here is a simple example:
//
//    <object class="GtkGrid" id="my_grid">
//      <child>
//        <object class="GtkButton" id="button1">
//          <property name="label">Button 1</property>
//          <layout>
//            <property name="column">0</property>
//            <property name="row">0</property>
//          </layout>
//        </object>
//      </child>
//      <child>
//        <object class="GtkButton" id="button2">
//          <property name="label">Button 2</property>
//          <layout>
//            <property name="column">1</property>
//            <property name="row">0</property>
//          </layout>
//        </object>
//      </child>
//      <child>
//        <object class="GtkButton" id="button3">
//          <property name="label">Button 3</property>
//          <layout>
//            <property name="column">2</property>
//            <property name="row">0</property>
//            <property name="row-span">2</property>
//          </layout>
//        </object>
//      </child>
//      <child>
//        <object class="GtkButton" id="button4">
//          <property name="label">Button 4</property>
//          <layout>
//            <property name="column">0</property>
//            <property name="row">1</property>
//            <property name="column-span">2</property>
//          </layout>
//        </object>
//      </child>
//    </object>
//
//
// It organizes the first two buttons side-by-side in one cell each. The third
// button is in the last column but spans across two rows. This is defined by
// the ´row-span´ property. The last button is located in the second row and
// spans across two columns, which is defined by the ´column-span´ property.
//
//
// CSS nodes
//
// GtkGrid uses a single CSS node with name grid.
//
//
// Accessibility
//
// GtkGrid uses the GTK_ACCESSIBLE_ROLE_GROUP role.
type Grid struct {
	_ [0]func() // equal guard
	Widget

	*coreglib.Object
	Orientable
}

var (
	_ Widgetter         = (*Grid)(nil)
	_ coreglib.Objector = (*Grid)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*Grid, *GridClass, GridOverrides](
		GTypeGrid,
		initGridClass,
		wrapGrid,
		defaultGridOverrides,
	)
}

func initGridClass(gclass unsafe.Pointer, overrides GridOverrides, classInitFunc func(*GridClass)) {
	if classInitFunc != nil {
		class := (*GridClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapGrid(obj *coreglib.Object) *Grid {
	return &Grid{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			Accessible: Accessible{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
			ConstraintTarget: ConstraintTarget{
				Object: obj,
			},
		},
		Object: obj,
		Orientable: Orientable{
			Object: obj,
		},
	}
}

func marshalGrid(p uintptr) (interface{}, error) {
	return wrapGrid(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// GridClass: instance of this type is always passed by reference.
type GridClass struct {
	*gridClass
}

// gridClass is the struct that's finalized.
type gridClass struct {
	native unsafe.Pointer
}

var GIRInfoGridClass = girepository.MustFind("Gtk", "GridClass")
