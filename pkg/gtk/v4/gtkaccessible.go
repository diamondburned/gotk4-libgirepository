// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeAccessible = coreglib.Type(girepository.MustFind("Gtk", "Accessible").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeAccessible, F: marshalAccessible},
	})
}

// Accessible: GtkAccessible is an interface for describing UI elements for
// Assistive Technologies.
//
// Every accessible implementation has:
//
//    - a “role”, represented by a value of the gtk.AccessibleRole
//      enumeration
//    - an “attribute”, represented by a set of gtk.AccessibleState,
//      gtk.AccessibleProperty and gtk.AccessibleRelation values
//
// The role cannot be changed after instantiating a GtkAccessible
// implementation.
//
// The attributes are updated every time a UI element's state changes in a way
// that should be reflected by assistive technologies. For instance, if a
// GtkWidget visibility changes, the GTK_ACCESSIBLE_STATE_HIDDEN state will also
// change to reflect the gtk.Widget:visible property.
//
// Accessible wraps an interface. This means the user can get the
// underlying type by calling Cast().
type Accessible struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Accessible)(nil)
)

// Accessibler describes Accessible's interface methods.
type Accessibler interface {
	coreglib.Objector

	baseAccessible() *Accessible
}

var _ Accessibler = (*Accessible)(nil)

func wrapAccessible(obj *coreglib.Object) *Accessible {
	return &Accessible{
		Object: obj,
	}
}

func marshalAccessible(p uintptr) (interface{}, error) {
	return wrapAccessible(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *Accessible) baseAccessible() *Accessible {
	return v
}

// BaseAccessible returns the underlying base object.
func BaseAccessible(obj Accessibler) *Accessible {
	return obj.baseAccessible()
}
