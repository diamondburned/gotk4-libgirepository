// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeVideo = coreglib.Type(girepository.MustFind("Gtk", "Video").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeVideo, F: marshalVideo},
	})
}

// VideoOverrides contains methods that are overridable.
type VideoOverrides struct {
}

func defaultVideoOverrides(v *Video) VideoOverrides {
	return VideoOverrides{}
}

// Video: GtkVideo is a widget to show a GtkMediaStream with media controls.
//
// !An example GtkVideo (video.png)
//
// The controls are available separately as gtk.MediaControls. If you just want
// to display a video without controls, you can treat it like any other
// paintable and for example put it into a gtk.Picture.
//
// GtkVideo aims to cover use cases such as previews, embedded animations, etc.
// It supports autoplay, looping, and simple media controls. It does not have
// support for video overlays, multichannel audio, device selection, or input.
// If you are writing a full-fledged video player, you may want to use the
// gdk.Paintable API and a media framework such as Gstreamer directly.
type Video struct {
	_ [0]func() // equal guard
	Widget
}

var (
	_ Widgetter = (*Video)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*Video, *VideoClass, VideoOverrides](
		GTypeVideo,
		initVideoClass,
		wrapVideo,
		defaultVideoOverrides,
	)
}

func initVideoClass(gclass unsafe.Pointer, overrides VideoOverrides, classInitFunc func(*VideoClass)) {
	if classInitFunc != nil {
		class := (*VideoClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapVideo(obj *coreglib.Object) *Video {
	return &Video{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			Accessible: Accessible{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
			ConstraintTarget: ConstraintTarget{
				Object: obj,
			},
		},
	}
}

func marshalVideo(p uintptr) (interface{}, error) {
	return wrapVideo(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// VideoClass: instance of this type is always passed by reference.
type VideoClass struct {
	*videoClass
}

// videoClass is the struct that's finalized.
type videoClass struct {
	native unsafe.Pointer
}

var GIRInfoVideoClass = girepository.MustFind("Gtk", "VideoClass")
