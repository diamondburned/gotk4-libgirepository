// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeBoxLayout = coreglib.Type(girepository.MustFind("Gtk", "BoxLayout").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeBoxLayout, F: marshalBoxLayout},
	})
}

// BoxLayoutOverrides contains methods that are overridable.
type BoxLayoutOverrides struct {
}

func defaultBoxLayoutOverrides(v *BoxLayout) BoxLayoutOverrides {
	return BoxLayoutOverrides{}
}

// BoxLayout: GtkBoxLayout is a layout manager that arranges children in a
// single row or column.
//
// Whether it is a row or column depends on the value of its
// gtk.Orientable:orientation property. Within the other dimension all children
// all allocated the same size. The GtkBoxLayout will respect the
// gtk.Widget:halign and gtk.Widget:valign properties of each child widget.
//
// If you want all children to be assigned the same size, you can use the
// gtk.BoxLayout:homogeneous property.
//
// If you want to specify the amount of space placed between each child, you can
// use the gtk.BoxLayout:spacing property.
type BoxLayout struct {
	_ [0]func() // equal guard
	LayoutManager

	*coreglib.Object
	Orientable
}

var (
	_ LayoutManagerer   = (*BoxLayout)(nil)
	_ coreglib.Objector = (*BoxLayout)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*BoxLayout, *BoxLayoutClass, BoxLayoutOverrides](
		GTypeBoxLayout,
		initBoxLayoutClass,
		wrapBoxLayout,
		defaultBoxLayoutOverrides,
	)
}

func initBoxLayoutClass(gclass unsafe.Pointer, overrides BoxLayoutOverrides, classInitFunc func(*BoxLayoutClass)) {
	if classInitFunc != nil {
		class := (*BoxLayoutClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapBoxLayout(obj *coreglib.Object) *BoxLayout {
	return &BoxLayout{
		LayoutManager: LayoutManager{
			Object: obj,
		},
		Object: obj,
		Orientable: Orientable{
			Object: obj,
		},
	}
}

func marshalBoxLayout(p uintptr) (interface{}, error) {
	return wrapBoxLayout(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// BoxLayoutClass: instance of this type is always passed by reference.
type BoxLayoutClass struct {
	*boxLayoutClass
}

// boxLayoutClass is the struct that's finalized.
type boxLayoutClass struct {
	native unsafe.Pointer
}

var GIRInfoBoxLayoutClass = girepository.MustFind("Gtk", "BoxLayoutClass")
