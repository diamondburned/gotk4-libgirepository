// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeOverlayLayout      = coreglib.Type(girepository.MustFind("Gtk", "OverlayLayout").RegisteredGType())
	GTypeOverlayLayoutChild = coreglib.Type(girepository.MustFind("Gtk", "OverlayLayoutChild").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeOverlayLayout, F: marshalOverlayLayout},
		coreglib.TypeMarshaler{T: GTypeOverlayLayoutChild, F: marshalOverlayLayoutChild},
	})
}

// OverlayLayoutOverrides contains methods that are overridable.
type OverlayLayoutOverrides struct {
}

func defaultOverlayLayoutOverrides(v *OverlayLayout) OverlayLayoutOverrides {
	return OverlayLayoutOverrides{}
}

// OverlayLayout: GtkOverlayLayout is the layout manager used by GtkOverlay.
//
// It places widgets as overlays on top of the main child.
//
// This is not a reusable layout manager, since it expects its widget to be a
// GtkOverlay. It only listed here so that its layout properties get documented.
type OverlayLayout struct {
	_ [0]func() // equal guard
	LayoutManager
}

var (
	_ LayoutManagerer = (*OverlayLayout)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*OverlayLayout, *OverlayLayoutClass, OverlayLayoutOverrides](
		GTypeOverlayLayout,
		initOverlayLayoutClass,
		wrapOverlayLayout,
		defaultOverlayLayoutOverrides,
	)
}

func initOverlayLayoutClass(gclass unsafe.Pointer, overrides OverlayLayoutOverrides, classInitFunc func(*OverlayLayoutClass)) {
	if classInitFunc != nil {
		class := (*OverlayLayoutClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapOverlayLayout(obj *coreglib.Object) *OverlayLayout {
	return &OverlayLayout{
		LayoutManager: LayoutManager{
			Object: obj,
		},
	}
}

func marshalOverlayLayout(p uintptr) (interface{}, error) {
	return wrapOverlayLayout(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// OverlayLayoutChildOverrides contains methods that are overridable.
type OverlayLayoutChildOverrides struct {
}

func defaultOverlayLayoutChildOverrides(v *OverlayLayoutChild) OverlayLayoutChildOverrides {
	return OverlayLayoutChildOverrides{}
}

// OverlayLayoutChild: GtkLayoutChild subclass for children in a
// GtkOverlayLayout.
type OverlayLayoutChild struct {
	_ [0]func() // equal guard
	LayoutChild
}

var (
	_ LayoutChilder = (*OverlayLayoutChild)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*OverlayLayoutChild, *OverlayLayoutChildClass, OverlayLayoutChildOverrides](
		GTypeOverlayLayoutChild,
		initOverlayLayoutChildClass,
		wrapOverlayLayoutChild,
		defaultOverlayLayoutChildOverrides,
	)
}

func initOverlayLayoutChildClass(gclass unsafe.Pointer, overrides OverlayLayoutChildOverrides, classInitFunc func(*OverlayLayoutChildClass)) {
	if classInitFunc != nil {
		class := (*OverlayLayoutChildClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapOverlayLayoutChild(obj *coreglib.Object) *OverlayLayoutChild {
	return &OverlayLayoutChild{
		LayoutChild: LayoutChild{
			Object: obj,
		},
	}
}

func marshalOverlayLayoutChild(p uintptr) (interface{}, error) {
	return wrapOverlayLayoutChild(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// OverlayLayoutChildClass: instance of this type is always passed by reference.
type OverlayLayoutChildClass struct {
	*overlayLayoutChildClass
}

// overlayLayoutChildClass is the struct that's finalized.
type overlayLayoutChildClass struct {
	native unsafe.Pointer
}

var GIRInfoOverlayLayoutChildClass = girepository.MustFind("Gtk", "OverlayLayoutChildClass")

// OverlayLayoutClass: instance of this type is always passed by reference.
type OverlayLayoutClass struct {
	*overlayLayoutClass
}

// overlayLayoutClass is the struct that's finalized.
type overlayLayoutClass struct {
	native unsafe.Pointer
}

var GIRInfoOverlayLayoutClass = girepository.MustFind("Gtk", "OverlayLayoutClass")
