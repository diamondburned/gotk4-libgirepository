// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeConstraintGuide = coreglib.Type(girepository.MustFind("Gtk", "ConstraintGuide").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeConstraintGuide, F: marshalConstraintGuide},
	})
}

// ConstraintGuideOverrides contains methods that are overridable.
type ConstraintGuideOverrides struct {
}

func defaultConstraintGuideOverrides(v *ConstraintGuide) ConstraintGuideOverrides {
	return ConstraintGuideOverrides{}
}

// ConstraintGuide: GtkConstraintGuide is an invisible layout element in a
// GtkConstraintLayout.
//
// The GtkConstraintLayout treats guides like widgets. They can be used as the
// source or target of a GtkConstraint.
//
// Guides have a minimum, maximum and natural size. Depending on the constraints
// that are applied, they can act like a guideline that widgets can be aligned
// to, or like *flexible space*.
//
// Unlike a GtkWidget, a GtkConstraintGuide will not be drawn.
type ConstraintGuide struct {
	_ [0]func() // equal guard
	*coreglib.Object

	ConstraintTarget
}

var (
	_ coreglib.Objector = (*ConstraintGuide)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*ConstraintGuide, *ConstraintGuideClass, ConstraintGuideOverrides](
		GTypeConstraintGuide,
		initConstraintGuideClass,
		wrapConstraintGuide,
		defaultConstraintGuideOverrides,
	)
}

func initConstraintGuideClass(gclass unsafe.Pointer, overrides ConstraintGuideOverrides, classInitFunc func(*ConstraintGuideClass)) {
	if classInitFunc != nil {
		class := (*ConstraintGuideClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapConstraintGuide(obj *coreglib.Object) *ConstraintGuide {
	return &ConstraintGuide{
		Object: obj,
		ConstraintTarget: ConstraintTarget{
			Object: obj,
		},
	}
}

func marshalConstraintGuide(p uintptr) (interface{}, error) {
	return wrapConstraintGuide(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConstraintGuideClass: instance of this type is always passed by reference.
type ConstraintGuideClass struct {
	*constraintGuideClass
}

// constraintGuideClass is the struct that's finalized.
type constraintGuideClass struct {
	native unsafe.Pointer
}

var GIRInfoConstraintGuideClass = girepository.MustFind("Gtk", "ConstraintGuideClass")
