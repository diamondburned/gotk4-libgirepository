// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gtk4_Statusbar_ConnectTextPushed(gpointer, guint, gchar*, guintptr);
// extern void _gotk4_gtk4_Statusbar_ConnectTextPopped(gpointer, guint, gchar*, guintptr);
import "C"

// GType values.
var (
	GTypeStatusbar = coreglib.Type(girepository.MustFind("Gtk", "Statusbar").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeStatusbar, F: marshalStatusbar},
	})
}

// Statusbar: GtkStatusbar widget is usually placed along the bottom of an
// application's main gtk.Window.
//
// !An example GtkStatusbar (statusbar.png)
//
// A GtkStatusBar may provide a regular commentary of the application's status
// (as is usually the case in a web browser, for example), or may be used to
// simply output a message when the status changes, (when an upload is complete
// in an FTP client, for example).
//
// Status bars in GTK maintain a stack of messages. The message at the top of
// the each bar’s stack is the one that will currently be displayed.
//
// Any messages added to a statusbar’s stack must specify a context id that is
// used to uniquely identify the source of a message. This context id can be
// generated by gtk.Statusbar.GetContextID(), given a message and the statusbar
// that it will be added to. Note that messages are stored in a stack, and when
// choosing which message to display, the stack structure is adhered to,
// regardless of the context identifier of a message.
//
// One could say that a statusbar maintains one stack of messages for display
// purposes, but allows multiple message producers to maintain sub-stacks of the
// messages they produced (via context ids).
//
// Status bars are created using gtk.Statusbar.New.
//
// Messages are added to the bar’s stack with gtk.Statusbar.Push().
//
// The message at the top of the stack can be removed using gtk.Statusbar.Pop().
// A message can be removed from anywhere in the stack if its message id was
// recorded at the time it was added. This is done using gtk.Statusbar.Remove().
//
//
// CSS node
//
// GtkStatusbar has a single CSS node with name statusbar.
type Statusbar struct {
	_ [0]func() // equal guard
	Widget
}

var (
	_ Widgetter = (*Statusbar)(nil)
)

func wrapStatusbar(obj *coreglib.Object) *Statusbar {
	return &Statusbar{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			Accessible: Accessible{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
			ConstraintTarget: ConstraintTarget{
				Object: obj,
			},
		},
	}
}

func marshalStatusbar(p uintptr) (interface{}, error) {
	return wrapStatusbar(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectTextPopped is emitted whenever a new message is popped off a
// statusbar's stack.
func (v *Statusbar) ConnectTextPopped(f func(contextId uint, text string)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "text-popped", false, unsafe.Pointer(C._gotk4_gtk4_Statusbar_ConnectTextPopped), f)
}

// ConnectTextPushed is emitted whenever a new message gets pushed onto a
// statusbar's stack.
func (v *Statusbar) ConnectTextPushed(f func(contextId uint, text string)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "text-pushed", false, unsafe.Pointer(C._gotk4_gtk4_Statusbar_ConnectTextPushed), f)
}
