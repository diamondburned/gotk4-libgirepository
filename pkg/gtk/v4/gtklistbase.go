// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeListBase = coreglib.Type(girepository.MustFind("Gtk", "ListBase").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeListBase, F: marshalListBase},
	})
}

// ListBase: GtkListBase is the abstract base class for GTK's list widgets.
type ListBase struct {
	_ [0]func() // equal guard
	Widget

	*coreglib.Object
	Orientable
	Scrollable
}

var (
	_ Widgetter         = (*ListBase)(nil)
	_ coreglib.Objector = (*ListBase)(nil)
)

// ListBaser describes types inherited from class ListBase.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type ListBaser interface {
	coreglib.Objector
	baseListBase() *ListBase
}

var _ ListBaser = (*ListBase)(nil)

func wrapListBase(obj *coreglib.Object) *ListBase {
	return &ListBase{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			Accessible: Accessible{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
			ConstraintTarget: ConstraintTarget{
				Object: obj,
			},
		},
		Object: obj,
		Orientable: Orientable{
			Object: obj,
		},
		Scrollable: Scrollable{
			Object: obj,
		},
	}
}

func marshalListBase(p uintptr) (interface{}, error) {
	return wrapListBase(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *ListBase) baseListBase() *ListBase {
	return v
}

// BaseListBase returns the underlying base object.
func BaseListBase(obj ListBaser) *ListBase {
	return obj.baseListBase()
}
