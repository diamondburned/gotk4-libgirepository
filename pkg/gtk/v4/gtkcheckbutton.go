// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gtk4_CheckButton_ConnectToggled(gpointer, guintptr);
// extern void _gotk4_gtk4_CheckButton_ConnectActivate(gpointer, guintptr);
import "C"

// GType values.
var (
	GTypeCheckButton = coreglib.Type(girepository.MustFind("Gtk", "CheckButton").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeCheckButton, F: marshalCheckButton},
	})
}

// CheckButtonOverrides contains methods that are overridable.
type CheckButtonOverrides struct {
}

func defaultCheckButtonOverrides(v *CheckButton) CheckButtonOverrides {
	return CheckButtonOverrides{}
}

// CheckButton: GtkCheckButton places a label next to an indicator.
//
// !Example GtkCheckButtons (check-button.png)
//
// A GtkCheckButton is created by calling either gtk.CheckButton.New or
// gtk.CheckButton.NewWithLabel.
//
// The state of a GtkCheckButton can be set specifically using
// gtk.CheckButton.SetActive(), and retrieved using gtk.CheckButton.GetActive().
//
//
// Inconsistent state
//
// In addition to "on" and "off", check buttons can be an "in between" state
// that is neither on nor off. This can be used e.g. when the user has selected
// a range of elements (such as some text or spreadsheet cells) that are
// affected by a check button, and the current values in that range are
// inconsistent.
//
// To set a GtkCheckButton to inconsistent state, use
// gtk.CheckButton.SetInconsistent().
//
//
// Grouping
//
// Check buttons can be grouped together, to form mutually exclusive groups -
// only one of the buttons can be toggled at a time, and toggling another one
// will switch the currently toggled one off.
//
// Grouped check buttons use a different indicator, and are commonly referred to
// as *radio buttons*.
//
// !Example GtkCheckButtons (radio-button.png)
//
// To add a GtkCheckButton to a group, use gtk.CheckButton.SetGroup().
//
// CSS nodes
//
//    checkbutton[.text-button]
//    ├── check
//    ╰── [label]
//
//
// A GtkCheckButton has a main node with name checkbutton. If the
// gtk.CheckButton:label property is set, it contains a label child. The
// indicator node is named check when no group is set, and radio if the
// checkbutton is grouped together with other checkbuttons.
//
//
// Accessibility
//
// GtkCheckButton uses the GTK_ACCESSIBLE_ROLE_CHECKBOX role.
type CheckButton struct {
	_ [0]func() // equal guard
	Widget

	*coreglib.Object
	Actionable
}

var (
	_ Widgetter         = (*CheckButton)(nil)
	_ coreglib.Objector = (*CheckButton)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*CheckButton, *CheckButtonClass, CheckButtonOverrides](
		GTypeCheckButton,
		initCheckButtonClass,
		wrapCheckButton,
		defaultCheckButtonOverrides,
	)
}

func initCheckButtonClass(gclass unsafe.Pointer, overrides CheckButtonOverrides, classInitFunc func(*CheckButtonClass)) {
	if classInitFunc != nil {
		class := (*CheckButtonClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapCheckButton(obj *coreglib.Object) *CheckButton {
	return &CheckButton{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			Accessible: Accessible{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
			ConstraintTarget: ConstraintTarget{
				Object: obj,
			},
		},
		Object: obj,
		Actionable: Actionable{
			Widget: Widget{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				Accessible: Accessible{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
				ConstraintTarget: ConstraintTarget{
					Object: obj,
				},
			},
		},
	}
}

func marshalCheckButton(p uintptr) (interface{}, error) {
	return wrapCheckButton(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectActivate is emitted to when the check button is activated.
//
// The ::activate signal on GtkCheckButton is an action signal and emitting it
// causes the button to animate press then release.
//
// Applications should never connect to this signal, but use the
// gtk.CheckButton::toggled signal.
func (v *CheckButton) ConnectActivate(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "activate", false, unsafe.Pointer(C._gotk4_gtk4_CheckButton_ConnectActivate), f)
}

// ConnectToggled is emitted when the buttons's gtk.CheckButton:active property
// changes.
func (v *CheckButton) ConnectToggled(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "toggled", false, unsafe.Pointer(C._gotk4_gtk4_CheckButton_ConnectToggled), f)
}

// CheckButtonClass: instance of this type is always passed by reference.
type CheckButtonClass struct {
	*checkButtonClass
}

// checkButtonClass is the struct that's finalized.
type checkButtonClass struct {
	native unsafe.Pointer
}

var GIRInfoCheckButtonClass = girepository.MustFind("Gtk", "CheckButtonClass")
