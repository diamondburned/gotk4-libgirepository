// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeSnapshot = coreglib.Type(girepository.MustFind("Gtk", "Snapshot").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeSnapshot, F: marshalSnapshot},
	})
}

// Snapshot: GtkSnapshot assists in creating GskRenderNodes for widgets.
//
// It functions in a similar way to a cairo context, and maintains a stack of
// render nodes and their associated transformations.
//
// The node at the top of the stack is the the one that gtk_snapshot_append_…
// functions operate on. Use the gtk_snapshot_push_… functions and
// gtk_snapshot_pop() to change the current node.
//
// The typical way to obtain a GtkSnapshot object is as an argument to the
// GtkWidgetClass.snapshot() vfunc. If you need to create your own GtkSnapshot,
// use gtk.Snapshot.New.
type Snapshot struct {
	_ [0]func() // equal guard
	gdk.Snapshot
}

var (
	_ gdk.Snapshotter = (*Snapshot)(nil)
)

func wrapSnapshot(obj *coreglib.Object) *Snapshot {
	return &Snapshot{
		Snapshot: gdk.Snapshot{
			Object: obj,
		},
	}
}

func marshalSnapshot(p uintptr) (interface{}, error) {
	return wrapSnapshot(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
