// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeSliceListModel = coreglib.Type(girepository.MustFind("Gtk", "SliceListModel").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeSliceListModel, F: marshalSliceListModel},
	})
}

// SliceListModelOverrides contains methods that are overridable.
type SliceListModelOverrides struct {
}

func defaultSliceListModelOverrides(v *SliceListModel) SliceListModelOverrides {
	return SliceListModelOverrides{}
}

// SliceListModel: GtkSliceListModel is a list model that presents a slice of
// another model.
//
// This is useful when implementing paging by setting the size to the number of
// elements per page and updating the offset whenever a different page is
// opened.
type SliceListModel struct {
	_ [0]func() // equal guard
	*coreglib.Object

	gio.ListModel
}

var (
	_ coreglib.Objector = (*SliceListModel)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*SliceListModel, *SliceListModelClass, SliceListModelOverrides](
		GTypeSliceListModel,
		initSliceListModelClass,
		wrapSliceListModel,
		defaultSliceListModelOverrides,
	)
}

func initSliceListModelClass(gclass unsafe.Pointer, overrides SliceListModelOverrides, classInitFunc func(*SliceListModelClass)) {
	if classInitFunc != nil {
		class := (*SliceListModelClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapSliceListModel(obj *coreglib.Object) *SliceListModel {
	return &SliceListModel{
		Object: obj,
		ListModel: gio.ListModel{
			Object: obj,
		},
	}
}

func marshalSliceListModel(p uintptr) (interface{}, error) {
	return wrapSliceListModel(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// SliceListModelClass: instance of this type is always passed by reference.
type SliceListModelClass struct {
	*sliceListModelClass
}

// sliceListModelClass is the struct that's finalized.
type sliceListModelClass struct {
	native unsafe.Pointer
}

var GIRInfoSliceListModelClass = girepository.MustFind("Gtk", "SliceListModelClass")
