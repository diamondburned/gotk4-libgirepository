// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern gboolean _gotk4_gtk4_LinkButton_ConnectActivateLink(gpointer, guintptr);
import "C"

// GType values.
var (
	GTypeLinkButton = coreglib.Type(girepository.MustFind("Gtk", "LinkButton").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeLinkButton, F: marshalLinkButton},
	})
}

// LinkButton: GtkLinkButton is a button with a hyperlink.
//
// !An example GtkLinkButton (link-button.png)
//
// It is useful to show quick links to resources.
//
// A link button is created by calling either gtk.LinkButton.New or
// gtk.LinkButton.NewWithLabel. If using the former, the URI you pass to the
// constructor is used as a label for the widget.
//
// The URI bound to a GtkLinkButton can be set specifically using
// gtk.LinkButton.SetURI().
//
// By default, GtkLinkButton calls gtk.ShowURI() when the button is clicked.
// This behaviour can be overridden by connecting to the
// gtk.LinkButton::activate-link signal and returning TRUE from the signal
// handler.
//
//
// CSS nodes
//
// GtkLinkButton has a single CSS node with name button. To differentiate it
// from a plain GtkButton, it gets the .link style class.
//
//
// Accessibility
//
// GtkLinkButton uses the K_ACCESSIBLE_ROLE_LINK role.
type LinkButton struct {
	_ [0]func() // equal guard
	Button
}

var (
	_ Widgetter         = (*LinkButton)(nil)
	_ coreglib.Objector = (*LinkButton)(nil)
)

func wrapLinkButton(obj *coreglib.Object) *LinkButton {
	return &LinkButton{
		Button: Button{
			Widget: Widget{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				Accessible: Accessible{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
				ConstraintTarget: ConstraintTarget{
					Object: obj,
				},
			},
			Object: obj,
			Actionable: Actionable{
				Widget: Widget{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					Accessible: Accessible{
						Object: obj,
					},
					Buildable: Buildable{
						Object: obj,
					},
					ConstraintTarget: ConstraintTarget{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalLinkButton(p uintptr) (interface{}, error) {
	return wrapLinkButton(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectActivateLink is emitted each time the GtkLinkButton is clicked.
//
// The default handler will call gtk.ShowURI() with the URI stored inside the
// gtk.LinkButton:uri property.
//
// To override the default behavior, you can connect to the ::activate-link
// signal and stop the propagation of the signal by returning TRUE from your
// handler.
func (v *LinkButton) ConnectActivateLink(f func() (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "activate-link", false, unsafe.Pointer(C._gotk4_gtk4_LinkButton_ConnectActivateLink), f)
}
