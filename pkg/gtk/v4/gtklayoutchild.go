// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeLayoutChild = coreglib.Type(girepository.MustFind("Gtk", "LayoutChild").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeLayoutChild, F: marshalLayoutChild},
	})
}

// LayoutChildOverrides contains methods that are overridable.
type LayoutChildOverrides struct {
}

func defaultLayoutChildOverrides(v *LayoutChild) LayoutChildOverrides {
	return LayoutChildOverrides{}
}

// LayoutChild: GtkLayoutChild is the base class for objects that are meant to
// hold layout properties.
//
// If a GtkLayoutManager has per-child properties, like their packing type, or
// the horizontal and vertical span, or the icon name, then the layout manager
// should use a GtkLayoutChild implementation to store those properties.
//
// A GtkLayoutChild instance is only ever valid while a widget is part of a
// layout.
type LayoutChild struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*LayoutChild)(nil)
)

// LayoutChilder describes types inherited from class LayoutChild.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type LayoutChilder interface {
	coreglib.Objector
	baseLayoutChild() *LayoutChild
}

var _ LayoutChilder = (*LayoutChild)(nil)

func init() {
	coreglib.RegisterClassInfo[*LayoutChild, *LayoutChildClass, LayoutChildOverrides](
		GTypeLayoutChild,
		initLayoutChildClass,
		wrapLayoutChild,
		defaultLayoutChildOverrides,
	)
}

func initLayoutChildClass(gclass unsafe.Pointer, overrides LayoutChildOverrides, classInitFunc func(*LayoutChildClass)) {
	if classInitFunc != nil {
		class := (*LayoutChildClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapLayoutChild(obj *coreglib.Object) *LayoutChild {
	return &LayoutChild{
		Object: obj,
	}
}

func marshalLayoutChild(p uintptr) (interface{}, error) {
	return wrapLayoutChild(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *LayoutChild) baseLayoutChild() *LayoutChild {
	return v
}

// BaseLayoutChild returns the underlying base object.
func BaseLayoutChild(obj LayoutChilder) *LayoutChild {
	return obj.baseLayoutChild()
}

// LayoutChildClass: instance of this type is always passed by reference.
type LayoutChildClass struct {
	*layoutChildClass
}

// layoutChildClass is the struct that's finalized.
type layoutChildClass struct {
	native unsafe.Pointer
}

var GIRInfoLayoutChildClass = girepository.MustFind("Gtk", "LayoutChildClass")
