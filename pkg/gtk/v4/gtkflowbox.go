// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gtk4_FlowBox_ConnectUnselectAll(gpointer, guintptr);
// extern void _gotk4_gtk4_FlowBox_ConnectToggleCursorChild(gpointer, guintptr);
// extern void _gotk4_gtk4_FlowBox_ConnectSelectedChildrenChanged(gpointer, guintptr);
// extern void _gotk4_gtk4_FlowBox_ConnectSelectAll(gpointer, guintptr);
// extern void _gotk4_gtk4_FlowBox_ConnectChildActivated(gpointer, void*, guintptr);
// extern void _gotk4_gtk4_FlowBox_ConnectActivateCursorChild(gpointer, guintptr);
// extern void _gotk4_gtk4_FlowBoxChild_ConnectActivate(gpointer, guintptr);
import "C"

// GType values.
var (
	GTypeFlowBox      = coreglib.Type(girepository.MustFind("Gtk", "FlowBox").RegisteredGType())
	GTypeFlowBoxChild = coreglib.Type(girepository.MustFind("Gtk", "FlowBoxChild").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeFlowBox, F: marshalFlowBox},
		coreglib.TypeMarshaler{T: GTypeFlowBoxChild, F: marshalFlowBoxChild},
	})
}

// FlowBoxCreateWidgetFunc: called for flow boxes that are bound to a
// GListModel.
//
// This function is called for each item that gets added to the model.
type FlowBoxCreateWidgetFunc func(item *coreglib.Object) (widget Widgetter)

// FlowBoxFilterFunc: function that will be called whenever a child changes or
// is added.
//
// It lets you control if the child should be visible or not.
type FlowBoxFilterFunc func(child *FlowBoxChild) (ok bool)

// FlowBoxForEachFunc: function used by gtk_flow_box_selected_foreach().
//
// It will be called on every selected child of the box.
type FlowBoxForEachFunc func(box *FlowBox, child *FlowBoxChild)

// FlowBoxSortFunc: function to compare two children to determine which should
// come first.
type FlowBoxSortFunc func(child1, child2 *FlowBoxChild) (gint int)

// FlowBox: GtkFlowBox puts child widgets in reflowing grid.
//
// For instance, with the horizontal orientation, the widgets will be arranged
// from left to right, starting a new row under the previous row when necessary.
// Reducing the width in this case will require more rows, so a larger height
// will be requested.
//
// Likewise, with the vertical orientation, the widgets will be arranged from
// top to bottom, starting a new column to the right when necessary. Reducing
// the height will require more columns, so a larger width will be requested.
//
// The size request of a GtkFlowBox alone may not be what you expect; if you
// need to be able to shrink it along both axes and dynamically reflow its
// children, you may have to wrap it in a GtkScrolledWindow to enable that.
//
// The children of a GtkFlowBox can be dynamically sorted and filtered.
//
// Although a GtkFlowBox must have only GtkFlowBoxChild children, you can add
// any kind of widget to it via gtk.FlowBox.Insert(), and a GtkFlowBoxChild
// widget will automatically be inserted between the box and the widget.
//
// Also see gtk.ListBox.
//
// CSS nodes
//
//    flowbox
//    ├── flowboxchild
//    │   ╰── <child>
//    ├── flowboxchild
//    │   ╰── <child>
//    ┊
//    ╰── [rubberband]
//
//
// GtkFlowBox uses a single CSS node with name flowbox. GtkFlowBoxChild uses a
// single CSS node with name flowboxchild. For rubberband selection, a subnode
// with name rubberband is used.
//
//
// Accessibility
//
// GtkFlowBox uses the GTK_ACCESSIBLE_ROLE_GRID role, and GtkFlowBoxChild uses
// the GTK_ACCESSIBLE_ROLE_GRID_CELL role.
type FlowBox struct {
	_ [0]func() // equal guard
	Widget

	*coreglib.Object
	Orientable
}

var (
	_ Widgetter         = (*FlowBox)(nil)
	_ coreglib.Objector = (*FlowBox)(nil)
)

func wrapFlowBox(obj *coreglib.Object) *FlowBox {
	return &FlowBox{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			Accessible: Accessible{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
			ConstraintTarget: ConstraintTarget{
				Object: obj,
			},
		},
		Object: obj,
		Orientable: Orientable{
			Object: obj,
		},
	}
}

func marshalFlowBox(p uintptr) (interface{}, error) {
	return wrapFlowBox(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectActivateCursorChild is emitted when the user activates the box.
//
// This is a keybinding signal (class.SignalAction.html).
func (v *FlowBox) ConnectActivateCursorChild(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "activate-cursor-child", false, unsafe.Pointer(C._gotk4_gtk4_FlowBox_ConnectActivateCursorChild), f)
}

// ConnectChildActivated is emitted when a child has been activated by the user.
func (v *FlowBox) ConnectChildActivated(f func(child *FlowBoxChild)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "child-activated", false, unsafe.Pointer(C._gotk4_gtk4_FlowBox_ConnectChildActivated), f)
}

// ConnectSelectAll is emitted to select all children of the box, if the
// selection mode permits it.
//
// This is a keybinding signal (class.SignalAction.html).
//
// The default bindings for this signal is <kbd>Ctrl</kbd>-<kbd>a</kbd>.
func (v *FlowBox) ConnectSelectAll(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "select-all", false, unsafe.Pointer(C._gotk4_gtk4_FlowBox_ConnectSelectAll), f)
}

// ConnectSelectedChildrenChanged is emitted when the set of selected children
// changes.
//
// Use gtk.FlowBox.SelectedForEach() or gtk.FlowBox.GetSelectedChildren() to
// obtain the selected children.
func (v *FlowBox) ConnectSelectedChildrenChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "selected-children-changed", false, unsafe.Pointer(C._gotk4_gtk4_FlowBox_ConnectSelectedChildrenChanged), f)
}

// ConnectToggleCursorChild is emitted to toggle the selection of the child that
// has the focus.
//
// This is a keybinding signal (class.SignalAction.html).
//
// The default binding for this signal is <kbd>Ctrl</kbd>-<kbd>Space</kbd>.
func (v *FlowBox) ConnectToggleCursorChild(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "toggle-cursor-child", false, unsafe.Pointer(C._gotk4_gtk4_FlowBox_ConnectToggleCursorChild), f)
}

// ConnectUnselectAll is emitted to unselect all children of the box, if the
// selection mode permits it.
//
// This is a keybinding signal (class.SignalAction.html).
//
// The default bindings for this signal is
// <kbd>Ctrl</kbd>-<kbd>Shift</kbd>-<kbd>a</kbd>.
func (v *FlowBox) ConnectUnselectAll(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "unselect-all", false, unsafe.Pointer(C._gotk4_gtk4_FlowBox_ConnectUnselectAll), f)
}

// FlowBoxChildOverrides contains methods that are overridable.
type FlowBoxChildOverrides struct {
}

func defaultFlowBoxChildOverrides(v *FlowBoxChild) FlowBoxChildOverrides {
	return FlowBoxChildOverrides{}
}

// FlowBoxChild: GtkFlowBoxChild is the kind of widget that can be added to a
// GtkFlowBox.
type FlowBoxChild struct {
	_ [0]func() // equal guard
	Widget
}

var (
	_ Widgetter = (*FlowBoxChild)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*FlowBoxChild, *FlowBoxChildClass, FlowBoxChildOverrides](
		GTypeFlowBoxChild,
		initFlowBoxChildClass,
		wrapFlowBoxChild,
		defaultFlowBoxChildOverrides,
	)
}

func initFlowBoxChildClass(gclass unsafe.Pointer, overrides FlowBoxChildOverrides, classInitFunc func(*FlowBoxChildClass)) {
	if classInitFunc != nil {
		class := (*FlowBoxChildClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapFlowBoxChild(obj *coreglib.Object) *FlowBoxChild {
	return &FlowBoxChild{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			Accessible: Accessible{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
			ConstraintTarget: ConstraintTarget{
				Object: obj,
			},
		},
	}
}

func marshalFlowBoxChild(p uintptr) (interface{}, error) {
	return wrapFlowBoxChild(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectActivate is emitted when the user activates a child widget in a
// GtkFlowBox.
//
// This can be happen either by clicking or double-clicking, or via a
// keybinding.
//
// This is a keybinding signal (class.SignalAction.html), but it can be used by
// applications for their own purposes.
//
// The default bindings are <kbd>Space</kbd> and <kbd>Enter</kbd>.
func (v *FlowBoxChild) ConnectActivate(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "activate", false, unsafe.Pointer(C._gotk4_gtk4_FlowBoxChild_ConnectActivate), f)
}

// FlowBoxChildClass: instance of this type is always passed by reference.
type FlowBoxChildClass struct {
	*flowBoxChildClass
}

// flowBoxChildClass is the struct that's finalized.
type flowBoxChildClass struct {
	native unsafe.Pointer
}

var GIRInfoFlowBoxChildClass = girepository.MustFind("Gtk", "FlowBoxChildClass")
