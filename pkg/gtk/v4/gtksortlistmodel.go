// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeSortListModel = coreglib.Type(girepository.MustFind("Gtk", "SortListModel").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeSortListModel, F: marshalSortListModel},
	})
}

// SortListModelOverrides contains methods that are overridable.
type SortListModelOverrides struct {
}

func defaultSortListModelOverrides(v *SortListModel) SortListModelOverrides {
	return SortListModelOverrides{}
}

// SortListModel: GtkSortListModel is a list model that sorts the elements of
// the underlying model according to a GtkSorter.
//
// The model can be set up to do incremental sorting, so that sorting long lists
// doesn't block the UI. See gtk.SortListModel.SetIncremental() for details.
//
// GtkSortListModel is a generic model and because of that it cannot take
// advantage of any external knowledge when sorting. If you run into performance
// issues with GtkSortListModel, it is strongly recommended that you write your
// own sorting list model.
type SortListModel struct {
	_ [0]func() // equal guard
	*coreglib.Object

	gio.ListModel
}

var (
	_ coreglib.Objector = (*SortListModel)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*SortListModel, *SortListModelClass, SortListModelOverrides](
		GTypeSortListModel,
		initSortListModelClass,
		wrapSortListModel,
		defaultSortListModelOverrides,
	)
}

func initSortListModelClass(gclass unsafe.Pointer, overrides SortListModelOverrides, classInitFunc func(*SortListModelClass)) {
	if classInitFunc != nil {
		class := (*SortListModelClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapSortListModel(obj *coreglib.Object) *SortListModel {
	return &SortListModel{
		Object: obj,
		ListModel: gio.ListModel{
			Object: obj,
		},
	}
}

func marshalSortListModel(p uintptr) (interface{}, error) {
	return wrapSortListModel(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// SortListModelClass: instance of this type is always passed by reference.
type SortListModelClass struct {
	*sortListModelClass
}

// sortListModelClass is the struct that's finalized.
type sortListModelClass struct {
	native unsafe.Pointer
}

var GIRInfoSortListModelClass = girepository.MustFind("Gtk", "SortListModelClass")
