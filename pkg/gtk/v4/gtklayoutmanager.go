// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeLayoutManager = coreglib.Type(girepository.MustFind("Gtk", "LayoutManager").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeLayoutManager, F: marshalLayoutManager},
	})
}

// LayoutManagerOverrides contains methods that are overridable.
type LayoutManagerOverrides struct {
}

func defaultLayoutManagerOverrides(v *LayoutManager) LayoutManagerOverrides {
	return LayoutManagerOverrides{}
}

// LayoutManager: layout managers are delegate classes that handle the preferred
// size and the allocation of a widget.
//
// You typically subclass GtkLayoutManager if you want to implement a layout
// policy for the children of a widget, or if you want to determine the size of
// a widget depending on its contents.
//
// Each GtkWidget can only have a GtkLayoutManager instance associated to it at
// any given time; it is possible, though, to replace the layout manager
// instance using gtk.Widget.SetLayoutManager().
//
//
// Layout properties
//
// A layout manager can expose properties for controlling the layout of each
// child, by creating an object type derived from gtk.LayoutChild and installing
// the properties on it as normal GObject properties.
//
// Each GtkLayoutChild instance storing the layout properties for a specific
// child is created through the gtk.LayoutManager.GetLayoutChild() method; a
// GtkLayoutManager controls the creation of its GtkLayoutChild instances by
// overriding the GtkLayoutManagerClass.create_layout_child() virtual function.
// The typical implementation should look like:
//
//    static GtkLayoutChild *
//    create_layout_child (GtkLayoutManager *manager,
//                         GtkWidget        *container,
//                         GtkWidget        *child)
//    {
//      return g_object_new (your_layout_child_get_type (),
//                           "layout-manager", manager,
//                           "child-widget", child,
//                           NULL);
//    }
//
//
// The gtk.LayoutChild:layout-manager and gtk.LayoutChild:child-widget
// properties on the newly created GtkLayoutChild instance are mandatory. The
// GtkLayoutManager will cache the newly created GtkLayoutChild instance until
// the widget is removed from its parent, or the parent removes the layout
// manager.
//
// Each GtkLayoutManager instance creating a GtkLayoutChild should use
// gtk.LayoutManager.GetLayoutChild() every time it needs to query the layout
// properties; each GtkLayoutChild instance should call
// gtk.LayoutManager.LayoutChanged() every time a property is updated, in order
// to queue a new size measuring and allocation.
type LayoutManager struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*LayoutManager)(nil)
)

// LayoutManagerer describes types inherited from class LayoutManager.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type LayoutManagerer interface {
	coreglib.Objector
	baseLayoutManager() *LayoutManager
}

var _ LayoutManagerer = (*LayoutManager)(nil)

func init() {
	coreglib.RegisterClassInfo[*LayoutManager, *LayoutManagerClass, LayoutManagerOverrides](
		GTypeLayoutManager,
		initLayoutManagerClass,
		wrapLayoutManager,
		defaultLayoutManagerOverrides,
	)
}

func initLayoutManagerClass(gclass unsafe.Pointer, overrides LayoutManagerOverrides, classInitFunc func(*LayoutManagerClass)) {
	if classInitFunc != nil {
		class := (*LayoutManagerClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapLayoutManager(obj *coreglib.Object) *LayoutManager {
	return &LayoutManager{
		Object: obj,
	}
}

func marshalLayoutManager(p uintptr) (interface{}, error) {
	return wrapLayoutManager(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *LayoutManager) baseLayoutManager() *LayoutManager {
	return v
}

// BaseLayoutManager returns the underlying base object.
func BaseLayoutManager(obj LayoutManagerer) *LayoutManager {
	return obj.baseLayoutManager()
}

// LayoutManagerClass: GtkLayoutManagerClass structure contains only private
// data, and should only be accessed through the provided API, or when
// subclassing LayoutManager.
//
// An instance of this type is always passed by reference.
type LayoutManagerClass struct {
	*layoutManagerClass
}

// layoutManagerClass is the struct that's finalized.
type layoutManagerClass struct {
	native unsafe.Pointer
}

var GIRInfoLayoutManagerClass = girepository.MustFind("Gtk", "LayoutManagerClass")

// LayoutChildType: type of LayoutChild used by this layout manager.
func (l *LayoutManagerClass) LayoutChildType() coreglib.Type {
	offset := GIRInfoLayoutManagerClass.StructFieldOffset("layout_child_type")
	valptr := (*coreglib.Type)(unsafe.Add(l.native, offset))
	var _v coreglib.Type // out
	_v = coreglib.Type(*valptr)
	return _v
}
