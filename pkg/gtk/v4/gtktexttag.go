// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeTextTag = coreglib.Type(girepository.MustFind("Gtk", "TextTag").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeTextTag, F: marshalTextTag},
	})
}

// TextTagOverrides contains methods that are overridable.
type TextTagOverrides struct {
}

func defaultTextTagOverrides(v *TextTag) TextTagOverrides {
	return TextTagOverrides{}
}

// TextTag: tag that can be applied to text contained in a GtkTextBuffer.
//
// You may wish to begin by reading the text widget conceptual overview
// (section-text-widget.html), which gives an overview of all the objects and
// data types related to the text widget and how they work together.
//
// Tags should be in the gtk.TextTagTable for a given GtkTextBuffer before using
// them with that buffer.
//
// gtk.TextBuffer.CreateTag() is the best way to create tags. See “gtk4-demo”
// for numerous examples.
//
// For each property of GtkTextTag, there is a “set” property, e.g. “font-set”
// corresponds to “font”. These “set” properties reflect whether a property has
// been set or not.
//
// They are maintained by GTK and you should not set them independently.
type TextTag struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*TextTag)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*TextTag, *TextTagClass, TextTagOverrides](
		GTypeTextTag,
		initTextTagClass,
		wrapTextTag,
		defaultTextTagOverrides,
	)
}

func initTextTagClass(gclass unsafe.Pointer, overrides TextTagOverrides, classInitFunc func(*TextTagClass)) {
	if classInitFunc != nil {
		class := (*TextTagClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapTextTag(obj *coreglib.Object) *TextTag {
	return &TextTag{
		Object: obj,
	}
}

func marshalTextTag(p uintptr) (interface{}, error) {
	return wrapTextTag(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// TextTagClass: instance of this type is always passed by reference.
type TextTagClass struct {
	*textTagClass
}

// textTagClass is the struct that's finalized.
type textTagClass struct {
	native unsafe.Pointer
}

var GIRInfoTextTagClass = girepository.MustFind("Gtk", "TextTagClass")
