// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gtk4_TextBuffer_ConnectUndo(gpointer, guintptr);
// extern void _gotk4_gtk4_TextBuffer_ConnectRemoveTag(gpointer, void*, void*, void*, guintptr);
// extern void _gotk4_gtk4_TextBuffer_ConnectRedo(gpointer, guintptr);
// extern void _gotk4_gtk4_TextBuffer_ConnectPasteDone(gpointer, void*, guintptr);
// extern void _gotk4_gtk4_TextBuffer_ConnectModifiedChanged(gpointer, guintptr);
// extern void _gotk4_gtk4_TextBuffer_ConnectMarkSet(gpointer, void*, void*, guintptr);
// extern void _gotk4_gtk4_TextBuffer_ConnectMarkDeleted(gpointer, void*, guintptr);
// extern void _gotk4_gtk4_TextBuffer_ConnectInsertText(gpointer, void*, gchar*, gint, guintptr);
// extern void _gotk4_gtk4_TextBuffer_ConnectInsertPaintable(gpointer, void*, void*, guintptr);
// extern void _gotk4_gtk4_TextBuffer_ConnectInsertChildAnchor(gpointer, void*, void*, guintptr);
// extern void _gotk4_gtk4_TextBuffer_ConnectEndUserAction(gpointer, guintptr);
// extern void _gotk4_gtk4_TextBuffer_ConnectDeleteRange(gpointer, void*, void*, guintptr);
// extern void _gotk4_gtk4_TextBuffer_ConnectChanged(gpointer, guintptr);
// extern void _gotk4_gtk4_TextBuffer_ConnectBeginUserAction(gpointer, guintptr);
// extern void _gotk4_gtk4_TextBuffer_ConnectApplyTag(gpointer, void*, void*, void*, guintptr);
import "C"

// GType values.
var (
	GTypeTextBuffer = coreglib.Type(girepository.MustFind("Gtk", "TextBuffer").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeTextBuffer, F: marshalTextBuffer},
	})
}

// TextBufferOverrides contains methods that are overridable.
type TextBufferOverrides struct {
}

func defaultTextBufferOverrides(v *TextBuffer) TextBufferOverrides {
	return TextBufferOverrides{}
}

// TextBuffer stores text and attributes for display in a GtkTextView.
//
// You may wish to begin by reading the text widget conceptual overview
// (section-text-widget.html), which gives an overview of all the objects and
// data types related to the text widget and how they work together.
type TextBuffer struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*TextBuffer)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*TextBuffer, *TextBufferClass, TextBufferOverrides](
		GTypeTextBuffer,
		initTextBufferClass,
		wrapTextBuffer,
		defaultTextBufferOverrides,
	)
}

func initTextBufferClass(gclass unsafe.Pointer, overrides TextBufferOverrides, classInitFunc func(*TextBufferClass)) {
	if classInitFunc != nil {
		class := (*TextBufferClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapTextBuffer(obj *coreglib.Object) *TextBuffer {
	return &TextBuffer{
		Object: obj,
	}
}

func marshalTextBuffer(p uintptr) (interface{}, error) {
	return wrapTextBuffer(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectApplyTag is emitted to apply a tag to a range of text in a
// GtkTextBuffer.
//
// Applying actually occurs in the default handler.
//
// Note that if your handler runs before the default handler it must not
// invalidate the start and end iters (or has to revalidate them).
//
// See also: gtk.TextBuffer.ApplyTag(), gtk.TextBuffer.InsertWithTags(),
// gtk.TextBuffer.InsertRange().
func (v *TextBuffer) ConnectApplyTag(f func(tag *TextTag, start, end *TextIter)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "apply-tag", false, unsafe.Pointer(C._gotk4_gtk4_TextBuffer_ConnectApplyTag), f)
}

// ConnectBeginUserAction is emitted at the beginning of a single user-visible
// operation on a GtkTextBuffer.
//
// See also: gtk.TextBuffer.BeginUserAction(),
// gtk.TextBuffer.InsertInteractive(), gtk.TextBuffer.InsertRangeInteractive(),
// gtk.TextBuffer.DeleteInteractive(), gtk.TextBuffer.Backspace(),
// gtk.TextBuffer.DeleteSelection().
func (v *TextBuffer) ConnectBeginUserAction(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "begin-user-action", false, unsafe.Pointer(C._gotk4_gtk4_TextBuffer_ConnectBeginUserAction), f)
}

// ConnectChanged is emitted when the content of a GtkTextBuffer has changed.
func (v *TextBuffer) ConnectChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "changed", false, unsafe.Pointer(C._gotk4_gtk4_TextBuffer_ConnectChanged), f)
}

// ConnectDeleteRange is emitted to delete a range from a GtkTextBuffer.
//
// Note that if your handler runs before the default handler it must not
// invalidate the start and end iters (or has to revalidate them). The default
// signal handler revalidates the start and end iters to both point to the
// location where text was deleted. Handlers which run after the default handler
// (see g_signal_connect_after()) do not have access to the deleted text.
//
// See also: gtk.TextBuffer.Delete().
func (v *TextBuffer) ConnectDeleteRange(f func(start, end *TextIter)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "delete-range", false, unsafe.Pointer(C._gotk4_gtk4_TextBuffer_ConnectDeleteRange), f)
}

// ConnectEndUserAction is emitted at the end of a single user-visible operation
// on the GtkTextBuffer.
//
// See also: gtk.TextBuffer.EndUserAction(), gtk.TextBuffer.InsertInteractive(),
// gtk.TextBuffer.InsertRangeInteractive(), gtk.TextBuffer.DeleteInteractive(),
// gtk.TextBuffer.Backspace(), gtk.TextBuffer.DeleteSelection(),
// gtk.TextBuffer.Backspace().
func (v *TextBuffer) ConnectEndUserAction(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "end-user-action", false, unsafe.Pointer(C._gotk4_gtk4_TextBuffer_ConnectEndUserAction), f)
}

// ConnectInsertChildAnchor is emitted to insert a GtkTextChildAnchor in a
// GtkTextBuffer.
//
// Insertion actually occurs in the default handler.
//
// Note that if your handler runs before the default handler it must not
// invalidate the location iter (or has to revalidate it). The default signal
// handler revalidates it to be placed after the inserted anchor.
//
// See also: gtk.TextBuffer.InsertChildAnchor().
func (v *TextBuffer) ConnectInsertChildAnchor(f func(location *TextIter, anchor *TextChildAnchor)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "insert-child-anchor", false, unsafe.Pointer(C._gotk4_gtk4_TextBuffer_ConnectInsertChildAnchor), f)
}

// ConnectInsertPaintable is emitted to insert a GdkPaintable in a
// GtkTextBuffer.
//
// Insertion actually occurs in the default handler.
//
// Note that if your handler runs before the default handler it must not
// invalidate the location iter (or has to revalidate it). The default signal
// handler revalidates it to be placed after the inserted paintable.
//
// See also: gtk.TextBuffer.InsertPaintable().
func (v *TextBuffer) ConnectInsertPaintable(f func(location *TextIter, paintable gdk.Paintabler)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "insert-paintable", false, unsafe.Pointer(C._gotk4_gtk4_TextBuffer_ConnectInsertPaintable), f)
}

// ConnectInsertText is emitted to insert text in a GtkTextBuffer.
//
// Insertion actually occurs in the default handler.
//
// Note that if your handler runs before the default handler it must not
// invalidate the location iter (or has to revalidate it). The default signal
// handler revalidates it to point to the end of the inserted text.
//
// See also: gtk,textbuffer.Insert, gtk.TextBuffer.InsertRange().
func (v *TextBuffer) ConnectInsertText(f func(location *TextIter, text string, len int)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "insert-text", false, unsafe.Pointer(C._gotk4_gtk4_TextBuffer_ConnectInsertText), f)
}

// ConnectMarkDeleted is emitted as notification after a GtkTextMark is deleted.
//
// See also: gtk.TextBuffer.DeleteMark().
func (v *TextBuffer) ConnectMarkDeleted(f func(mark *TextMark)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "mark-deleted", false, unsafe.Pointer(C._gotk4_gtk4_TextBuffer_ConnectMarkDeleted), f)
}

// ConnectMarkSet is emitted as notification after a GtkTextMark is set.
//
// See also: gtk.TextBuffer.CreateMark(), gtk.TextBuffer.MoveMark().
func (v *TextBuffer) ConnectMarkSet(f func(location *TextIter, mark *TextMark)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "mark-set", false, unsafe.Pointer(C._gotk4_gtk4_TextBuffer_ConnectMarkSet), f)
}

// ConnectModifiedChanged is emitted when the modified bit of a GtkTextBuffer
// flips.
//
// See also: gtk.TextBuffer.SetModified().
func (v *TextBuffer) ConnectModifiedChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "modified-changed", false, unsafe.Pointer(C._gotk4_gtk4_TextBuffer_ConnectModifiedChanged), f)
}

// ConnectPasteDone is emitted after paste operation has been completed.
//
// This is useful to properly scroll the view to the end of the pasted text. See
// gtk.TextBuffer.PasteClipboard() for more details.
func (v *TextBuffer) ConnectPasteDone(f func(clipboard *gdk.Clipboard)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "paste-done", false, unsafe.Pointer(C._gotk4_gtk4_TextBuffer_ConnectPasteDone), f)
}

// ConnectRedo is emitted when a request has been made to redo the previously
// undone operation.
func (v *TextBuffer) ConnectRedo(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "redo", false, unsafe.Pointer(C._gotk4_gtk4_TextBuffer_ConnectRedo), f)
}

// ConnectRemoveTag is emitted to remove all occurrences of tag from a range of
// text in a GtkTextBuffer.
//
// Removal actually occurs in the default handler.
//
// Note that if your handler runs before the default handler it must not
// invalidate the start and end iters (or has to revalidate them).
//
// See also: gtk.TextBuffer.RemoveTag().
func (v *TextBuffer) ConnectRemoveTag(f func(tag *TextTag, start, end *TextIter)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "remove-tag", false, unsafe.Pointer(C._gotk4_gtk4_TextBuffer_ConnectRemoveTag), f)
}

// ConnectUndo is emitted when a request has been made to undo the previous
// operation or set of operations that have been grouped together.
func (v *TextBuffer) ConnectUndo(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "undo", false, unsafe.Pointer(C._gotk4_gtk4_TextBuffer_ConnectUndo), f)
}

// TextBufferClass class structure for TextBuffer.
//
// An instance of this type is always passed by reference.
type TextBufferClass struct {
	*textBufferClass
}

// textBufferClass is the struct that's finalized.
type textBufferClass struct {
	native unsafe.Pointer
}

var GIRInfoTextBufferClass = girepository.MustFind("Gtk", "TextBufferClass")
