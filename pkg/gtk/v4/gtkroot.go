// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeRoot = coreglib.Type(girepository.MustFind("Gtk", "Root").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeRoot, F: marshalRoot},
	})
}

// Root: GtkRoot is the interface implemented by all widgets that can act as a
// toplevel widget.
//
// The root widget takes care of providing the connection to the windowing
// system and manages layout, drawing and event delivery for its widget
// hierarchy.
//
// The obvious example of a GtkRoot is GtkWindow.
//
// To get the display to which a GtkRoot belongs, use gtk.Root.GetDisplay().
//
// GtkRoot also maintains the location of keyboard focus inside its widget
// hierarchy, with gtk.Root.SetFocus() and gtk.Root.GetFocus().
//
// Root wraps an interface. This means the user can get the
// underlying type by calling Cast().
type Root struct {
	_ [0]func() // equal guard
	NativeSurface
}

var ()

// Rooter describes Root's interface methods.
type Rooter interface {
	coreglib.Objector

	baseRoot() *Root
}

var _ Rooter = (*Root)(nil)

func wrapRoot(obj *coreglib.Object) *Root {
	return &Root{
		NativeSurface: NativeSurface{
			Widget: Widget{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				Accessible: Accessible{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
				ConstraintTarget: ConstraintTarget{
					Object: obj,
				},
			},
		},
	}
}

func marshalRoot(p uintptr) (interface{}, error) {
	return wrapRoot(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *Root) baseRoot() *Root {
	return v
}

// BaseRoot returns the underlying base object.
func BaseRoot(obj Rooter) *Root {
	return obj.baseRoot()
}
