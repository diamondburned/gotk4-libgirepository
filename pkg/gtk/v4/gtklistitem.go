// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeListItem = coreglib.Type(girepository.MustFind("Gtk", "ListItem").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeListItem, F: marshalListItem},
	})
}

// ListItem: GtkListItem is used by list widgets to represent items in a
// GListModel.
//
// The GtkListItems are managed by the list widget (with its factory) and cannot
// be created by applications, but they need to be populated by application
// code. This is done by calling gtk.ListItem.SetChild().
//
// GtkListItems exist in 2 stages:
//
// 1. The unbound stage where the listitem is not currently connected to an item
// in the list. In that case, the gtk.ListItem:item property is set to NULL.
//
// 2. The bound stage where the listitem references an item from the list. The
// gtk.ListItem:item property is not NULL.
type ListItem struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*ListItem)(nil)
)

func wrapListItem(obj *coreglib.Object) *ListItem {
	return &ListItem{
		Object: obj,
	}
}

func marshalListItem(p uintptr) (interface{}, error) {
	return wrapListItem(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
