// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gtk4_DropTargetAsync_ConnectDragLeave(gpointer, void*, guintptr);
// extern gboolean _gotk4_gtk4_DropTargetAsync_ConnectDrop(gpointer, void*, gdouble, gdouble, guintptr);
// extern gboolean _gotk4_gtk4_DropTargetAsync_ConnectAccept(gpointer, void*, guintptr);
import "C"

// GType values.
var (
	GTypeDropTargetAsync = coreglib.Type(girepository.MustFind("Gtk", "DropTargetAsync").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDropTargetAsync, F: marshalDropTargetAsync},
	})
}

// DropTargetAsync: GtkDropTargetAsync is an event controller to receive
// Drag-and-Drop operations, asynchronously.
//
// It is the more complete but also more complex method of handling drop
// operations compared to gtk.DropTarget, and you should only use it if
// GtkDropTarget doesn't provide all the features you need.
//
// To use a GtkDropTargetAsync to receive drops on a widget, you create a
// GtkDropTargetAsync object, configure which data formats and actions you
// support, connect to its signals, and then attach it to the widget with
// gtk.Widget.AddController().
//
// During a drag operation, the first signal that a GtkDropTargetAsync emits is
// gtk.DropTargetAsync::accept, which is meant to determine whether the target
// is a possible drop site for the ongoing drop. The default handler for the
// ::accept signal accepts the drop if it finds a compatible data format and an
// action that is supported on both sides.
//
// If it is, and the widget becomes a target, you will receive a
// gtk.DropTargetAsync::drag-enter signal, followed by
// gtk.DropTargetAsync::drag-motion signals as the pointer moves, optionally a
// gtk.DropTargetAsync::drop signal when a drop happens, and finally a
// gtk.DropTargetAsync::drag-leave signal when the pointer moves off the widget.
//
// The ::drag-enter and ::drag-motion handler return a GdkDragAction to update
// the status of the ongoing operation. The ::drop handler should decide if it
// ultimately accepts the drop and if it does, it should initiate the data
// transfer and finish the operation by calling gdk.Drop.Finish().
//
// Between the ::drag-enter and ::drag-leave signals the widget is a current
// drop target, and will receive the GTK_STATE_FLAG_DROP_ACTIVE state, which can
// be used by themes to style the widget as a drop target.
type DropTargetAsync struct {
	_ [0]func() // equal guard
	EventController
}

var (
	_ EventControllerer = (*DropTargetAsync)(nil)
)

func wrapDropTargetAsync(obj *coreglib.Object) *DropTargetAsync {
	return &DropTargetAsync{
		EventController: EventController{
			Object: obj,
		},
	}
}

func marshalDropTargetAsync(p uintptr) (interface{}, error) {
	return wrapDropTargetAsync(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectAccept is emitted on the drop site when a drop operation is about to
// begin.
//
// If the drop is not accepted, FALSE will be returned and the drop target will
// ignore the drop. If TRUE is returned, the drop is accepted for now but may be
// rejected later via a call to gtk.DropTargetAsync.RejectDrop() or ultimately
// by returning FALSE from a gtk.DropTargetAsync::drop handler.
//
// The default handler for this signal decides whether to accept the drop based
// on the formats provided by the drop.
//
// If the decision whether the drop will be accepted or rejected needs further
// processing, such as inspecting the data, this function should return TRUE and
// proceed as is drop was accepted and if it decides to reject the drop later,
// it should call gtk.DropTargetAsync.RejectDrop().
func (v *DropTargetAsync) ConnectAccept(f func(drop gdk.Dropper) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "accept", false, unsafe.Pointer(C._gotk4_gtk4_DropTargetAsync_ConnectAccept), f)
}

// ConnectDragLeave is emitted on the drop site when the pointer leaves the
// widget.
//
// Its main purpose it to undo things done in GtkDropTargetAsync::drag-enter.
func (v *DropTargetAsync) ConnectDragLeave(f func(drop gdk.Dropper)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "drag-leave", false, unsafe.Pointer(C._gotk4_gtk4_DropTargetAsync_ConnectDragLeave), f)
}

// ConnectDrop is emitted on the drop site when the user drops the data onto the
// widget.
//
// The signal handler must determine whether the pointer position is in a drop
// zone or not. If it is not in a drop zone, it returns FALSE and no further
// processing is necessary.
//
// Otherwise, the handler returns TRUE. In this case, this handler will accept
// the drop. The handler must ensure that gdk.Drop.Finish() is called to let the
// source know that the drop is done. The call to gdk.Drop.Finish() must only be
// done when all data has been received.
//
// To receive the data, use one of the read functions provided by gdk.Drop such
// as gdk.Drop.ReadAsync() or gdk.Drop.ReadValueAsync().
func (v *DropTargetAsync) ConnectDrop(f func(drop gdk.Dropper, x, y float64) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "drop", false, unsafe.Pointer(C._gotk4_gtk4_DropTargetAsync_ConnectDrop), f)
}
