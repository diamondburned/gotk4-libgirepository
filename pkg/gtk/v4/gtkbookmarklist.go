// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeBookmarkList = coreglib.Type(girepository.MustFind("Gtk", "BookmarkList").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeBookmarkList, F: marshalBookmarkList},
	})
}

// BookmarkListOverrides contains methods that are overridable.
type BookmarkListOverrides struct {
}

func defaultBookmarkListOverrides(v *BookmarkList) BookmarkListOverrides {
	return BookmarkListOverrides{}
}

// BookmarkList: GtkBookmarkList is a list model that wraps GBookmarkFile.
//
// It presents a GListModel and fills it asynchronously with the GFileInfos
// returned from that function.
//
// The GFileInfos in the list have some attributes in the recent namespace
// added: recent::private (boolean) and recent:applications (stringv).
type BookmarkList struct {
	_ [0]func() // equal guard
	*coreglib.Object

	gio.ListModel
}

var (
	_ coreglib.Objector = (*BookmarkList)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*BookmarkList, *BookmarkListClass, BookmarkListOverrides](
		GTypeBookmarkList,
		initBookmarkListClass,
		wrapBookmarkList,
		defaultBookmarkListOverrides,
	)
}

func initBookmarkListClass(gclass unsafe.Pointer, overrides BookmarkListOverrides, classInitFunc func(*BookmarkListClass)) {
	if classInitFunc != nil {
		class := (*BookmarkListClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapBookmarkList(obj *coreglib.Object) *BookmarkList {
	return &BookmarkList{
		Object: obj,
		ListModel: gio.ListModel{
			Object: obj,
		},
	}
}

func marshalBookmarkList(p uintptr) (interface{}, error) {
	return wrapBookmarkList(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// BookmarkListClass: instance of this type is always passed by reference.
type BookmarkListClass struct {
	*bookmarkListClass
}

// bookmarkListClass is the struct that's finalized.
type bookmarkListClass struct {
	native unsafe.Pointer
}

var GIRInfoBookmarkListClass = girepository.MustFind("Gtk", "BookmarkListClass")
