// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeShortcutController = coreglib.Type(girepository.MustFind("Gtk", "ShortcutController").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeShortcutController, F: marshalShortcutController},
	})
}

// ShortcutController: GtkShortcutController is an event controller that manages
// shortcuts.
//
// Most common shortcuts are using this controller implicitly, e.g. by adding a
// mnemonic underline to a GtkLabel, or by installing a key binding using
// gtk_widget_class_add_binding(), or by adding accelerators to global actions
// using gtk_application_set_accels_for_action().
//
// But it is possible to create your own shortcut controller, and add shortcuts
// to it.
//
// GtkShortcutController implements GListModel for querying the shortcuts that
// have been added to it.
//
//
// GtkShortcutController as a GtkBuildable
//
// GtkShortcutControllers can be creates in ui files to set up shortcuts in the
// same place as the widgets.
//
// An example of a UI definition fragment with GtkShortcutController:
//
//      <object class='GtkButton'>
//        <child>
//          <object class='GtkShortcutController'>
//            <property name='scope'>managed</property>
//            <child>
//              <object class='GtkShortcut'>
//                <property name='trigger'>&amp;lt;Control&amp;gt;k</property>
//                <property name='action'>activate</property>
//              </object>
//            </child>
//          </object>
//        </child>
//      </object>
//
//
// This example creates a gtk.ActivateAction for triggering the activate signal
// of the GtkButton. See gtk.ShortcutAction.ParseString for the syntax for other
// kinds of GtkShortcutAction. See gtk.ShortcutTrigger.ParseString to learn more
// about the syntax for triggers.
type ShortcutController struct {
	_ [0]func() // equal guard
	EventController

	*coreglib.Object
	gio.ListModel
	Buildable
}

var (
	_ EventControllerer = (*ShortcutController)(nil)
	_ coreglib.Objector = (*ShortcutController)(nil)
)

func wrapShortcutController(obj *coreglib.Object) *ShortcutController {
	return &ShortcutController{
		EventController: EventController{
			Object: obj,
		},
		Object: obj,
		ListModel: gio.ListModel{
			Object: obj,
		},
		Buildable: Buildable{
			Object: obj,
		},
	}
}

func marshalShortcutController(p uintptr) (interface{}, error) {
	return wrapShortcutController(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
