// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"fmt"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gtk4_PrintOperation_ConnectUpdateCustomWidget(gpointer, void*, void*, void*, guintptr);
// extern void _gotk4_gtk4_PrintOperation_ConnectStatusChanged(gpointer, guintptr);
// extern void _gotk4_gtk4_PrintOperation_ConnectRequestPageSetup(gpointer, void*, gint, void*, guintptr);
// extern void _gotk4_gtk4_PrintOperation_ConnectEndPrint(gpointer, void*, guintptr);
// extern void _gotk4_gtk4_PrintOperation_ConnectDrawPage(gpointer, void*, gint, guintptr);
// extern void _gotk4_gtk4_PrintOperation_ConnectCustomWidgetApply(gpointer, void*, guintptr);
// extern void _gotk4_gtk4_PrintOperation_ConnectBeginPrint(gpointer, void*, guintptr);
// extern gboolean _gotk4_gtk4_PrintOperation_ConnectPreview(gpointer, void*, void*, void*, guintptr);
// extern gboolean _gotk4_gtk4_PrintOperation_ConnectPaginate(gpointer, void*, guintptr);
// extern GObject _gotk4_gtk4_PrintOperation_ConnectCreateCustomWidget(gpointer, guintptr);
import "C"

// GType values.
var (
	GTypePrintError           = coreglib.Type(girepository.MustFind("Gtk", "PrintError").RegisteredGType())
	GTypePrintOperationAction = coreglib.Type(girepository.MustFind("Gtk", "PrintOperationAction").RegisteredGType())
	GTypePrintOperationResult = coreglib.Type(girepository.MustFind("Gtk", "PrintOperationResult").RegisteredGType())
	GTypePrintStatus          = coreglib.Type(girepository.MustFind("Gtk", "PrintStatus").RegisteredGType())
	GTypePrintOperation       = coreglib.Type(girepository.MustFind("Gtk", "PrintOperation").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypePrintError, F: marshalPrintError},
		coreglib.TypeMarshaler{T: GTypePrintOperationAction, F: marshalPrintOperationAction},
		coreglib.TypeMarshaler{T: GTypePrintOperationResult, F: marshalPrintOperationResult},
		coreglib.TypeMarshaler{T: GTypePrintStatus, F: marshalPrintStatus},
		coreglib.TypeMarshaler{T: GTypePrintOperation, F: marshalPrintOperation},
	})
}

// PrintError: error codes that identify various errors that can occur while
// using the GTK printing support.
type PrintError C.gint

const (
	// PrintErrorGeneral: unspecified error occurred.
	PrintErrorGeneral PrintError = iota
	// PrintErrorInternalError: internal error occurred.
	PrintErrorInternalError
	// PrintErrorNOMEM: memory allocation failed.
	PrintErrorNOMEM
	// PrintErrorInvalidFile: error occurred while loading a page setup or paper
	// size from a key file.
	PrintErrorInvalidFile
)

func marshalPrintError(p uintptr) (interface{}, error) {
	return PrintError(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for PrintError.
func (p PrintError) String() string {
	switch p {
	case PrintErrorGeneral:
		return "General"
	case PrintErrorInternalError:
		return "InternalError"
	case PrintErrorNOMEM:
		return "NOMEM"
	case PrintErrorInvalidFile:
		return "InvalidFile"
	default:
		return fmt.Sprintf("PrintError(%d)", p)
	}
}

// PrintOperationAction determines what action the print operation should
// perform.
//
// A parameter of this typs is passed to gtk.PrintOperation.Run().
type PrintOperationAction C.gint

const (
	// PrintOperationActionPrintDialog: show the print dialog.
	PrintOperationActionPrintDialog PrintOperationAction = iota
	// PrintOperationActionPrint: start to print without showing the print
	// dialog, based on the current print settings.
	PrintOperationActionPrint
	// PrintOperationActionPreview: show the print preview.
	PrintOperationActionPreview
	// PrintOperationActionExport: export to a file. This requires the
	// export-filename property to be set.
	PrintOperationActionExport
)

func marshalPrintOperationAction(p uintptr) (interface{}, error) {
	return PrintOperationAction(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for PrintOperationAction.
func (p PrintOperationAction) String() string {
	switch p {
	case PrintOperationActionPrintDialog:
		return "PrintDialog"
	case PrintOperationActionPrint:
		return "Print"
	case PrintOperationActionPreview:
		return "Preview"
	case PrintOperationActionExport:
		return "Export"
	default:
		return fmt.Sprintf("PrintOperationAction(%d)", p)
	}
}

// PrintOperationResult: result of a print operation.
//
// A value of this type is returned by gtk.PrintOperation.Run().
type PrintOperationResult C.gint

const (
	// PrintOperationResultError: error has occurred.
	PrintOperationResultError PrintOperationResult = iota
	// PrintOperationResultApply: print settings should be stored.
	PrintOperationResultApply
	// PrintOperationResultCancel: print operation has been canceled, the print
	// settings should not be stored.
	PrintOperationResultCancel
	// PrintOperationResultInProgress: print operation is not complete yet. This
	// value will only be returned when running asynchronously.
	PrintOperationResultInProgress
)

func marshalPrintOperationResult(p uintptr) (interface{}, error) {
	return PrintOperationResult(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for PrintOperationResult.
func (p PrintOperationResult) String() string {
	switch p {
	case PrintOperationResultError:
		return "Error"
	case PrintOperationResultApply:
		return "Apply"
	case PrintOperationResultCancel:
		return "Cancel"
	case PrintOperationResultInProgress:
		return "InProgress"
	default:
		return fmt.Sprintf("PrintOperationResult(%d)", p)
	}
}

// PrintStatus status gives a rough indication of the completion of a running
// print operation.
type PrintStatus C.gint

const (
	// PrintStatusInitial: printing has not started yet; this status is set
	// initially, and while the print dialog is shown.
	PrintStatusInitial PrintStatus = iota
	// PrintStatusPreparing: this status is set while the begin-print signal is
	// emitted and during pagination.
	PrintStatusPreparing
	// PrintStatusGeneratingData: this status is set while the pages are being
	// rendered.
	PrintStatusGeneratingData
	// PrintStatusSendingData: print job is being sent off to the printer.
	PrintStatusSendingData
	// PrintStatusPending: print job has been sent to the printer, but is not
	// printed for some reason, e.g. the printer may be stopped.
	PrintStatusPending
	// PrintStatusPendingIssue: some problem has occurred during printing, e.g.
	// a paper jam.
	PrintStatusPendingIssue
	// PrintStatusPrinting: printer is processing the print job.
	PrintStatusPrinting
	// PrintStatusFinished: printing has been completed successfully.
	PrintStatusFinished
	// PrintStatusFinishedAborted: printing has been aborted.
	PrintStatusFinishedAborted
)

func marshalPrintStatus(p uintptr) (interface{}, error) {
	return PrintStatus(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for PrintStatus.
func (p PrintStatus) String() string {
	switch p {
	case PrintStatusInitial:
		return "Initial"
	case PrintStatusPreparing:
		return "Preparing"
	case PrintStatusGeneratingData:
		return "GeneratingData"
	case PrintStatusSendingData:
		return "SendingData"
	case PrintStatusPending:
		return "Pending"
	case PrintStatusPendingIssue:
		return "PendingIssue"
	case PrintStatusPrinting:
		return "Printing"
	case PrintStatusFinished:
		return "Finished"
	case PrintStatusFinishedAborted:
		return "FinishedAborted"
	default:
		return fmt.Sprintf("PrintStatus(%d)", p)
	}
}

// PageSetupDoneFunc: type of function that is passed to
// gtk_print_run_page_setup_dialog_async().
//
// This function will be called when the page setup dialog is dismissed, and
// also serves as destroy notify for data.
type PageSetupDoneFunc func(pageSetup *PageSetup)

// PrintOperationOverrides contains methods that are overridable.
type PrintOperationOverrides struct {
}

func defaultPrintOperationOverrides(v *PrintOperation) PrintOperationOverrides {
	return PrintOperationOverrides{}
}

// PrintOperation: GtkPrintOperation is the high-level, portable printing API.
//
// It looks a bit different than other GTK dialogs such as the GtkFileChooser,
// since some platforms donâ€™t expose enough infrastructure to implement a good
// print dialog. On such platforms, GtkPrintOperation uses the native print
// dialog. On platforms which do not provide a native print dialog, GTK uses its
// own, see gtk.PrintUnixDialog.
//
// The typical way to use the high-level printing API is to create a
// GtkPrintOperation object with gtk.PrintOperation.New when the user selects to
// print. Then you set some properties on it, e.g. the page size, any
// gtk.PrintSettings from previous print operations, the number of pages, the
// current page, etc.
//
// Then you start the print operation by calling gtk.PrintOperation.Run(). It
// will then show a dialog, let the user select a printer and options. When the
// user finished the dialog, various signals will be emitted on the
// GtkPrintOperation, the main one being gtk.PrintOperation::draw-page, which
// you are supposed to handle and render the page on the provided
// gtk.PrintContext using Cairo.
//
// The high-level printing API
//
//    static GtkPrintSettings *settings = NULL;
//
//    static void
//    do_print (void)
//    {
//      GtkPrintOperation *print;
//      GtkPrintOperationResult res;
//
//      print = gtk_print_operation_new ();
//
//      if (settings != NULL)
//        gtk_print_operation_set_print_settings (print, settings);
//
//      g_signal_connect (print, "begin_print", G_CALLBACK (begin_print), NULL);
//      g_signal_connect (print, "draw_page", G_CALLBACK (draw_page), NULL);
//
//      res = gtk_print_operation_run (print, GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG,
//                                     GTK_WINDOW (main_window), NULL);
//
//      if (res == GTK_PRINT_OPERATION_RESULT_APPLY)
//        {
//          if (settings != NULL)
//            g_object_unref (settings);
//          settings = g_object_ref (gtk_print_operation_get_print_settings (print));
//        }
//
//      g_object_unref (print);
//    }
//
//
// By default GtkPrintOperation uses an external application to do print
// preview. To implement a custom print preview, an application must connect to
// the preview signal. The functions gtk.PrintOperationPreview.RenderPage(),
// gtk.PrintOperationPreview.EndPreview() and
// gtk.PrintOperationPreview.IsSelected() are useful when implementing a print
// preview.
type PrintOperation struct {
	_ [0]func() // equal guard
	*coreglib.Object

	PrintOperationPreview
}

var (
	_ coreglib.Objector = (*PrintOperation)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*PrintOperation, *PrintOperationClass, PrintOperationOverrides](
		GTypePrintOperation,
		initPrintOperationClass,
		wrapPrintOperation,
		defaultPrintOperationOverrides,
	)
}

func initPrintOperationClass(gclass unsafe.Pointer, overrides PrintOperationOverrides, classInitFunc func(*PrintOperationClass)) {
	if classInitFunc != nil {
		class := (*PrintOperationClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapPrintOperation(obj *coreglib.Object) *PrintOperation {
	return &PrintOperation{
		Object: obj,
		PrintOperationPreview: PrintOperationPreview{
			Object: obj,
		},
	}
}

func marshalPrintOperation(p uintptr) (interface{}, error) {
	return wrapPrintOperation(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectBeginPrint is emitted after the user has finished changing print
// settings in the dialog, before the actual rendering starts.
//
// A typical use for ::begin-print is to use the parameters from the
// gtk.PrintContext and paginate the document accordingly, and then set the
// number of pages with gtk.PrintOperation.SetNPages().
func (v *PrintOperation) ConnectBeginPrint(f func(context *PrintContext)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "begin-print", false, unsafe.Pointer(C._gotk4_gtk4_PrintOperation_ConnectBeginPrint), f)
}

// ConnectCreateCustomWidget is emitted when displaying the print dialog.
//
// If you return a widget in a handler for this signal it will be added to a
// custom tab in the print dialog. You typically return a container widget with
// multiple widgets in it.
//
// The print dialog owns the returned widget, and its lifetime is not controlled
// by the application. However, the widget is guaranteed to stay around until
// the gtk.PrintOperation::custom-widget-apply signal is emitted on the
// operation. Then you can read out any information you need from the widgets.
func (v *PrintOperation) ConnectCreateCustomWidget(f func() (object *coreglib.Object)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "create-custom-widget", false, unsafe.Pointer(C._gotk4_gtk4_PrintOperation_ConnectCreateCustomWidget), f)
}

// ConnectCustomWidgetApply is emitted right before ::begin-print if you added a
// custom widget in the ::create-custom-widget handler.
//
// When you get this signal you should read the information from the custom
// widgets, as the widgets are not guaranteed to be around at a later time.
func (v *PrintOperation) ConnectCustomWidgetApply(f func(widget Widgetter)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "custom-widget-apply", false, unsafe.Pointer(C._gotk4_gtk4_PrintOperation_ConnectCustomWidgetApply), f)
}

// ConnectDrawPage is emitted for every page that is printed.
//
// The signal handler must render the page_nr's page onto the cairo context
// obtained from context using gtk.PrintContext.GetCairoContext().
//
//    static void
//    draw_page (GtkPrintOperation *operation,
//               GtkPrintContext   *context,
//               int                page_nr,
//               gpointer           user_data)
//    {
//      cairo_t *cr;
//      PangoLayout *layout;
//      double width, text_height;
//      int layout_height;
//      PangoFontDescription *desc;
//
//      cr = gtk_print_context_get_cairo_context (context);
//      width = gtk_print_context_get_width (context);
//
//      cairo_rectangle (cr, 0, 0, width, HEADER_HEIGHT);
//
//      cairo_set_source_rgb (cr, 0.8, 0.8, 0.8);
//      cairo_fill (cr);
//
//      layout = gtk_print_context_create_pango_layout (context);
//
//      desc = pango_font_description_from_string ("sans 14");
//      pango_layout_set_font_description (layout, desc);
//      pango_font_description_free (desc);
//
//      pango_layout_set_text (layout, "some text", -1);
//      pango_layout_set_width (layout, width * PANGO_SCALE);
//      pango_layout_set_alignment (layout, PANGO_ALIGN_CENTER);
//
//      pango_layout_get_size (layout, NULL, &layout_height);
//      text_height = (double)layout_height / PANGO_SCALE;
//
//      cairo_move_to (cr, width / 2,  (HEADER_HEIGHT - text_height) / 2);
//      pango_cairo_show_layout (cr, layout);
//
//      g_object_unref (layout);
//    }
//
//
// Use gtk.PrintOperation.SetUseFullPage() and gtk.PrintOperation.SetUnit()
// before starting the print operation to set up the transformation of the cairo
// context according to your needs.
func (v *PrintOperation) ConnectDrawPage(f func(context *PrintContext, pageNr int)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "draw-page", false, unsafe.Pointer(C._gotk4_gtk4_PrintOperation_ConnectDrawPage), f)
}

// ConnectEndPrint is emitted after all pages have been rendered.
//
// A handler for this signal can clean up any resources that have been allocated
// in the gtk.PrintOperation::begin-print handler.
func (v *PrintOperation) ConnectEndPrint(f func(context *PrintContext)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "end-print", false, unsafe.Pointer(C._gotk4_gtk4_PrintOperation_ConnectEndPrint), f)
}

// ConnectPaginate is emitted after the ::begin-print signal, but before the
// actual rendering starts.
//
// It keeps getting emitted until a connected signal handler returns TRUE.
//
// The ::paginate signal is intended to be used for paginating a document in
// small chunks, to avoid blocking the user interface for a long time. The
// signal handler should update the number of pages using
// gtk.PrintOperation.SetNPages(), and return TRUE if the document has been
// completely paginated.
//
// If you don't need to do pagination in chunks, you can simply do it all in the
// ::begin-print handler, and set the number of pages from there.
func (v *PrintOperation) ConnectPaginate(f func(context *PrintContext) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "paginate", false, unsafe.Pointer(C._gotk4_gtk4_PrintOperation_ConnectPaginate), f)
}

// ConnectPreview gets emitted when a preview is requested from the native
// dialog.
//
// The default handler for this signal uses an external viewer application to
// preview.
//
// To implement a custom print preview, an application must return TRUE from its
// handler for this signal. In order to use the provided context for the preview
// implementation, it must be given a suitable cairo context with
// gtk.PrintContext.SetCairoContext().
//
// The custom preview implementation can use
// gtk.PrintOperationPreview.IsSelected() and
// gtk.PrintOperationPreview.RenderPage() to find pages which are selected for
// print and render them. The preview must be finished by calling
// gtk.PrintOperationPreview.EndPreview() (typically in response to the user
// clicking a close button).
func (v *PrintOperation) ConnectPreview(f func(preview PrintOperationPreviewer, context *PrintContext, parent *Window) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "preview", false, unsafe.Pointer(C._gotk4_gtk4_PrintOperation_ConnectPreview), f)
}

// ConnectRequestPageSetup is emitted once for every page that is printed.
//
// This gives the application a chance to modify the page setup. Any changes
// done to setup will be in force only for printing this page.
func (v *PrintOperation) ConnectRequestPageSetup(f func(context *PrintContext, pageNr int, setup *PageSetup)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "request-page-setup", false, unsafe.Pointer(C._gotk4_gtk4_PrintOperation_ConnectRequestPageSetup), f)
}

// ConnectStatusChanged is emitted at between the various phases of the print
// operation.
//
// See gtk.PrintStatus for the phases that are being discriminated. Use
// gtk.PrintOperation.GetStatus() to find out the current status.
func (v *PrintOperation) ConnectStatusChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "status-changed", false, unsafe.Pointer(C._gotk4_gtk4_PrintOperation_ConnectStatusChanged), f)
}

// ConnectUpdateCustomWidget is emitted after change of selected printer.
//
// The actual page setup and print settings are passed to the custom widget,
// which can actualize itself according to this change.
func (v *PrintOperation) ConnectUpdateCustomWidget(f func(widget Widgetter, setup *PageSetup, settings *PrintSettings)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "update-custom-widget", false, unsafe.Pointer(C._gotk4_gtk4_PrintOperation_ConnectUpdateCustomWidget), f)
}

// PrintOperationClass: instance of this type is always passed by reference.
type PrintOperationClass struct {
	*printOperationClass
}

// printOperationClass is the struct that's finalized.
type printOperationClass struct {
	native unsafe.Pointer
}

var GIRInfoPrintOperationClass = girepository.MustFind("Gtk", "PrintOperationClass")
