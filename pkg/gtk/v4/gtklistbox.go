// Code generated by girgen. DO NOT EDIT.

package gtk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gtk4_ListBox_ConnectUnselectAll(gpointer, guintptr);
// extern void _gotk4_gtk4_ListBox_ConnectToggleCursorRow(gpointer, guintptr);
// extern void _gotk4_gtk4_ListBox_ConnectSelectedRowsChanged(gpointer, guintptr);
// extern void _gotk4_gtk4_ListBox_ConnectSelectAll(gpointer, guintptr);
// extern void _gotk4_gtk4_ListBox_ConnectRowSelected(gpointer, void*, guintptr);
// extern void _gotk4_gtk4_ListBox_ConnectRowActivated(gpointer, void*, guintptr);
// extern void _gotk4_gtk4_ListBox_ConnectActivateCursorRow(gpointer, guintptr);
// extern void _gotk4_gtk4_ListBoxRow_ConnectActivate(gpointer, guintptr);
import "C"

// GType values.
var (
	GTypeListBox    = coreglib.Type(girepository.MustFind("Gtk", "ListBox").RegisteredGType())
	GTypeListBoxRow = coreglib.Type(girepository.MustFind("Gtk", "ListBoxRow").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeListBox, F: marshalListBox},
		coreglib.TypeMarshaler{T: GTypeListBoxRow, F: marshalListBoxRow},
	})
}

// ListBoxCreateWidgetFunc: called for list boxes that are bound to a GListModel
// with gtk_list_box_bind_model() for each item that gets added to the model.
type ListBoxCreateWidgetFunc func(item *coreglib.Object) (widget Widgetter)

// ListBoxFilterFunc will be called whenever the row changes or is added and
// lets you control if the row should be visible or not.
type ListBoxFilterFunc func(row *ListBoxRow) (ok bool)

// ListBoxForEachFunc: function used by gtk_list_box_selected_foreach().
//
// It will be called on every selected child of the box.
type ListBoxForEachFunc func(box *ListBox, row *ListBoxRow)

// ListBoxSortFunc: compare two rows to determine which should be first.
type ListBoxSortFunc func(row1, row2 *ListBoxRow) (gint int)

// ListBoxUpdateHeaderFunc: whenever row changes or which row is before row
// changes this is called, which lets you update the header on row.
//
// You may remove or set a new one via gtk.ListBoxRow.SetHeader() or just change
// the state of the current header widget.
type ListBoxUpdateHeaderFunc func(row, before *ListBoxRow)

// ListBox: GtkListBox is a vertical list.
//
// A GtkListBox only contains GtkListBoxRow children. These rows can by
// dynamically sorted and filtered, and headers can be added dynamically
// depending on the row content. It also allows keyboard and mouse navigation
// and selection like a typical list.
//
// Using GtkListBox is often an alternative to GtkTreeView, especially when the
// list contents has a more complicated layout than what is allowed by a
// GtkCellRenderer, or when the contents is interactive (i.e. has a button in
// it).
//
// Although a GtkListBox must have only GtkListBoxRow children, you can add any
// kind of widget to it via gtk.ListBox.Prepend(), gtk.ListBox.Append() and
// gtk.ListBox.Insert() and a GtkListBoxRow widget will automatically be
// inserted between the list and the widget.
//
// GtkListBoxRows can be marked as activatable or selectable. If a row is
// activatable, gtk.ListBox::row-activated will be emitted for it when the user
// tries to activate it. If it is selectable, the row will be marked as selected
// when the user tries to select it.
//
//
// GtkListBox as GtkBuildable
//
// The GtkListBox implementation of the GtkBuildable interface supports setting
// a child as the placeholder by specifying “placeholder” as the “type”
// attribute of a <child> element. See gtk.ListBox.SetPlaceholder() for info.
//
// CSS nodes
//
//    list[.separators][.rich-list][.navigation-sidebar]
//    ╰── row[.activatable]
//
// GtkListBox uses a single CSS node named list. It may carry the .separators
// style class, when the gtk.ListBox:show-separators property is set. Each
// GtkListBoxRow uses a single CSS node named row. The row nodes get the
// .activatable style class added when appropriate.
//
// The main list node may also carry style classes to select the style of list
// presentation (section-list-widget.html#list-styles): .rich-list,
// .navigation-sidebar or .data-table.
//
//
// Accessibility
//
// GtkListBox uses the GTK_ACCESSIBLE_ROLE_LIST role and GtkListBoxRow uses the
// GTK_ACCESSIBLE_ROLE_LIST_ITEM role.
type ListBox struct {
	_ [0]func() // equal guard
	Widget
}

var (
	_ Widgetter = (*ListBox)(nil)
)

func wrapListBox(obj *coreglib.Object) *ListBox {
	return &ListBox{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			Accessible: Accessible{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
			ConstraintTarget: ConstraintTarget{
				Object: obj,
			},
		},
	}
}

func marshalListBox(p uintptr) (interface{}, error) {
	return wrapListBox(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *ListBox) ConnectActivateCursorRow(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "activate-cursor-row", false, unsafe.Pointer(C._gotk4_gtk4_ListBox_ConnectActivateCursorRow), f)
}

// ConnectRowActivated is emitted when a row has been activated by the user.
func (v *ListBox) ConnectRowActivated(f func(row *ListBoxRow)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "row-activated", false, unsafe.Pointer(C._gotk4_gtk4_ListBox_ConnectRowActivated), f)
}

// ConnectRowSelected is emitted when a new row is selected, or (with a NULL
// row) when the selection is cleared.
//
// When the box is using GTK_SELECTION_MULTIPLE, this signal will not give you
// the full picture of selection changes, and you should use the
// gtk.ListBox::selected-rows-changed signal instead.
func (v *ListBox) ConnectRowSelected(f func(row *ListBoxRow)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "row-selected", false, unsafe.Pointer(C._gotk4_gtk4_ListBox_ConnectRowSelected), f)
}

// ConnectSelectAll is emitted to select all children of the box, if the
// selection mode permits it.
//
// This is a keybinding signal (class.SignalAction.html).
//
// The default binding for this signal is <kbd>Ctrl</kbd>-<kbd>a</kbd>.
func (v *ListBox) ConnectSelectAll(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "select-all", false, unsafe.Pointer(C._gotk4_gtk4_ListBox_ConnectSelectAll), f)
}

// ConnectSelectedRowsChanged is emitted when the set of selected rows changes.
func (v *ListBox) ConnectSelectedRowsChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "selected-rows-changed", false, unsafe.Pointer(C._gotk4_gtk4_ListBox_ConnectSelectedRowsChanged), f)
}

func (v *ListBox) ConnectToggleCursorRow(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "toggle-cursor-row", false, unsafe.Pointer(C._gotk4_gtk4_ListBox_ConnectToggleCursorRow), f)
}

// ConnectUnselectAll is emitted to unselect all children of the box, if the
// selection mode permits it.
//
// This is a keybinding signal (class.SignalAction.html).
//
// The default binding for this signal is
// <kbd>Ctrl</kbd>-<kbd>Shift</kbd>-<kbd>a</kbd>.
func (v *ListBox) ConnectUnselectAll(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "unselect-all", false, unsafe.Pointer(C._gotk4_gtk4_ListBox_ConnectUnselectAll), f)
}

// ListBoxRowOverrides contains methods that are overridable.
type ListBoxRowOverrides struct {
}

func defaultListBoxRowOverrides(v *ListBoxRow) ListBoxRowOverrides {
	return ListBoxRowOverrides{}
}

// ListBoxRow: GtkListBoxRow is the kind of widget that can be added to a
// GtkListBox.
type ListBoxRow struct {
	_ [0]func() // equal guard
	Widget

	*coreglib.Object
	Actionable
}

var (
	_ Widgetter         = (*ListBoxRow)(nil)
	_ coreglib.Objector = (*ListBoxRow)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*ListBoxRow, *ListBoxRowClass, ListBoxRowOverrides](
		GTypeListBoxRow,
		initListBoxRowClass,
		wrapListBoxRow,
		defaultListBoxRowOverrides,
	)
}

func initListBoxRowClass(gclass unsafe.Pointer, overrides ListBoxRowOverrides, classInitFunc func(*ListBoxRowClass)) {
	if classInitFunc != nil {
		class := (*ListBoxRowClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapListBoxRow(obj *coreglib.Object) *ListBoxRow {
	return &ListBoxRow{
		Widget: Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			Accessible: Accessible{
				Object: obj,
			},
			Buildable: Buildable{
				Object: obj,
			},
			ConstraintTarget: ConstraintTarget{
				Object: obj,
			},
		},
		Object: obj,
		Actionable: Actionable{
			Widget: Widget{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				Accessible: Accessible{
					Object: obj,
				},
				Buildable: Buildable{
					Object: obj,
				},
				ConstraintTarget: ConstraintTarget{
					Object: obj,
				},
			},
		},
	}
}

func marshalListBoxRow(p uintptr) (interface{}, error) {
	return wrapListBoxRow(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectActivate: this is a keybinding signal, which will cause this row to be
// activated.
//
// If you want to be notified when the user activates a row (by key or not), use
// the gtk.ListBox::row-activated signal on the row’s parent GtkListBox.
func (v *ListBoxRow) ConnectActivate(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "activate", false, unsafe.Pointer(C._gotk4_gtk4_ListBoxRow_ConnectActivate), f)
}

// ListBoxRowClass: instance of this type is always passed by reference.
type ListBoxRowClass struct {
	*listBoxRowClass
}

// listBoxRowClass is the struct that's finalized.
type listBoxRowClass struct {
	native unsafe.Pointer
}

var GIRInfoListBoxRowClass = girepository.MustFind("Gtk", "ListBoxRowClass")
