// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/cairo"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gdk4_Surface_ConnectLeaveMonitor(gpointer, void*, guintptr);
// extern void _gotk4_gdk4_Surface_ConnectLayout(gpointer, gint, gint, guintptr);
// extern void _gotk4_gdk4_Surface_ConnectEnterMonitor(gpointer, void*, guintptr);
// extern gboolean _gotk4_gdk4_Surface_ConnectRender(gpointer, void*, guintptr);
// extern gboolean _gotk4_gdk4_Surface_ConnectEvent(gpointer, void*, guintptr);
import "C"

// GType values.
var (
	GTypeSurface = coreglib.Type(girepository.MustFind("Gdk", "Surface").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeSurface, F: marshalSurface},
	})
}

// Surface: GdkSurface is a rectangular region on the screen.
//
// It’s a low-level object, used to implement high-level objects such as
// gtk.Window or gtk.Dialog in GTK.
//
// The surfaces you see in practice are either gdk.Toplevel or gdk.Popup, and
// those interfaces provide much of the required API to interact with these
// surfaces. Other, more specialized surface types exist, but you will rarely
// interact with them directly.
type Surface struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Surface)(nil)
)

// Surfacer describes types inherited from class Surface.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type Surfacer interface {
	coreglib.Objector
	baseSurface() *Surface
}

var _ Surfacer = (*Surface)(nil)

func wrapSurface(obj *coreglib.Object) *Surface {
	return &Surface{
		Object: obj,
	}
}

func marshalSurface(p uintptr) (interface{}, error) {
	return wrapSurface(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *Surface) baseSurface() *Surface {
	return v
}

// BaseSurface returns the underlying base object.
func BaseSurface(obj Surfacer) *Surface {
	return obj.baseSurface()
}

// ConnectEnterMonitor is emitted when surface starts being present on the
// monitor.
func (v *Surface) ConnectEnterMonitor(f func(monitor *Monitor)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "enter-monitor", false, unsafe.Pointer(C._gotk4_gdk4_Surface_ConnectEnterMonitor), f)
}

// ConnectEvent is emitted when GDK receives an input event for surface.
func (v *Surface) ConnectEvent(f func(event Eventer) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "event", false, unsafe.Pointer(C._gotk4_gdk4_Surface_ConnectEvent), f)
}

// ConnectLayout is emitted when the size of surface is changed, or when
// relayout should be performed.
//
// Surface size is reported in ”application pixels”, not ”device pixels” (see
// gdk_surface_get_scale_factor()).
func (v *Surface) ConnectLayout(f func(width, height int)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "layout", false, unsafe.Pointer(C._gotk4_gdk4_Surface_ConnectLayout), f)
}

// ConnectLeaveMonitor is emitted when surface stops being present on the
// monitor.
func (v *Surface) ConnectLeaveMonitor(f func(monitor *Monitor)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "leave-monitor", false, unsafe.Pointer(C._gotk4_gdk4_Surface_ConnectLeaveMonitor), f)
}

// ConnectRender is emitted when part of the surface needs to be redrawn.
func (v *Surface) ConnectRender(f func(region *cairo.Region) (ok bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "render", false, unsafe.Pointer(C._gotk4_gdk4_Surface_ConnectRender), f)
}
