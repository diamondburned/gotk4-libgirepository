// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeContentDeserializer = coreglib.Type(girepository.MustFind("Gdk", "ContentDeserializer").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeContentDeserializer, F: marshalContentDeserializer},
	})
}

// ContentDeserializer: GdkContentDeserializer is used to deserialize content
// received via inter-application data transfers.
//
// The GdkContentDeserializer transforms serialized content that is identified
// by a mime type into an object identified by a GType.
//
// GTK provides serializers and deserializers for common data types such as
// text, colors, images or file lists. To register your own deserialization
// functions, use content_register_deserializer.
//
// Also see gdk.ContentSerializer.
type ContentDeserializer struct {
	_ [0]func() // equal guard
	*coreglib.Object

	gio.AsyncResult
}

var (
	_ coreglib.Objector = (*ContentDeserializer)(nil)
)

func wrapContentDeserializer(obj *coreglib.Object) *ContentDeserializer {
	return &ContentDeserializer{
		Object: obj,
		AsyncResult: gio.AsyncResult{
			Object: obj,
		},
	}
}

func marshalContentDeserializer(p uintptr) (interface{}, error) {
	return wrapContentDeserializer(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
