// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypePopup = coreglib.Type(girepository.MustFind("Gdk", "Popup").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypePopup, F: marshalPopup},
	})
}

// Popup: GdkPopup is a surface that is attached to another surface.
//
// The GdkPopup is positioned relative to its parent surface.
//
// GdkPopups are typically used to implement menus and similar popups. They can
// be modal, which is indicated by the gdkpopup:autohide property.
//
// Popup wraps an interface. This means the user can get the
// underlying type by calling Cast().
type Popup struct {
	_ [0]func() // equal guard
	Surface
}

var (
	_ Surfacer = (*Popup)(nil)
)

// Popupper describes Popup's interface methods.
type Popupper interface {
	coreglib.Objector

	basePopup() *Popup
}

var _ Popupper = (*Popup)(nil)

func wrapPopup(obj *coreglib.Object) *Popup {
	return &Popup{
		Surface: Surface{
			Object: obj,
		},
	}
}

func marshalPopup(p uintptr) (interface{}, error) {
	return wrapPopup(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *Popup) basePopup() *Popup {
	return v
}

// BasePopup returns the underlying base object.
func BasePopup(obj Popupper) *Popup {
	return obj.basePopup()
}
