// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"fmt"
	"strings"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gdk4_Paintable_ConnectInvalidateSize(gpointer, guintptr);
// extern void _gotk4_gdk4_Paintable_ConnectInvalidateContents(gpointer, guintptr);
import "C"

// GType values.
var (
	GTypePaintableFlags = coreglib.Type(girepository.MustFind("Gdk", "PaintableFlags").RegisteredGType())
	GTypePaintable      = coreglib.Type(girepository.MustFind("Gdk", "Paintable").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypePaintableFlags, F: marshalPaintableFlags},
		coreglib.TypeMarshaler{T: GTypePaintable, F: marshalPaintable},
	})
}

// PaintableFlags flags about a paintable object.
//
// Implementations use these for optimizations such as caching.
type PaintableFlags C.guint

const (
	// PaintableStaticSize: size is immutable. The gdkpaintable::invalidate-size
	// signal will never be emitted.
	PaintableStaticSize PaintableFlags = 0b1
	// PaintableStaticContents: content is immutable. The
	// gdkpaintable::invalidate-contents signal will never be emitted.
	PaintableStaticContents PaintableFlags = 0b10
)

func marshalPaintableFlags(p uintptr) (interface{}, error) {
	return PaintableFlags(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for PaintableFlags.
func (p PaintableFlags) String() string {
	if p == 0 {
		return "PaintableFlags(0)"
	}

	var builder strings.Builder
	builder.Grow(43)

	for p != 0 {
		next := p & (p - 1)
		bit := p - next

		switch bit {
		case PaintableStaticSize:
			builder.WriteString("Size|")
		case PaintableStaticContents:
			builder.WriteString("Contents|")
		default:
			builder.WriteString(fmt.Sprintf("PaintableFlags(0b%b)|", bit))
		}

		p = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if p contains other.
func (p PaintableFlags) Has(other PaintableFlags) bool {
	return (p & other) == other
}

// PaintableOverrider contains methods that are overridable.
type PaintableOverrider interface {
}

// Paintable: GdkPaintable is a simple interface used by GTK to represent
// content that can be painted.
//
// The content of a GdkPaintable can be painted anywhere at any size without
// requiring any sort of layout. The interface is inspired by similar concepts
// elsewhere, such as ClutterContent
// (https://developer.gnome.org/clutter/stable/ClutterContent.html), HTML/CSS
// Paint Sources (https://www.w3.org/TR/css-images-4/#paint-source), or SVG
// Paint Servers (https://www.w3.org/TR/SVG2/pservers.html).
//
// A GdkPaintable can be snapshot at any time and size using
// gdk.Paintable.Snapshot(). How the paintable interprets that size and if it
// scales or centers itself into the given rectangle is implementation defined,
// though if you are implementing a GdkPaintable and don't know what to do, it
// is suggested that you scale your paintable ignoring any potential aspect
// ratio.
//
// The contents that a GdkPaintable produces may depend on the gdksnapshot
// passed to it. For example, paintables may decide to use more detailed images
// on higher resolution screens or when OpenGL is available. A GdkPaintable will
// however always produce the same output for the same snapshot.
//
// A GdkPaintable may change its contents, meaning that it will now produce a
// different output with the same snapshot. Once that happens, it will call
// gdk.Paintable.InvalidateContents() which will emit the
// gdkpaintable::invalidate-contents signal. If a paintable is known to never
// change its contents, it will set the GDK_PAINTABLE_STATIC_CONTENTS flag. If a
// consumer cannot deal with changing contents, it may call
// gdk.Paintable.GetCurrentImage() which will return a static paintable and use
// that.
//
// A paintable can report an intrinsic (or preferred) size or aspect ratio it
// wishes to be rendered at, though it doesn't have to. Consumers of the
// interface can use this information to layout thepaintable appropriately. Just
// like the contents, the size of a paintable can change. A paintable will
// indicate this by calling gdk.Paintable.InvalidateSize() which will emit the
// gdkpaintable::invalidate-size signal. And just like for contents, if a
// paintable is known to never change its size, it will set the
// GDK_PAINTABLE_STATIC_SIZE flag.
//
// Besides API for applications, there are some functions that are only useful
// for implementing subclasses and should not be used by applications:
// gdk.Paintable.InvalidateContents(), gdk.Paintable.InvalidateSize(),
// gdk.Paintable().NewEmpty.
//
// Paintable wraps an interface. This means the user can get the
// underlying type by calling Cast().
type Paintable struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Paintable)(nil)
)

// Paintabler describes Paintable's interface methods.
type Paintabler interface {
	coreglib.Objector

	basePaintable() *Paintable
}

var _ Paintabler = (*Paintable)(nil)

func ifaceInitPaintabler(gifacePtr, data C.gpointer) {
}

func wrapPaintable(obj *coreglib.Object) *Paintable {
	return &Paintable{
		Object: obj,
	}
}

func marshalPaintable(p uintptr) (interface{}, error) {
	return wrapPaintable(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *Paintable) basePaintable() *Paintable {
	return v
}

// BasePaintable returns the underlying base object.
func BasePaintable(obj Paintabler) *Paintable {
	return obj.basePaintable()
}

// ConnectInvalidateContents is emitted when the contents of the paintable
// change.
//
// Examples for such an event would be videos changing to the next frame or the
// icon theme for an icon changing.
func (v *Paintable) ConnectInvalidateContents(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "invalidate-contents", false, unsafe.Pointer(C._gotk4_gdk4_Paintable_ConnectInvalidateContents), f)
}

// ConnectInvalidateSize is emitted when the intrinsic size of the paintable
// changes.
//
// This means the values reported by at least one of
// gdk.Paintable.GetIntrinsicWidth(), gdk.Paintable.GetIntrinsicHeight() or
// gdk.Paintable.GetIntrinsicAspectRatio() has changed.
//
// Examples for such an event would be a paintable displaying the contents of a
// toplevel surface being resized.
func (v *Paintable) ConnectInvalidateSize(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "invalidate-size", false, unsafe.Pointer(C._gotk4_gdk4_Paintable_ConnectInvalidateSize), f)
}

// PaintableInterface: list of functions that can be implemented for the
// GdkPaintable interface.
//
// Note that apart from the PaintableInterface.snapshot() function, no virtual
// function of this interface is mandatory to implement, though it is a good
// idea to implement PaintableInterface.get_current_image() for non-static
// paintables and PaintableInterface.get_flags() if the image is not dynamic as
// the default implementation returns no flags and that will make the
// implementation likely quite slow.
//
// An instance of this type is always passed by reference.
type PaintableInterface struct {
	*paintableInterface
}

// paintableInterface is the struct that's finalized.
type paintableInterface struct {
	native unsafe.Pointer
}

var GIRInfoPaintableInterface = girepository.MustFind("Gdk", "PaintableInterface")
