// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeFrameTimings = coreglib.Type(girepository.MustFind("Gdk", "FrameTimings").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeFrameTimings, F: marshalFrameTimings},
	})
}

// FrameTimings: GdkFrameTimings object holds timing information for a single
// frame of the application’s displays.
//
// To retrieve GdkFrameTimings objects, use gdk.FrameClock.GetTimings() or
// gdk.FrameClock.GetCurrentTimings(). The information in GdkFrameTimings is
// useful for precise synchronization of video with the event or audio streams,
// and for measuring quality metrics for the application’s display, such as
// latency and jitter.
//
// An instance of this type is always passed by reference.
type FrameTimings struct {
	*frameTimings
}

// frameTimings is the struct that's finalized.
type frameTimings struct {
	native unsafe.Pointer
}

var GIRInfoFrameTimings = girepository.MustFind("Gdk", "FrameTimings")

func marshalFrameTimings(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &FrameTimings{&frameTimings{(unsafe.Pointer)(b)}}, nil
}
