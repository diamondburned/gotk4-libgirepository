// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gdk4_ContentProvider_ConnectContentChanged(gpointer, guintptr);
import "C"

// GType values.
var (
	GTypeContentProvider = coreglib.Type(girepository.MustFind("Gdk", "ContentProvider").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeContentProvider, F: marshalContentProvider},
	})
}

// ContentProviderOverrides contains methods that are overridable.
type ContentProviderOverrides struct {
}

func defaultContentProviderOverrides(v *ContentProvider) ContentProviderOverrides {
	return ContentProviderOverrides{}
}

// ContentProvider: GdkContentProvider is used to provide content for the
// clipboard or for drag-and-drop operations in a number of formats.
//
// To create a GdkContentProvider, use gdk.ContentProvider.NewForValue or
// gdk.ContentProvider.NewForBytes.
//
// GDK knows how to handle common text and image formats out-of-the-box. See
// gdk.ContentSerializer and gdk.ContentDeserializer if you want to add support
// for application-specific data formats.
type ContentProvider struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*ContentProvider)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*ContentProvider, *ContentProviderClass, ContentProviderOverrides](
		GTypeContentProvider,
		initContentProviderClass,
		wrapContentProvider,
		defaultContentProviderOverrides,
	)
}

func initContentProviderClass(gclass unsafe.Pointer, overrides ContentProviderOverrides, classInitFunc func(*ContentProviderClass)) {
	if classInitFunc != nil {
		class := (*ContentProviderClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapContentProvider(obj *coreglib.Object) *ContentProvider {
	return &ContentProvider{
		Object: obj,
	}
}

func marshalContentProvider(p uintptr) (interface{}, error) {
	return wrapContentProvider(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectContentChanged is emitted whenever the content provided by this
// provider has changed.
func (v *ContentProvider) ConnectContentChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "content-changed", false, unsafe.Pointer(C._gotk4_gdk4_ContentProvider_ConnectContentChanged), f)
}

// ContentProviderClass class structure for ContentProvider.
//
// An instance of this type is always passed by reference.
type ContentProviderClass struct {
	*contentProviderClass
}

// contentProviderClass is the struct that's finalized.
type contentProviderClass struct {
	native unsafe.Pointer
}

var GIRInfoContentProviderClass = girepository.MustFind("Gdk", "ContentProviderClass")
