// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gdk3_Screen_ConnectSizeChanged(gpointer, guintptr);
// extern void _gotk4_gdk3_Screen_ConnectMonitorsChanged(gpointer, guintptr);
// extern void _gotk4_gdk3_Screen_ConnectCompositedChanged(gpointer, guintptr);
import "C"

// GType values.
var (
	GTypeScreen = coreglib.Type(girepository.MustFind("Gdk", "Screen").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeScreen, F: marshalScreen},
	})
}

// Screen objects are the GDK representation of the screen on which windows can
// be displayed and on which the pointer moves. X originally identified screens
// with physical screens, but nowadays it is more common to have a single Screen
// which combines several physical monitors (see gdk_screen_get_n_monitors()).
//
// GdkScreen is used throughout GDK and GTK+ to specify which screen the top
// level windows are to be displayed on. it is also used to query the screen
// specification and default settings such as the default visual
// (gdk_screen_get_system_visual()), the dimensions of the physical monitors
// (gdk_screen_get_monitor_geometry()), etc.
type Screen struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Screen)(nil)
)

func wrapScreen(obj *coreglib.Object) *Screen {
	return &Screen{
		Object: obj,
	}
}

func marshalScreen(p uintptr) (interface{}, error) {
	return wrapScreen(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectCompositedChanged signal is emitted when the composited status of the
// screen changes.
func (v *Screen) ConnectCompositedChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "composited-changed", false, unsafe.Pointer(C._gotk4_gdk3_Screen_ConnectCompositedChanged), f)
}

// ConnectMonitorsChanged signal is emitted when the number, size or position of
// the monitors attached to the screen change.
//
// Only for X11 and OS X for now. A future implementation for Win32 may be a
// possibility.
func (v *Screen) ConnectMonitorsChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "monitors-changed", false, unsafe.Pointer(C._gotk4_gdk3_Screen_ConnectMonitorsChanged), f)
}

// ConnectSizeChanged signal is emitted when the pixel width or height of a
// screen changes.
func (v *Screen) ConnectSizeChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "size-changed", false, unsafe.Pointer(C._gotk4_gdk3_Screen_ConnectSizeChanged), f)
}
