// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
// extern void _gotk4_gdk3_Display_ConnectSeatRemoved(gpointer, void*, guintptr);
// extern void _gotk4_gdk3_Display_ConnectSeatAdded(gpointer, void*, guintptr);
// extern void _gotk4_gdk3_Display_ConnectOpened(gpointer, guintptr);
// extern void _gotk4_gdk3_Display_ConnectMonitorRemoved(gpointer, void*, guintptr);
// extern void _gotk4_gdk3_Display_ConnectMonitorAdded(gpointer, void*, guintptr);
// extern void _gotk4_gdk3_Display_ConnectClosed(gpointer, gboolean, guintptr);
import "C"

// GType values.
var (
	GTypeDisplay = coreglib.Type(girepository.MustFind("Gdk", "Display").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDisplay, F: marshalDisplay},
	})
}

// Display objects purpose are two fold:
//
// - To manage and provide information about input devices (pointers and
// keyboards)
//
// - To manage and provide information about the available Screens
//
// GdkDisplay objects are the GDK representation of an X Display, which can be
// described as a workstation consisting of a keyboard, a pointing device (such
// as a mouse) and one or more screens. It is used to open and keep track of
// various GdkScreen objects currently instantiated by the application. It is
// also used to access the keyboard(s) and mouse pointer(s) of the display.
//
// Most of the input device handling has been factored out into the separate
// DeviceManager object. Every display has a device manager, which you can
// obtain using gdk_display_get_device_manager().
type Display struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Display)(nil)
)

func wrapDisplay(obj *coreglib.Object) *Display {
	return &Display{
		Object: obj,
	}
}

func marshalDisplay(p uintptr) (interface{}, error) {
	return wrapDisplay(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectClosed signal is emitted when the connection to the windowing system
// for display is closed.
func (v *Display) ConnectClosed(f func(isError bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "closed", false, unsafe.Pointer(C._gotk4_gdk3_Display_ConnectClosed), f)
}

// ConnectMonitorAdded signal is emitted whenever a monitor is added.
func (v *Display) ConnectMonitorAdded(f func(monitor *Monitor)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "monitor-added", false, unsafe.Pointer(C._gotk4_gdk3_Display_ConnectMonitorAdded), f)
}

// ConnectMonitorRemoved signal is emitted whenever a monitor is removed.
func (v *Display) ConnectMonitorRemoved(f func(monitor *Monitor)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "monitor-removed", false, unsafe.Pointer(C._gotk4_gdk3_Display_ConnectMonitorRemoved), f)
}

// ConnectOpened signal is emitted when the connection to the windowing system
// for display is opened.
func (v *Display) ConnectOpened(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "opened", false, unsafe.Pointer(C._gotk4_gdk3_Display_ConnectOpened), f)
}

// ConnectSeatAdded signal is emitted whenever a new seat is made known to the
// windowing system.
func (v *Display) ConnectSeatAdded(f func(seat Seater)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "seat-added", false, unsafe.Pointer(C._gotk4_gdk3_Display_ConnectSeatAdded), f)
}

// ConnectSeatRemoved signal is emitted whenever a seat is removed by the
// windowing system.
func (v *Display) ConnectSeatRemoved(f func(seat Seater)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(v, "seat-removed", false, unsafe.Pointer(C._gotk4_gdk3_Display_ConnectSeatRemoved), f)
}
