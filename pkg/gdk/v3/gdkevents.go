// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"fmt"
	"runtime"
	"strings"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeCrossingMode         = coreglib.Type(girepository.MustFind("Gdk", "CrossingMode").RegisteredGType())
	GTypeEventType            = coreglib.Type(girepository.MustFind("Gdk", "EventType").RegisteredGType())
	GTypeFilterReturn         = coreglib.Type(girepository.MustFind("Gdk", "FilterReturn").RegisteredGType())
	GTypeNotifyType           = coreglib.Type(girepository.MustFind("Gdk", "NotifyType").RegisteredGType())
	GTypeOwnerChange          = coreglib.Type(girepository.MustFind("Gdk", "OwnerChange").RegisteredGType())
	GTypePropertyState        = coreglib.Type(girepository.MustFind("Gdk", "PropertyState").RegisteredGType())
	GTypeScrollDirection      = coreglib.Type(girepository.MustFind("Gdk", "ScrollDirection").RegisteredGType())
	GTypeSettingAction        = coreglib.Type(girepository.MustFind("Gdk", "SettingAction").RegisteredGType())
	GTypeTouchpadGesturePhase = coreglib.Type(girepository.MustFind("Gdk", "TouchpadGesturePhase").RegisteredGType())
	GTypeVisibilityState      = coreglib.Type(girepository.MustFind("Gdk", "VisibilityState").RegisteredGType())
	GTypeWindowState          = coreglib.Type(girepository.MustFind("Gdk", "WindowState").RegisteredGType())
	GTypeEventSequence        = coreglib.Type(girepository.MustFind("Gdk", "EventSequence").RegisteredGType())
	GTypeEvent                = coreglib.Type(girepository.MustFind("Gdk", "Event").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeCrossingMode, F: marshalCrossingMode},
		coreglib.TypeMarshaler{T: GTypeEventType, F: marshalEventType},
		coreglib.TypeMarshaler{T: GTypeFilterReturn, F: marshalFilterReturn},
		coreglib.TypeMarshaler{T: GTypeNotifyType, F: marshalNotifyType},
		coreglib.TypeMarshaler{T: GTypeOwnerChange, F: marshalOwnerChange},
		coreglib.TypeMarshaler{T: GTypePropertyState, F: marshalPropertyState},
		coreglib.TypeMarshaler{T: GTypeScrollDirection, F: marshalScrollDirection},
		coreglib.TypeMarshaler{T: GTypeSettingAction, F: marshalSettingAction},
		coreglib.TypeMarshaler{T: GTypeTouchpadGesturePhase, F: marshalTouchpadGesturePhase},
		coreglib.TypeMarshaler{T: GTypeVisibilityState, F: marshalVisibilityState},
		coreglib.TypeMarshaler{T: GTypeWindowState, F: marshalWindowState},
		coreglib.TypeMarshaler{T: GTypeEventSequence, F: marshalEventSequence},
		coreglib.TypeMarshaler{T: GTypeEvent, F: marshalEvent},
	})
}

// PRIORITY_REDRAW: this is the priority that the idle handler processing window
// updates is given in the [GLib Main Loop][glib-The-Main-Event-Loop].
const PRIORITY_REDRAW = 120

// CrossingMode specifies the crossing mode for EventCrossing.
type CrossingMode C.gint

const (
	// CrossingNormal: crossing because of pointer motion.
	CrossingNormal CrossingMode = iota
	// CrossingGrab: crossing because a grab is activated.
	CrossingGrab
	// CrossingUngrab: crossing because a grab is deactivated.
	CrossingUngrab
	// CrossingGTKGrab: crossing because a GTK+ grab is activated.
	CrossingGTKGrab
	// CrossingGTKUngrab: crossing because a GTK+ grab is deactivated.
	CrossingGTKUngrab
	// CrossingStateChanged: crossing because a GTK+ widget changed state (e.g.
	// sensitivity).
	CrossingStateChanged
	// CrossingTouchBegin: crossing because a touch sequence has begun, this
	// event is synthetic as the pointer might have not left the window.
	CrossingTouchBegin
	// CrossingTouchEnd: crossing because a touch sequence has ended, this event
	// is synthetic as the pointer might have not left the window.
	CrossingTouchEnd
	// CrossingDeviceSwitch: crossing because of a device switch (i.e. a mouse
	// taking control of the pointer after a touch device), this event is
	// synthetic as the pointer didn’t leave the window.
	CrossingDeviceSwitch
)

func marshalCrossingMode(p uintptr) (interface{}, error) {
	return CrossingMode(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for CrossingMode.
func (c CrossingMode) String() string {
	switch c {
	case CrossingNormal:
		return "Normal"
	case CrossingGrab:
		return "Grab"
	case CrossingUngrab:
		return "Ungrab"
	case CrossingGTKGrab:
		return "GTKGrab"
	case CrossingGTKUngrab:
		return "GTKUngrab"
	case CrossingStateChanged:
		return "StateChanged"
	case CrossingTouchBegin:
		return "TouchBegin"
	case CrossingTouchEnd:
		return "TouchEnd"
	case CrossingDeviceSwitch:
		return "DeviceSwitch"
	default:
		return fmt.Sprintf("CrossingMode(%d)", c)
	}
}

// EventType specifies the type of the event.
//
// Do not confuse these events with the signals that GTK+ widgets emit. Although
// many of these events result in corresponding signals being emitted, the
// events are often transformed or filtered along the way.
//
// In some language bindings, the values GDK_2BUTTON_PRESS and GDK_3BUTTON_PRESS
// would translate into something syntactically invalid (eg
// Gdk.EventType.2ButtonPress, where a symbol is not allowed to start with a
// number). In that case, the aliases GDK_DOUBLE_BUTTON_PRESS and
// GDK_TRIPLE_BUTTON_PRESS can be used instead.
type EventType C.gint

const (
	// NothingType: special code to indicate a null event.
	NothingType EventType = -1
	// DeleteType: window manager has requested that the toplevel window be
	// hidden or destroyed, usually when the user clicks on a special icon in
	// the title bar.
	DeleteType EventType = 0
	// DestroyType: window has been destroyed.
	DestroyType EventType = 1
	// ExposeType: all or part of the window has become visible and needs to be
	// redrawn.
	ExposeType EventType = 2
	// MotionNotifyType: pointer (usually a mouse) has moved.
	MotionNotifyType EventType = 3
	// ButtonPressType: mouse button has been pressed.
	ButtonPressType EventType = 4
	// TwoButtonPressType: mouse button has been double-clicked (clicked twice
	// within a short period of time). Note that each click also generates a
	// GDK_BUTTON_PRESS event.
	TwoButtonPressType EventType = 5
	// DoubleButtonPressType alias for GDK_2BUTTON_PRESS, added in 3.6.
	DoubleButtonPressType EventType = 5
	// ThreeButtonPressType: mouse button has been clicked 3 times in a short
	// period of time. Note that each click also generates a GDK_BUTTON_PRESS
	// event.
	ThreeButtonPressType EventType = 6
	// TripleButtonPressType alias for GDK_3BUTTON_PRESS, added in 3.6.
	TripleButtonPressType EventType = 6
	// ButtonReleaseType: mouse button has been released.
	ButtonReleaseType EventType = 7
	// KeyPressType: key has been pressed.
	KeyPressType EventType = 8
	// KeyReleaseType: key has been released.
	KeyReleaseType EventType = 9
	// EnterNotifyType: pointer has entered the window.
	EnterNotifyType EventType = 10
	// LeaveNotifyType: pointer has left the window.
	LeaveNotifyType EventType = 11
	// FocusChangeType: keyboard focus has entered or left the window.
	FocusChangeType EventType = 12
	// ConfigureType: size, position or stacking order of the window has
	// changed. Note that GTK+ discards these events for GDK_WINDOW_CHILD
	// windows.
	ConfigureType EventType = 13
	// MapType: window has been mapped.
	MapType EventType = 14
	// UnmapType: window has been unmapped.
	UnmapType EventType = 15
	// PropertyNotifyType: property on the window has been changed or deleted.
	PropertyNotifyType EventType = 16
	// SelectionClearType: application has lost ownership of a selection.
	SelectionClearType EventType = 17
	// SelectionRequestType: another application has requested a selection.
	SelectionRequestType EventType = 18
	// SelectionNotifyType: selection has been received.
	SelectionNotifyType EventType = 19
	// ProximityInType: input device has moved into contact with a sensing
	// surface (e.g. a touchscreen or graphics tablet).
	ProximityInType EventType = 20
	// ProximityOutType: input device has moved out of contact with a sensing
	// surface.
	ProximityOutType EventType = 21
	// DragEnterType: mouse has entered the window while a drag is in progress.
	DragEnterType EventType = 22
	// DragLeaveType: mouse has left the window while a drag is in progress.
	DragLeaveType EventType = 23
	// DragMotionType: mouse has moved in the window while a drag is in
	// progress.
	DragMotionType EventType = 24
	// DragStatusType status of the drag operation initiated by the window has
	// changed.
	DragStatusType EventType = 25
	// DropStartType: drop operation onto the window has started.
	DropStartType EventType = 26
	// DropFinishedType: drop operation initiated by the window has completed.
	DropFinishedType EventType = 27
	// ClientEventType: message has been received from another application.
	ClientEventType EventType = 28
	// VisibilityNotifyType: window visibility status has changed.
	VisibilityNotifyType EventType = 29
	// ScrollType: scroll wheel was turned.
	ScrollType EventType = 31
	// WindowStateType: state of a window has changed. See WindowState for the
	// possible window states.
	WindowStateType EventType = 32
	// SettingType: setting has been modified.
	SettingType EventType = 33
	// OwnerChangeType: owner of a selection has changed. This event type was
	// added in 2.6.
	OwnerChangeType EventType = 34
	// GrabBrokenType: pointer or keyboard grab was broken. This event type was
	// added in 2.8.
	GrabBrokenType EventType = 35
	// DamageType: content of the window has been changed. This event type was
	// added in 2.14.
	DamageType EventType = 36
	// TouchBeginType: new touch event sequence has just started. This event
	// type was added in 3.4.
	TouchBeginType EventType = 37
	// TouchUpdateType: touch event sequence has been updated. This event type
	// was added in 3.4.
	TouchUpdateType EventType = 38
	// TouchEndType: touch event sequence has finished. This event type was
	// added in 3.4.
	TouchEndType EventType = 39
	// TouchCancelType: touch event sequence has been canceled. This event type
	// was added in 3.4.
	TouchCancelType EventType = 40
	// TouchpadSwipeType: touchpad swipe gesture event, the current state is
	// determined by its phase field. This event type was added in 3.18.
	TouchpadSwipeType EventType = 41
	// TouchpadPinchType: touchpad pinch gesture event, the current state is
	// determined by its phase field. This event type was added in 3.18.
	TouchpadPinchType EventType = 42
	// PadButtonPressType: tablet pad button press event. This event type was
	// added in 3.22.
	PadButtonPressType EventType = 43
	// PadButtonReleaseType: tablet pad button release event. This event type
	// was added in 3.22.
	PadButtonReleaseType EventType = 44
	// PadRingType: tablet pad axis event from a "ring". This event type was
	// added in 3.22.
	PadRingType EventType = 45
	// PadStripType: tablet pad axis event from a "strip". This event type was
	// added in 3.22.
	PadStripType EventType = 46
	// PadGroupModeType: tablet pad group mode change. This event type was added
	// in 3.22.
	PadGroupModeType EventType = 47
	// EventLastType marks the end of the GdkEventType enumeration. Added in
	// 2.18.
	EventLastType EventType = 48
)

func marshalEventType(p uintptr) (interface{}, error) {
	return EventType(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for EventType.
func (e EventType) String() string {
	switch e {
	case NothingType:
		return "Nothing"
	case DeleteType:
		return "Delete"
	case DestroyType:
		return "Destroy"
	case ExposeType:
		return "Expose"
	case MotionNotifyType:
		return "MotionNotify"
	case ButtonPressType:
		return "ButtonPress"
	case TwoButtonPressType:
		return "2ButtonPress"
	case ThreeButtonPressType:
		return "3ButtonPress"
	case ButtonReleaseType:
		return "ButtonRelease"
	case KeyPressType:
		return "KeyPress"
	case KeyReleaseType:
		return "KeyRelease"
	case EnterNotifyType:
		return "EnterNotify"
	case LeaveNotifyType:
		return "LeaveNotify"
	case FocusChangeType:
		return "FocusChange"
	case ConfigureType:
		return "Configure"
	case MapType:
		return "Map"
	case UnmapType:
		return "Unmap"
	case PropertyNotifyType:
		return "PropertyNotify"
	case SelectionClearType:
		return "SelectionClear"
	case SelectionRequestType:
		return "SelectionRequest"
	case SelectionNotifyType:
		return "SelectionNotify"
	case ProximityInType:
		return "ProximityIn"
	case ProximityOutType:
		return "ProximityOut"
	case DragEnterType:
		return "DragEnter"
	case DragLeaveType:
		return "DragLeave"
	case DragMotionType:
		return "DragMotion"
	case DragStatusType:
		return "DragStatus"
	case DropStartType:
		return "DropStart"
	case DropFinishedType:
		return "DropFinished"
	case ClientEventType:
		return "ClientEvent"
	case VisibilityNotifyType:
		return "VisibilityNotify"
	case ScrollType:
		return "Scroll"
	case WindowStateType:
		return "WindowState"
	case SettingType:
		return "Setting"
	case OwnerChangeType:
		return "OwnerChange"
	case GrabBrokenType:
		return "GrabBroken"
	case DamageType:
		return "Damage"
	case TouchBeginType:
		return "TouchBegin"
	case TouchUpdateType:
		return "TouchUpdate"
	case TouchEndType:
		return "TouchEnd"
	case TouchCancelType:
		return "TouchCancel"
	case TouchpadSwipeType:
		return "TouchpadSwipe"
	case TouchpadPinchType:
		return "TouchpadPinch"
	case PadButtonPressType:
		return "PadButtonPress"
	case PadButtonReleaseType:
		return "PadButtonRelease"
	case PadRingType:
		return "PadRing"
	case PadStripType:
		return "PadStrip"
	case PadGroupModeType:
		return "PadGroupMode"
	case EventLastType:
		return "EventLast"
	default:
		return fmt.Sprintf("EventType(%d)", e)
	}
}

// FilterReturn specifies the result of applying a FilterFunc to a native event.
type FilterReturn C.gint

const (
	// FilterContinue: event not handled, continue processing.
	FilterContinue FilterReturn = iota
	// FilterTranslate: native event translated into a GDK event and stored in
	// the event structure that was passed in.
	FilterTranslate
	// FilterRemove: event handled, terminate processing.
	FilterRemove
)

func marshalFilterReturn(p uintptr) (interface{}, error) {
	return FilterReturn(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for FilterReturn.
func (f FilterReturn) String() string {
	switch f {
	case FilterContinue:
		return "Continue"
	case FilterTranslate:
		return "Translate"
	case FilterRemove:
		return "Remove"
	default:
		return fmt.Sprintf("FilterReturn(%d)", f)
	}
}

// NotifyType specifies the kind of crossing for EventCrossing.
//
// See the X11 protocol specification of LeaveNotify for full details of
// crossing event generation.
type NotifyType C.gint

const (
	// NotifyAncestor: window is entered from an ancestor or left towards an
	// ancestor.
	NotifyAncestor NotifyType = iota
	// NotifyVirtual: pointer moves between an ancestor and an inferior of the
	// window.
	NotifyVirtual
	// NotifyInferior: window is entered from an inferior or left towards an
	// inferior.
	NotifyInferior
	// NotifyNonlinear: window is entered from or left towards a window which is
	// neither an ancestor nor an inferior.
	NotifyNonlinear
	// NotifyNonlinearVirtual: pointer moves between two windows which are not
	// ancestors of each other and the window is part of the ancestor chain
	// between one of these windows and their least common ancestor.
	NotifyNonlinearVirtual
	// NotifyUnknown: unknown type of enter/leave event occurred.
	NotifyUnknown
)

func marshalNotifyType(p uintptr) (interface{}, error) {
	return NotifyType(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for NotifyType.
func (n NotifyType) String() string {
	switch n {
	case NotifyAncestor:
		return "Ancestor"
	case NotifyVirtual:
		return "Virtual"
	case NotifyInferior:
		return "Inferior"
	case NotifyNonlinear:
		return "Nonlinear"
	case NotifyNonlinearVirtual:
		return "NonlinearVirtual"
	case NotifyUnknown:
		return "Unknown"
	default:
		return fmt.Sprintf("NotifyType(%d)", n)
	}
}

// OwnerChange specifies why a selection ownership was changed.
type OwnerChange C.gint

const (
	// OwnerChangeNewOwner: some other app claimed the ownership.
	OwnerChangeNewOwner OwnerChange = iota
	// OwnerChangeDestroy: window was destroyed.
	OwnerChangeDestroy
	// OwnerChangeClose: client was closed.
	OwnerChangeClose
)

func marshalOwnerChange(p uintptr) (interface{}, error) {
	return OwnerChange(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for OwnerChange.
func (o OwnerChange) String() string {
	switch o {
	case OwnerChangeNewOwner:
		return "NewOwner"
	case OwnerChangeDestroy:
		return "Destroy"
	case OwnerChangeClose:
		return "Close"
	default:
		return fmt.Sprintf("OwnerChange(%d)", o)
	}
}

// PropertyState specifies the type of a property change for a EventProperty.
type PropertyState C.gint

const (
	// PropertyNewValue: property value was changed.
	PropertyNewValue PropertyState = iota
	// PropertyDelete: property was deleted.
	PropertyDelete
)

func marshalPropertyState(p uintptr) (interface{}, error) {
	return PropertyState(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for PropertyState.
func (p PropertyState) String() string {
	switch p {
	case PropertyNewValue:
		return "NewValue"
	case PropertyDelete:
		return "Delete"
	default:
		return fmt.Sprintf("PropertyState(%d)", p)
	}
}

// ScrollDirection specifies the direction for EventScroll.
type ScrollDirection C.gint

const (
	// ScrollUp: window is scrolled up.
	ScrollUp ScrollDirection = iota
	// ScrollDown: window is scrolled down.
	ScrollDown
	// ScrollLeft: window is scrolled to the left.
	ScrollLeft
	// ScrollRight: window is scrolled to the right.
	ScrollRight
	// ScrollSmooth: scrolling is determined by the delta values in EventScroll.
	// See gdk_event_get_scroll_deltas(). Since: 3.4.
	ScrollSmooth
)

func marshalScrollDirection(p uintptr) (interface{}, error) {
	return ScrollDirection(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for ScrollDirection.
func (s ScrollDirection) String() string {
	switch s {
	case ScrollUp:
		return "Up"
	case ScrollDown:
		return "Down"
	case ScrollLeft:
		return "Left"
	case ScrollRight:
		return "Right"
	case ScrollSmooth:
		return "Smooth"
	default:
		return fmt.Sprintf("ScrollDirection(%d)", s)
	}
}

// SettingAction specifies the kind of modification applied to a setting in a
// EventSetting.
type SettingAction C.gint

const (
	// NewSettingAction: setting was added.
	NewSettingAction SettingAction = iota
	// SettingActionChanged: setting was changed.
	SettingActionChanged
	// SettingActionDeleted: setting was deleted.
	SettingActionDeleted
)

func marshalSettingAction(p uintptr) (interface{}, error) {
	return SettingAction(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for SettingAction.
func (s SettingAction) String() string {
	switch s {
	case NewSettingAction:
		return "New"
	case SettingActionChanged:
		return "Changed"
	case SettingActionDeleted:
		return "Deleted"
	default:
		return fmt.Sprintf("SettingAction(%d)", s)
	}
}

// TouchpadGesturePhase specifies the current state of a touchpad gesture. All
// gestures are guaranteed to begin with an event with phase
// GDK_TOUCHPAD_GESTURE_PHASE_BEGIN, followed by 0 or several events with phase
// GDK_TOUCHPAD_GESTURE_PHASE_UPDATE.
//
// A finished gesture may have 2 possible outcomes, an event with phase
// GDK_TOUCHPAD_GESTURE_PHASE_END will be emitted when the gesture is considered
// successful, this should be used as the hint to perform any permanent changes.
//
// Cancelled gestures may be so for a variety of reasons, due to hardware or the
// compositor, or due to the gesture recognition layers hinting the gesture did
// not finish resolutely (eg. a 3rd finger being added during a pinch gesture).
// In these cases, the last event will report the phase
// GDK_TOUCHPAD_GESTURE_PHASE_CANCEL, this should be used as a hint to undo any
// visible/permanent changes that were done throughout the progress of the
// gesture.
//
// See also EventTouchpadSwipe and EventTouchpadPinch.
type TouchpadGesturePhase C.gint

const (
	// TouchpadGesturePhaseBegin: gesture has begun.
	TouchpadGesturePhaseBegin TouchpadGesturePhase = iota
	// TouchpadGesturePhaseUpdate: gesture has been updated.
	TouchpadGesturePhaseUpdate
	// TouchpadGesturePhaseEnd: gesture was finished, changes should be
	// permanently applied.
	TouchpadGesturePhaseEnd
	// TouchpadGesturePhaseCancel: gesture was cancelled, all changes should be
	// undone.
	TouchpadGesturePhaseCancel
)

func marshalTouchpadGesturePhase(p uintptr) (interface{}, error) {
	return TouchpadGesturePhase(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for TouchpadGesturePhase.
func (t TouchpadGesturePhase) String() string {
	switch t {
	case TouchpadGesturePhaseBegin:
		return "Begin"
	case TouchpadGesturePhaseUpdate:
		return "Update"
	case TouchpadGesturePhaseEnd:
		return "End"
	case TouchpadGesturePhaseCancel:
		return "Cancel"
	default:
		return fmt.Sprintf("TouchpadGesturePhase(%d)", t)
	}
}

// VisibilityState specifies the visiblity status of a window for a
// EventVisibility.
type VisibilityState C.gint

const (
	// VisibilityUnobscured: window is completely visible.
	VisibilityUnobscured VisibilityState = iota
	// VisibilityPartial: window is partially visible.
	VisibilityPartial
	// VisibilityFullyObscured: window is not visible at all.
	VisibilityFullyObscured
)

func marshalVisibilityState(p uintptr) (interface{}, error) {
	return VisibilityState(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for VisibilityState.
func (v VisibilityState) String() string {
	switch v {
	case VisibilityUnobscured:
		return "Unobscured"
	case VisibilityPartial:
		return "Partial"
	case VisibilityFullyObscured:
		return "FullyObscured"
	default:
		return fmt.Sprintf("VisibilityState(%d)", v)
	}
}

// WindowState specifies the state of a toplevel window.
type WindowState C.guint

const (
	// WindowStateWithdrawn: window is not shown.
	WindowStateWithdrawn WindowState = 0b1
	// WindowStateIconified: window is minimized.
	WindowStateIconified WindowState = 0b10
	// WindowStateMaximized: window is maximized.
	WindowStateMaximized WindowState = 0b100
	// WindowStateSticky: window is sticky.
	WindowStateSticky WindowState = 0b1000
	// WindowStateFullscreen: window is maximized without decorations.
	WindowStateFullscreen WindowState = 0b10000
	// WindowStateAbove: window is kept above other windows.
	WindowStateAbove WindowState = 0b100000
	// WindowStateBelow: window is kept below other windows.
	WindowStateBelow WindowState = 0b1000000
	// WindowStateFocused: window is presented as focused (with active
	// decorations).
	WindowStateFocused WindowState = 0b10000000
	// WindowStateTiled: window is in a tiled state, Since 3.10. Since 3.22.23,
	// this is deprecated in favor of per-edge information.
	WindowStateTiled WindowState = 0b100000000
	// WindowStateTopTiled: whether the top edge is tiled, Since 3.22.23.
	WindowStateTopTiled WindowState = 0b1000000000
	// WindowStateTopResizable: whether the top edge is resizable, Since
	// 3.22.23.
	WindowStateTopResizable WindowState = 0b10000000000
	// WindowStateRightTiled: whether the right edge is tiled, Since 3.22.23.
	WindowStateRightTiled WindowState = 0b100000000000
	// WindowStateRightResizable: whether the right edge is resizable, Since
	// 3.22.23.
	WindowStateRightResizable WindowState = 0b1000000000000
	// WindowStateBottomTiled: whether the bottom edge is tiled, Since 3.22.23.
	WindowStateBottomTiled WindowState = 0b10000000000000
	// WindowStateBottomResizable: whether the bottom edge is resizable, Since
	// 3.22.23.
	WindowStateBottomResizable WindowState = 0b100000000000000
	// WindowStateLeftTiled: whether the left edge is tiled, Since 3.22.23.
	WindowStateLeftTiled WindowState = 0b1000000000000000
	// WindowStateLeftResizable: whether the left edge is resizable, Since
	// 3.22.23.
	WindowStateLeftResizable WindowState = 0b10000000000000000
)

func marshalWindowState(p uintptr) (interface{}, error) {
	return WindowState(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for WindowState.
func (w WindowState) String() string {
	if w == 0 {
		return "WindowState(0)"
	}

	var builder strings.Builder
	builder.Grow(256)

	for w != 0 {
		next := w & (w - 1)
		bit := w - next

		switch bit {
		case WindowStateWithdrawn:
			builder.WriteString("Withdrawn|")
		case WindowStateIconified:
			builder.WriteString("Iconified|")
		case WindowStateMaximized:
			builder.WriteString("Maximized|")
		case WindowStateSticky:
			builder.WriteString("Sticky|")
		case WindowStateFullscreen:
			builder.WriteString("Fullscreen|")
		case WindowStateAbove:
			builder.WriteString("Above|")
		case WindowStateBelow:
			builder.WriteString("Below|")
		case WindowStateFocused:
			builder.WriteString("Focused|")
		case WindowStateTiled:
			builder.WriteString("Tiled|")
		case WindowStateTopTiled:
			builder.WriteString("TopTiled|")
		case WindowStateTopResizable:
			builder.WriteString("TopResizable|")
		case WindowStateRightTiled:
			builder.WriteString("RightTiled|")
		case WindowStateRightResizable:
			builder.WriteString("RightResizable|")
		case WindowStateBottomTiled:
			builder.WriteString("BottomTiled|")
		case WindowStateBottomResizable:
			builder.WriteString("BottomResizable|")
		case WindowStateLeftTiled:
			builder.WriteString("LeftTiled|")
		case WindowStateLeftResizable:
			builder.WriteString("LeftResizable|")
		default:
			builder.WriteString(fmt.Sprintf("WindowState(0b%b)|", bit))
		}

		w = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if w contains other.
func (w WindowState) Has(other WindowState) bool {
	return (w & other) == other
}

// EventFunc specifies the type of function passed to gdk_event_handler_set() to
// handle all GDK events.
type EventFunc func(event *Event)

// EventAny contains the fields which are common to all event structs. Any event
// pointer can safely be cast to a pointer to a EventAny to access these fields.
//
// An instance of this type is always passed by reference.
type EventAny struct {
	*eventAny
}

// eventAny is the struct that's finalized.
type eventAny struct {
	native unsafe.Pointer
}

var GIRInfoEventAny = girepository.MustFind("Gdk", "EventAny")

// EventButton: used for button press and button release events. The type field
// will be one of GDK_BUTTON_PRESS, GDK_2BUTTON_PRESS, GDK_3BUTTON_PRESS or
// GDK_BUTTON_RELEASE,
//
// Double and triple-clicks result in a sequence of events being received. For
// double-clicks the order of events will be:
//
// - GDK_BUTTON_PRESS
//
// - GDK_BUTTON_RELEASE
//
// - GDK_BUTTON_PRESS
//
// - GDK_2BUTTON_PRESS
//
// - GDK_BUTTON_RELEASE
//
// Note that the first click is received just like a normal button press, while
// the second click results in a GDK_2BUTTON_PRESS being received just after the
// GDK_BUTTON_PRESS.
//
// Triple-clicks are very similar to double-clicks, except that
// GDK_3BUTTON_PRESS is inserted after the third click. The order of the events
// is:
//
// - GDK_BUTTON_PRESS
//
// - GDK_BUTTON_RELEASE
//
// - GDK_BUTTON_PRESS
//
// - GDK_2BUTTON_PRESS
//
// - GDK_BUTTON_RELEASE
//
// - GDK_BUTTON_PRESS
//
// - GDK_3BUTTON_PRESS
//
// - GDK_BUTTON_RELEASE
//
// For a double click to occur, the second button press must occur within 1/4 of
// a second of the first. For a triple click to occur, the third button press
// must also occur within 1/2 second of the first button press.
//
// An instance of this type is always passed by reference.
type EventButton struct {
	*eventButton
}

// eventButton is the struct that's finalized.
type eventButton struct {
	native unsafe.Pointer
}

var GIRInfoEventButton = girepository.MustFind("Gdk", "EventButton")

// EventConfigure: generated when a window size or position has changed.
//
// An instance of this type is always passed by reference.
type EventConfigure struct {
	*eventConfigure
}

// eventConfigure is the struct that's finalized.
type eventConfigure struct {
	native unsafe.Pointer
}

var GIRInfoEventConfigure = girepository.MustFind("Gdk", "EventConfigure")

// EventCrossing: generated when the pointer enters or leaves a window.
//
// An instance of this type is always passed by reference.
type EventCrossing struct {
	*eventCrossing
}

// eventCrossing is the struct that's finalized.
type eventCrossing struct {
	native unsafe.Pointer
}

var GIRInfoEventCrossing = girepository.MustFind("Gdk", "EventCrossing")

// EventDND: generated during DND operations.
//
// An instance of this type is always passed by reference.
type EventDND struct {
	*eventDND
}

// eventDND is the struct that's finalized.
type eventDND struct {
	native unsafe.Pointer
}

var GIRInfoEventDND = girepository.MustFind("Gdk", "EventDND")

// EventExpose: generated when all or part of a window becomes visible and needs
// to be redrawn.
//
// An instance of this type is always passed by reference.
type EventExpose struct {
	*eventExpose
}

// eventExpose is the struct that's finalized.
type eventExpose struct {
	native unsafe.Pointer
}

var GIRInfoEventExpose = girepository.MustFind("Gdk", "EventExpose")

// EventFocus describes a change of keyboard focus.
//
// An instance of this type is always passed by reference.
type EventFocus struct {
	*eventFocus
}

// eventFocus is the struct that's finalized.
type eventFocus struct {
	native unsafe.Pointer
}

var GIRInfoEventFocus = girepository.MustFind("Gdk", "EventFocus")

// EventKey describes a key press or key release event.
//
// An instance of this type is always passed by reference.
type EventKey struct {
	*eventKey
}

// eventKey is the struct that's finalized.
type eventKey struct {
	native unsafe.Pointer
}

var GIRInfoEventKey = girepository.MustFind("Gdk", "EventKey")

// EventMotion: generated when the pointer moves.
//
// An instance of this type is always passed by reference.
type EventMotion struct {
	*eventMotion
}

// eventMotion is the struct that's finalized.
type eventMotion struct {
	native unsafe.Pointer
}

var GIRInfoEventMotion = girepository.MustFind("Gdk", "EventMotion")

// EventProperty describes a property change on a window.
//
// An instance of this type is always passed by reference.
type EventProperty struct {
	*eventProperty
}

// eventProperty is the struct that's finalized.
type eventProperty struct {
	native unsafe.Pointer
}

var GIRInfoEventProperty = girepository.MustFind("Gdk", "EventProperty")

// EventProximity: proximity events are generated when using GDK’s wrapper for
// the XInput extension. The XInput extension is an add-on for standard X that
// allows you to use nonstandard devices such as graphics tablets. A proximity
// event indicates that the stylus has moved in or out of contact with the
// tablet, or perhaps that the user’s finger has moved in or out of contact with
// a touch screen.
//
// This event type will be used pretty rarely. It only is important for XInput
// aware programs that are drawing their own cursor.
//
// An instance of this type is always passed by reference.
type EventProximity struct {
	*eventProximity
}

// eventProximity is the struct that's finalized.
type eventProximity struct {
	native unsafe.Pointer
}

var GIRInfoEventProximity = girepository.MustFind("Gdk", "EventProximity")

// EventScroll: generated from button presses for the buttons 4 to 7. Wheel mice
// are usually configured to generate button press events for buttons 4 and 5
// when the wheel is turned.
//
// Some GDK backends can also generate “smooth” scroll events, which can be
// recognized by the GDK_SCROLL_SMOOTH scroll direction. For these, the scroll
// deltas can be obtained with gdk_event_get_scroll_deltas().
//
// An instance of this type is always passed by reference.
type EventScroll struct {
	*eventScroll
}

// eventScroll is the struct that's finalized.
type eventScroll struct {
	native unsafe.Pointer
}

var GIRInfoEventScroll = girepository.MustFind("Gdk", "EventScroll")

// EventSelection: generated when a selection is requested or ownership of a
// selection is taken over by another client application.
//
// An instance of this type is always passed by reference.
type EventSelection struct {
	*eventSelection
}

// eventSelection is the struct that's finalized.
type eventSelection struct {
	native unsafe.Pointer
}

var GIRInfoEventSelection = girepository.MustFind("Gdk", "EventSelection")

// EventSequence: instance of this type is always passed by reference.
type EventSequence struct {
	*eventSequence
}

// eventSequence is the struct that's finalized.
type eventSequence struct {
	native unsafe.Pointer
}

var GIRInfoEventSequence = girepository.MustFind("Gdk", "EventSequence")

func marshalEventSequence(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &EventSequence{&eventSequence{(unsafe.Pointer)(b)}}, nil
}

// EventSetting: generated when a setting is modified.
//
// An instance of this type is always passed by reference.
type EventSetting struct {
	*eventSetting
}

// eventSetting is the struct that's finalized.
type eventSetting struct {
	native unsafe.Pointer
}

var GIRInfoEventSetting = girepository.MustFind("Gdk", "EventSetting")

// EventTouch: used for touch events. type field will be one of GDK_TOUCH_BEGIN,
// GDK_TOUCH_UPDATE, GDK_TOUCH_END or GDK_TOUCH_CANCEL.
//
// Touch events are grouped into sequences by means of the sequence field, which
// can also be obtained with gdk_event_get_event_sequence(). Each sequence
// begins with a GDK_TOUCH_BEGIN event, followed by any number of
// GDK_TOUCH_UPDATE events, and ends with a GDK_TOUCH_END (or GDK_TOUCH_CANCEL)
// event. With multitouch devices, there may be several active sequences at the
// same time.
//
// An instance of this type is always passed by reference.
type EventTouch struct {
	*eventTouch
}

// eventTouch is the struct that's finalized.
type eventTouch struct {
	native unsafe.Pointer
}

var GIRInfoEventTouch = girepository.MustFind("Gdk", "EventTouch")

// EventTouchpadPinch: generated during touchpad swipe gestures.
//
// An instance of this type is always passed by reference.
type EventTouchpadPinch struct {
	*eventTouchpadPinch
}

// eventTouchpadPinch is the struct that's finalized.
type eventTouchpadPinch struct {
	native unsafe.Pointer
}

var GIRInfoEventTouchpadPinch = girepository.MustFind("Gdk", "EventTouchpadPinch")

// EventTouchpadSwipe: generated during touchpad swipe gestures.
//
// An instance of this type is always passed by reference.
type EventTouchpadSwipe struct {
	*eventTouchpadSwipe
}

// eventTouchpadSwipe is the struct that's finalized.
type eventTouchpadSwipe struct {
	native unsafe.Pointer
}

var GIRInfoEventTouchpadSwipe = girepository.MustFind("Gdk", "EventTouchpadSwipe")

// EventVisibility: generated when the window visibility status has changed.
//
// Deprecated: Modern composited windowing systems with pervasive transparency
// make it impossible to track the visibility of a window reliably, so this
// event can not be guaranteed to provide useful information.
//
// An instance of this type is always passed by reference.
type EventVisibility struct {
	*eventVisibility
}

// eventVisibility is the struct that's finalized.
type eventVisibility struct {
	native unsafe.Pointer
}

var GIRInfoEventVisibility = girepository.MustFind("Gdk", "EventVisibility")

// EventWindowState: generated when the state of a toplevel window changes.
//
// An instance of this type is always passed by reference.
type EventWindowState struct {
	*eventWindowState
}

// eventWindowState is the struct that's finalized.
type eventWindowState struct {
	native unsafe.Pointer
}

var GIRInfoEventWindowState = girepository.MustFind("Gdk", "EventWindowState")

// Event contains a union of all of the event types, and allows access to the
// data fields in a number of ways.
//
// The event type is always the first field in all of the event types, and can
// always be accessed with the following code, no matter what type of event it
// is:
//
//      GdkEvent *event;
//      gdouble x;
//
//      x = event->button.x;.
type Event struct {
	*event
}

// event has the finalizer attached to it.
type event struct {
	native *C.GdkEvent
}

// Eventer is used for all functions that accept any kind of Event.
type Eventer interface {
	// Implementing types:
	//
	//    *EventAny
	//    *EventExpose
	//    *EventVisibility
	//    *EventMotion
	//    *EventButton
	//    *EventTouch
	//    *EventScroll
	//    *EventKey
	//    *EventCrossing
	//    *EventFocus
	//    *EventConfigure
	//    *EventProperty
	//    *EventSelection
	//    *EventOwnerChange
	//    *EventProximity
	//    *EventDND
	//    *EventWindowState
	//    *EventSetting
	//    *EventGrabBroken
	//    *EventTouchpadSwipe
	//    *EventTouchpadPinch
	//    *EventPadButton
	//    *EventPadAxis
	//    *EventPadGroupMode
	//

	underlyingEvent() unsafe.Pointer
}

// CopyEventer copies any type that belongs to a Event union
// into a new Event instance. To see supported types, refer to
// Eventer's documentation.
func CopyEventer(e Eventer) *Event {
	original := (*C.GdkEvent)(e.underlyingEvent())
	copied := C.gdk_event_copy(original)
	dst := (*Event)(gextras.NewStructNative(unsafe.Pointer(copied)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(dst)),
		func(intern *struct{ C unsafe.Pointer }) {
			{
				var args [1]girepository.Argument
				*(*unsafe.Pointer)(unsafe.Pointer(&args[0])) = unsafe.Pointer(intern.C)
				Gdk.GIRInfoEvent.InvokeRecordMethod("free", args[:], nil)
			}
		},
	)
	return dst
}

func marshalEvent(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &Event{&event{(*C.GdkEvent)(b)}}, nil
}

func (v *Event) underlyingEvent() unsafe.Pointer {
	return unsafe.Pointer(v.native)
}

// AsType returns a copy of e as the struct EventType.
// It does this without any knowledge on the actual type of the value, so
// the caller must take care of type-checking beforehand.
func (e *Event) AsType() EventType {
	cpy := e.event.native
	var dst EventType
	dst = *(*EventType)(unsafe.Pointer(cpy))
	runtime.KeepAlive(e.event)
	return dst
}

// underlyingEvent marks the struct for Eventer.
func (v *EventAny) underlyingEvent() unsafe.Pointer {
	return unsafe.Pointer(v.native)
}

// AsAny returns a copy of e as the struct *EventAny.
// It does this without any knowledge on the actual type of the value, so
// the caller must take care of type-checking beforehand.
func (e *Event) AsAny() *EventAny {
	cpy := e.event.native
	var dst *EventAny
	dst = (*EventAny)(gextras.NewStructNative(unsafe.Pointer(cpy)))
	runtime.KeepAlive(e.event)
	return dst
}

// underlyingEvent marks the struct for Eventer.
func (v *EventExpose) underlyingEvent() unsafe.Pointer {
	return unsafe.Pointer(v.native)
}

// AsExpose returns a copy of e as the struct *EventExpose.
// It does this without any knowledge on the actual type of the value, so
// the caller must take care of type-checking beforehand.
func (e *Event) AsExpose() *EventExpose {
	cpy := e.event.native
	var dst *EventExpose
	dst = (*EventExpose)(gextras.NewStructNative(unsafe.Pointer(cpy)))
	runtime.KeepAlive(e.event)
	return dst
}

// underlyingEvent marks the struct for Eventer.
func (v *EventVisibility) underlyingEvent() unsafe.Pointer {
	return unsafe.Pointer(v.native)
}

// AsVisibility returns a copy of e as the struct *EventVisibility.
// It does this without any knowledge on the actual type of the value, so
// the caller must take care of type-checking beforehand.
func (e *Event) AsVisibility() *EventVisibility {
	cpy := e.event.native
	var dst *EventVisibility
	dst = (*EventVisibility)(gextras.NewStructNative(unsafe.Pointer(cpy)))
	runtime.KeepAlive(e.event)
	return dst
}

// underlyingEvent marks the struct for Eventer.
func (v *EventMotion) underlyingEvent() unsafe.Pointer {
	return unsafe.Pointer(v.native)
}

// AsMotion returns a copy of e as the struct *EventMotion.
// It does this without any knowledge on the actual type of the value, so
// the caller must take care of type-checking beforehand.
func (e *Event) AsMotion() *EventMotion {
	cpy := e.event.native
	var dst *EventMotion
	dst = (*EventMotion)(gextras.NewStructNative(unsafe.Pointer(cpy)))
	runtime.KeepAlive(e.event)
	return dst
}

// underlyingEvent marks the struct for Eventer.
func (v *EventButton) underlyingEvent() unsafe.Pointer {
	return unsafe.Pointer(v.native)
}

// AsButton returns a copy of e as the struct *EventButton.
// It does this without any knowledge on the actual type of the value, so
// the caller must take care of type-checking beforehand.
func (e *Event) AsButton() *EventButton {
	cpy := e.event.native
	var dst *EventButton
	dst = (*EventButton)(gextras.NewStructNative(unsafe.Pointer(cpy)))
	runtime.KeepAlive(e.event)
	return dst
}

// underlyingEvent marks the struct for Eventer.
func (v *EventTouch) underlyingEvent() unsafe.Pointer {
	return unsafe.Pointer(v.native)
}

// AsTouch returns a copy of e as the struct *EventTouch.
// It does this without any knowledge on the actual type of the value, so
// the caller must take care of type-checking beforehand.
func (e *Event) AsTouch() *EventTouch {
	cpy := e.event.native
	var dst *EventTouch
	dst = (*EventTouch)(gextras.NewStructNative(unsafe.Pointer(cpy)))
	runtime.KeepAlive(e.event)
	return dst
}

// underlyingEvent marks the struct for Eventer.
func (v *EventScroll) underlyingEvent() unsafe.Pointer {
	return unsafe.Pointer(v.native)
}

// AsScroll returns a copy of e as the struct *EventScroll.
// It does this without any knowledge on the actual type of the value, so
// the caller must take care of type-checking beforehand.
func (e *Event) AsScroll() *EventScroll {
	cpy := e.event.native
	var dst *EventScroll
	dst = (*EventScroll)(gextras.NewStructNative(unsafe.Pointer(cpy)))
	runtime.KeepAlive(e.event)
	return dst
}

// underlyingEvent marks the struct for Eventer.
func (v *EventKey) underlyingEvent() unsafe.Pointer {
	return unsafe.Pointer(v.native)
}

// AsKey returns a copy of e as the struct *EventKey.
// It does this without any knowledge on the actual type of the value, so
// the caller must take care of type-checking beforehand.
func (e *Event) AsKey() *EventKey {
	cpy := e.event.native
	var dst *EventKey
	dst = (*EventKey)(gextras.NewStructNative(unsafe.Pointer(cpy)))
	runtime.KeepAlive(e.event)
	return dst
}

// underlyingEvent marks the struct for Eventer.
func (v *EventCrossing) underlyingEvent() unsafe.Pointer {
	return unsafe.Pointer(v.native)
}

// AsCrossing returns a copy of e as the struct *EventCrossing.
// It does this without any knowledge on the actual type of the value, so
// the caller must take care of type-checking beforehand.
func (e *Event) AsCrossing() *EventCrossing {
	cpy := e.event.native
	var dst *EventCrossing
	dst = (*EventCrossing)(gextras.NewStructNative(unsafe.Pointer(cpy)))
	runtime.KeepAlive(e.event)
	return dst
}

// underlyingEvent marks the struct for Eventer.
func (v *EventFocus) underlyingEvent() unsafe.Pointer {
	return unsafe.Pointer(v.native)
}

// AsFocusChange returns a copy of e as the struct *EventFocus.
// It does this without any knowledge on the actual type of the value, so
// the caller must take care of type-checking beforehand.
func (e *Event) AsFocusChange() *EventFocus {
	cpy := e.event.native
	var dst *EventFocus
	dst = (*EventFocus)(gextras.NewStructNative(unsafe.Pointer(cpy)))
	runtime.KeepAlive(e.event)
	return dst
}

// underlyingEvent marks the struct for Eventer.
func (v *EventConfigure) underlyingEvent() unsafe.Pointer {
	return unsafe.Pointer(v.native)
}

// AsConfigure returns a copy of e as the struct *EventConfigure.
// It does this without any knowledge on the actual type of the value, so
// the caller must take care of type-checking beforehand.
func (e *Event) AsConfigure() *EventConfigure {
	cpy := e.event.native
	var dst *EventConfigure
	dst = (*EventConfigure)(gextras.NewStructNative(unsafe.Pointer(cpy)))
	runtime.KeepAlive(e.event)
	return dst
}

// underlyingEvent marks the struct for Eventer.
func (v *EventProperty) underlyingEvent() unsafe.Pointer {
	return unsafe.Pointer(v.native)
}

// AsProperty returns a copy of e as the struct *EventProperty.
// It does this without any knowledge on the actual type of the value, so
// the caller must take care of type-checking beforehand.
func (e *Event) AsProperty() *EventProperty {
	cpy := e.event.native
	var dst *EventProperty
	dst = (*EventProperty)(gextras.NewStructNative(unsafe.Pointer(cpy)))
	runtime.KeepAlive(e.event)
	return dst
}

// underlyingEvent marks the struct for Eventer.
func (v *EventSelection) underlyingEvent() unsafe.Pointer {
	return unsafe.Pointer(v.native)
}

// AsSelection returns a copy of e as the struct *EventSelection.
// It does this without any knowledge on the actual type of the value, so
// the caller must take care of type-checking beforehand.
func (e *Event) AsSelection() *EventSelection {
	cpy := e.event.native
	var dst *EventSelection
	dst = (*EventSelection)(gextras.NewStructNative(unsafe.Pointer(cpy)))
	runtime.KeepAlive(e.event)
	return dst
}

// underlyingEvent marks the struct for Eventer.
func (v *EventOwnerChange) underlyingEvent() unsafe.Pointer {
	return unsafe.Pointer(v.native)
}

// AsOwnerChange returns a copy of e as the struct *EventOwnerChange.
// It does this without any knowledge on the actual type of the value, so
// the caller must take care of type-checking beforehand.
func (e *Event) AsOwnerChange() *EventOwnerChange {
	cpy := e.event.native
	var dst *EventOwnerChange
	dst = (*EventOwnerChange)(gextras.NewStructNative(unsafe.Pointer(cpy)))
	runtime.KeepAlive(e.event)
	return dst
}

// underlyingEvent marks the struct for Eventer.
func (v *EventProximity) underlyingEvent() unsafe.Pointer {
	return unsafe.Pointer(v.native)
}

// AsProximity returns a copy of e as the struct *EventProximity.
// It does this without any knowledge on the actual type of the value, so
// the caller must take care of type-checking beforehand.
func (e *Event) AsProximity() *EventProximity {
	cpy := e.event.native
	var dst *EventProximity
	dst = (*EventProximity)(gextras.NewStructNative(unsafe.Pointer(cpy)))
	runtime.KeepAlive(e.event)
	return dst
}

// underlyingEvent marks the struct for Eventer.
func (v *EventDND) underlyingEvent() unsafe.Pointer {
	return unsafe.Pointer(v.native)
}

// AsDND returns a copy of e as the struct *EventDND.
// It does this without any knowledge on the actual type of the value, so
// the caller must take care of type-checking beforehand.
func (e *Event) AsDND() *EventDND {
	cpy := e.event.native
	var dst *EventDND
	dst = (*EventDND)(gextras.NewStructNative(unsafe.Pointer(cpy)))
	runtime.KeepAlive(e.event)
	return dst
}

// underlyingEvent marks the struct for Eventer.
func (v *EventWindowState) underlyingEvent() unsafe.Pointer {
	return unsafe.Pointer(v.native)
}

// AsWindowState returns a copy of e as the struct *EventWindowState.
// It does this without any knowledge on the actual type of the value, so
// the caller must take care of type-checking beforehand.
func (e *Event) AsWindowState() *EventWindowState {
	cpy := e.event.native
	var dst *EventWindowState
	dst = (*EventWindowState)(gextras.NewStructNative(unsafe.Pointer(cpy)))
	runtime.KeepAlive(e.event)
	return dst
}

// underlyingEvent marks the struct for Eventer.
func (v *EventSetting) underlyingEvent() unsafe.Pointer {
	return unsafe.Pointer(v.native)
}

// AsSetting returns a copy of e as the struct *EventSetting.
// It does this without any knowledge on the actual type of the value, so
// the caller must take care of type-checking beforehand.
func (e *Event) AsSetting() *EventSetting {
	cpy := e.event.native
	var dst *EventSetting
	dst = (*EventSetting)(gextras.NewStructNative(unsafe.Pointer(cpy)))
	runtime.KeepAlive(e.event)
	return dst
}

// underlyingEvent marks the struct for Eventer.
func (v *EventGrabBroken) underlyingEvent() unsafe.Pointer {
	return unsafe.Pointer(v.native)
}

// AsGrabBroken returns a copy of e as the struct *EventGrabBroken.
// It does this without any knowledge on the actual type of the value, so
// the caller must take care of type-checking beforehand.
func (e *Event) AsGrabBroken() *EventGrabBroken {
	cpy := e.event.native
	var dst *EventGrabBroken
	dst = (*EventGrabBroken)(gextras.NewStructNative(unsafe.Pointer(cpy)))
	runtime.KeepAlive(e.event)
	return dst
}

// underlyingEvent marks the struct for Eventer.
func (v *EventTouchpadSwipe) underlyingEvent() unsafe.Pointer {
	return unsafe.Pointer(v.native)
}

// AsTouchpadSwipe returns a copy of e as the struct *EventTouchpadSwipe.
// It does this without any knowledge on the actual type of the value, so
// the caller must take care of type-checking beforehand.
func (e *Event) AsTouchpadSwipe() *EventTouchpadSwipe {
	cpy := e.event.native
	var dst *EventTouchpadSwipe
	dst = (*EventTouchpadSwipe)(gextras.NewStructNative(unsafe.Pointer(cpy)))
	runtime.KeepAlive(e.event)
	return dst
}

// underlyingEvent marks the struct for Eventer.
func (v *EventTouchpadPinch) underlyingEvent() unsafe.Pointer {
	return unsafe.Pointer(v.native)
}

// AsTouchpadPinch returns a copy of e as the struct *EventTouchpadPinch.
// It does this without any knowledge on the actual type of the value, so
// the caller must take care of type-checking beforehand.
func (e *Event) AsTouchpadPinch() *EventTouchpadPinch {
	cpy := e.event.native
	var dst *EventTouchpadPinch
	dst = (*EventTouchpadPinch)(gextras.NewStructNative(unsafe.Pointer(cpy)))
	runtime.KeepAlive(e.event)
	return dst
}

// underlyingEvent marks the struct for Eventer.
func (v *EventPadButton) underlyingEvent() unsafe.Pointer {
	return unsafe.Pointer(v.native)
}

// AsPadButton returns a copy of e as the struct *EventPadButton.
// It does this without any knowledge on the actual type of the value, so
// the caller must take care of type-checking beforehand.
func (e *Event) AsPadButton() *EventPadButton {
	cpy := e.event.native
	var dst *EventPadButton
	dst = (*EventPadButton)(gextras.NewStructNative(unsafe.Pointer(cpy)))
	runtime.KeepAlive(e.event)
	return dst
}

// underlyingEvent marks the struct for Eventer.
func (v *EventPadAxis) underlyingEvent() unsafe.Pointer {
	return unsafe.Pointer(v.native)
}

// AsPadAxis returns a copy of e as the struct *EventPadAxis.
// It does this without any knowledge on the actual type of the value, so
// the caller must take care of type-checking beforehand.
func (e *Event) AsPadAxis() *EventPadAxis {
	cpy := e.event.native
	var dst *EventPadAxis
	dst = (*EventPadAxis)(gextras.NewStructNative(unsafe.Pointer(cpy)))
	runtime.KeepAlive(e.event)
	return dst
}

// underlyingEvent marks the struct for Eventer.
func (v *EventPadGroupMode) underlyingEvent() unsafe.Pointer {
	return unsafe.Pointer(v.native)
}

// AsPadGroupMode returns a copy of e as the struct *EventPadGroupMode.
// It does this without any knowledge on the actual type of the value, so
// the caller must take care of type-checking beforehand.
func (e *Event) AsPadGroupMode() *EventPadGroupMode {
	cpy := e.event.native
	var dst *EventPadGroupMode
	dst = (*EventPadGroupMode)(gextras.NewStructNative(unsafe.Pointer(cpy)))
	runtime.KeepAlive(e.event)
	return dst
}
