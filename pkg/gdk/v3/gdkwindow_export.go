// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/cairo"
	"github.com/diamondburned/gotk4/pkg/core/gbox"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

//export _gotk4_gdk3_WindowChildFunc
func _gotk4_gdk3_WindowChildFunc(arg1 *C.void, arg2 C.gpointer) (cret C.gboolean) {
	var fn WindowChildFunc
	{
		v := gbox.Get(uintptr(arg2))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(WindowChildFunc)
	}

	var _window Windower // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gdk.Windower is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Windower)
			return ok
		})
		rv, ok := casted.(Windower)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.Windower")
		}
		_window = rv
	}

	ok := fn(_window)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gdk3_Window_ConnectCreateSurface
func _gotk4_gdk3_Window_ConnectCreateSurface(arg0 C.gpointer, arg1 C.gint, arg2 C.gint, arg3 C.guintptr) (cret *C.void) {
	var f func(width, height int) (surface *cairo.Surface)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(width, height int) (surface *cairo.Surface))
	}

	var _width int  // out
	var _height int // out

	_width = int(arg1)
	_height = int(arg2)

	surface := f(_width, _height)

	var _ *cairo.Surface

	cret = (*C.void)(unsafe.Pointer(surface.Native()))

	return cret
}

//export _gotk4_gdk3_Window_ConnectMovedToRect
func _gotk4_gdk3_Window_ConnectMovedToRect(arg0 C.gpointer, arg1 C.gpointer, arg2 C.gpointer, arg3 C.gboolean, arg4 C.gboolean, arg5 C.guintptr) {
	var f func(flippedRect, finalRect unsafe.Pointer, flippedX, flippedY bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg5))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(flippedRect, finalRect unsafe.Pointer, flippedX, flippedY bool))
	}

	var _flippedRect unsafe.Pointer // out
	var _finalRect unsafe.Pointer   // out
	var _flippedX bool              // out
	var _flippedY bool              // out

	_flippedRect = (unsafe.Pointer)(unsafe.Pointer(arg1))
	_finalRect = (unsafe.Pointer)(unsafe.Pointer(arg2))
	if arg3 != 0 {
		_flippedX = true
	}
	if arg4 != 0 {
		_flippedY = true
	}

	f(_flippedRect, _finalRect, _flippedX, _flippedY)
}

//export _gotk4_gdk3_Window_ConnectPickEmbeddedChild
func _gotk4_gdk3_Window_ConnectPickEmbeddedChild(arg0 C.gpointer, arg1 C.gdouble, arg2 C.gdouble, arg3 C.guintptr) (cret *C.void) {
	var f func(x, y float64) (window Windower)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(x, y float64) (window Windower))
	}

	var _x float64 // out
	var _y float64 // out

	_x = float64(arg1)
	_y = float64(arg2)

	window := f(_x, _y)

	var _ Windower

	if window != nil {
		cret = (*C.void)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	}

	return cret
}
