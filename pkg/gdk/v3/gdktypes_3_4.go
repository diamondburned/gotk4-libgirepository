// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"fmt"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeModifierIntent = coreglib.Type(girepository.MustFind("Gdk", "ModifierIntent").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeModifierIntent, F: marshalModifierIntent},
	})
}

// ModifierIntent: this enum is used with gdk_keymap_get_modifier_mask() in
// order to determine what modifiers the currently used windowing system backend
// uses for particular purposes. For example, on X11/Windows, the Control key is
// used for invoking menu shortcuts (accelerators), whereas on Apple computers
// itâ€™s the Command key (which correspond to GDK_CONTROL_MASK and GDK_MOD2_MASK,
// respectively).
type ModifierIntent C.gint

const (
	// ModifierIntentPrimaryAccelerator: primary modifier used to invoke menu
	// accelerators.
	ModifierIntentPrimaryAccelerator ModifierIntent = iota
	// ModifierIntentContextMenu: modifier used to invoke context menus. Note
	// that mouse button 3 always triggers context menus. When this modifier is
	// not 0, it additionally triggers context menus when used with mouse button
	// 1.
	ModifierIntentContextMenu
	// ModifierIntentExtendSelection: modifier used to extend selections using
	// modifier-click or modifier-cursor-key.
	ModifierIntentExtendSelection
	// ModifierIntentModifySelection: modifier used to modify selections, which
	// in most cases means toggling the clicked item into or out of the
	// selection.
	ModifierIntentModifySelection
	// ModifierIntentNoTextInput: when any of these modifiers is pressed, the
	// key event cannot produce a symbol directly. This is meant to be used for
	// input methods, and for use cases like typeahead search.
	ModifierIntentNoTextInput
	// ModifierIntentShiftGroup: modifier that switches between keyboard groups
	// (AltGr on X11/Windows and Option/Alt on OS X).
	ModifierIntentShiftGroup
	// ModifierIntentDefaultModMask: set of modifier masks accepted as modifiers
	// in accelerators. Needed because Command is mapped to MOD2 on OSX, which
	// is widely used, but on X11 MOD2 is NumLock and using that for a mod key
	// is problematic at best. Ref:
	// https://bugzilla.gnome.org/show_bug.cgi?id=736125.
	ModifierIntentDefaultModMask
)

func marshalModifierIntent(p uintptr) (interface{}, error) {
	return ModifierIntent(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for ModifierIntent.
func (m ModifierIntent) String() string {
	switch m {
	case ModifierIntentPrimaryAccelerator:
		return "PrimaryAccelerator"
	case ModifierIntentContextMenu:
		return "ContextMenu"
	case ModifierIntentExtendSelection:
		return "ExtendSelection"
	case ModifierIntentModifySelection:
		return "ModifySelection"
	case ModifierIntentNoTextInput:
		return "NoTextInput"
	case ModifierIntentShiftGroup:
		return "ShiftGroup"
	case ModifierIntentDefaultModMask:
		return "DefaultModMask"
	default:
		return fmt.Sprintf("ModifierIntent(%d)", m)
	}
}
