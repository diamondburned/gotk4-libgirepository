// Code generated by girgen. DO NOT EDIT.

package gdk

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/core/girepository"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gobject-2.0
// #include <stdlib.h>
// #include <glib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeColor = coreglib.Type(girepository.MustFind("Gdk", "Color").RegisteredGType())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeColor, F: marshalColor},
	})
}

// Color is used to describe a color, similar to the XColor struct used in the
// X11 drawing API.
//
// Deprecated: Use RGBA.
//
// An instance of this type is always passed by reference.
type Color struct {
	*color
}

// color is the struct that's finalized.
type color struct {
	native unsafe.Pointer
}

var GIRInfoColor = girepository.MustFind("Gdk", "Color")

func marshalColor(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &Color{&color{(unsafe.Pointer)(b)}}, nil
}

// NewColor creates a new Color instance from the given
// fields. Beware that this function allocates on the Go heap; be careful
// when using it!
func NewColor(pixel uint32, red, green, blue uint16) Color {
	var f0 C.guint32 // out
	f0 = C.guint32(pixel)
	var f1 C.guint16 // out
	f1 = C.guint16(red)
	var f2 C.guint16 // out
	f2 = C.guint16(green)
	var f3 C.guint16 // out
	f3 = C.guint16(blue)

	size := GIRInfoColor.StructSize()
	native := make([]byte, size)
	gextras.Sink(&native[0])

	offset0 := GIRInfoColor.StructFieldOffset("pixel")
	valptr0 := (*C.guint32)(unsafe.Add(unsafe.Pointer(&native[0]), offset0))
	*valptr0 = f0

	offset1 := GIRInfoColor.StructFieldOffset("red")
	valptr1 := (*C.guint16)(unsafe.Add(unsafe.Pointer(&native[0]), offset1))
	*valptr1 = f1

	offset2 := GIRInfoColor.StructFieldOffset("green")
	valptr2 := (*C.guint16)(unsafe.Add(unsafe.Pointer(&native[0]), offset2))
	*valptr2 = f2

	offset3 := GIRInfoColor.StructFieldOffset("blue")
	valptr3 := (*C.guint16)(unsafe.Add(unsafe.Pointer(&native[0]), offset3))
	*valptr3 = f3

	return *(*Color)(gextras.NewStructNative(unsafe.Pointer(&native[0])))
}

// Pixel: for allocated colors, the pixel value used to draw this color on the
// screen. Not used anymore.
func (c *Color) Pixel() uint32 {
	offset := GIRInfoColor.StructFieldOffset("pixel")
	valptr := (*uint32)(unsafe.Add(c.native, offset))
	var _v uint32 // out
	_v = uint32(*valptr)
	return _v
}

// Red: red component of the color. This is a value between 0 and 65535, with
// 65535 indicating full intensity.
func (c *Color) Red() uint16 {
	offset := GIRInfoColor.StructFieldOffset("red")
	valptr := (*uint16)(unsafe.Add(c.native, offset))
	var _v uint16 // out
	_v = uint16(*valptr)
	return _v
}

// Green: green component of the color.
func (c *Color) Green() uint16 {
	offset := GIRInfoColor.StructFieldOffset("green")
	valptr := (*uint16)(unsafe.Add(c.native, offset))
	var _v uint16 // out
	_v = uint16(*valptr)
	return _v
}

// Blue: blue component of the color.
func (c *Color) Blue() uint16 {
	offset := GIRInfoColor.StructFieldOffset("blue")
	valptr := (*uint16)(unsafe.Add(c.native, offset))
	var _v uint16 // out
	_v = uint16(*valptr)
	return _v
}

// Pixel: for allocated colors, the pixel value used to draw this color on the
// screen. Not used anymore.
func (c *Color) SetPixel(pixel uint32) {
	offset := GIRInfoColor.StructFieldOffset("pixel")
	valptr := (*C.guint32)(unsafe.Add(c.native, offset))
	*valptr = C.guint32(pixel)
}

// Red: red component of the color. This is a value between 0 and 65535, with
// 65535 indicating full intensity.
func (c *Color) SetRed(red uint16) {
	offset := GIRInfoColor.StructFieldOffset("red")
	valptr := (*C.guint16)(unsafe.Add(c.native, offset))
	*valptr = C.guint16(red)
}

// Green: green component of the color.
func (c *Color) SetGreen(green uint16) {
	offset := GIRInfoColor.StructFieldOffset("green")
	valptr := (*C.guint16)(unsafe.Add(c.native, offset))
	*valptr = C.guint16(green)
}

// Blue: blue component of the color.
func (c *Color) SetBlue(blue uint16) {
	offset := GIRInfoColor.StructFieldOffset("blue")
	valptr := (*C.guint16)(unsafe.Add(c.native, offset))
	*valptr = C.guint16(blue)
}
